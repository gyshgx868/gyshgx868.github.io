<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[BestCoder &#35;5]]></title>
      <url>http://gyshgx868.github.io/2016/07/10/BestCoder/bc-5/</url>
      <content type="html"><![CDATA[<p>BestCoder网址：<a href="http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=530" target="_blank" rel="noopener">http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=530</a><br>A：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4956" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4956</a><br>B：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4957" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4957</a><br>C：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4958" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4958</a><br>D：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4959" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4959</a></p>
<a id="more"></a>
<h1 id="A_-_Poor_Hanamichi">A - Poor Hanamichi</h1><h2 id="Description">Description</h2><p>Hanamichi is taking part in a programming contest, and he is assigned to solve a special problem as follow: Given a range [l, r] (including l and r), find out how many numbers in this range have the property: the sum of its odd digits is smaller than the sum of its even digits and the difference is 3. </p>
<p>A integer X can be represented in decimal as:</p>
<p>$X = A_n \times 10^n + A_{n-1} \times 10^{n-1} + \ldots + A_2 \times 10^2 + A_1 \times 10^1 + A_0$</p>
<p>The odd dights are $A_1, A_3, A_5 \ldots$ and $A_0, A_2, A_4 \ldots$ are even digits. </p>
<p>Hanamichi comes up with a solution, He notices that: </p>
<p>$10^{2k+1} \mod 11 = -1 (or 10)$, $10^{2k} \mod 11 = 1$, </p>
<p>So $X \mod 11$<br>$= (A_n \times 10^n + A_{n-1} \times 10^{n-1} + \ldots + A_2 \times 10^2 + A_1 \times 10^1 + A_0) \mod 11$<br>$= A_n \times (-1)^n + A_{n-1} \times (-1)^{n-1} + \ldots + A_2 - A_1 + A_0$<br>= sum_of_even_digits – sum_of_odd_digits</p>
<p>So he claimed that the answer is the number of numbers X in the range which satisfy the function: X mod 11 = 3. He calculate the answer in this way :<br>Answer = (r + 8) / 11 – (l – 1 + 8) / 11. </p>
<p>Rukaw heard of Hanamichi’s solution from you and he proved there is something wrong with Hanamichi’s solution. So he decided to change the test data so that Hanamichi’s solution can not pass any single test. And he asks you to do that for him.</p>
<h2 id="Input">Input</h2><p>You are given a integer $T$ ($1 ≤ T ≤ 100$), which tells how many single tests the final test data has. And for the following T lines, each line contains two integers l and r, which are the original test data. ($1 ≤ l ≤ r ≤ 10^18$)</p>
<h2 id="Output">Output</h2><h2 id="Sample_Input">Sample Input</h2><h2 id="Sample_Output">Sample Output</h2><h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1716" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1716</a></p>
<h1 id="解题思路">解题思路</h1><h1 id="AC代码">AC代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 255E Furlo and Rublo and Game]]></title>
      <url>http://gyshgx868.github.io/2015/11/11/CodeForces/cf-255e/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Furlo and Rublo play a game. The table has n piles of coins lying on it, the i-th pile has $a_i$ coins. Furlo and Rublo move in turns, Furlo moves first. In one move you are allowed to:<br><a id="more"></a></p>
<ul>
<li>choose some pile, let’s denote the current number of coins in it as x;</li>
<li>choose some integer y($0 ≤ y &lt; x$; $x^{1/4} ≤ y ≤ x^{1/2}$) and decrease the number of coins in this pile to y. In other words, after the described move the pile will have y coins left.</li>
</ul>
<p>The player who can’t make a move, loses.</p>
<p>Your task is to find out, who wins in the given game if both Furlo and Rublo play optimally well.</p>
<h2 id="Input">Input</h2><p>The first line contains integer n(1 ≤ n ≤ 77777) — the number of piles. The next line contains n integers $a_1$, $a_2$, …, $a_n$(1 ≤ $a_i$ ≤ 777777777777) — the sizes of piles. The numbers are separated by single spaces.</p>
<p>Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.</p>
<h2 id="Output">Output</h2><p>If both players play optimally well and Furlo wins, print “Furlo”, otherwise print “Rublo”. Print the answers without the quotes.</p>
<h2 id="Sample_test(s)">Sample test(s)</h2><table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
</tr>
<tr>
<td>1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>Rublo</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
</tr>
<tr>
<td>1 2</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>Rublo</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
</tr>
<tr>
<td>1 2 3 4 5 6 7 8 9 10</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>Furlo</td>
</tr>
</tbody>
</table>
<h1 id="题目链接">题目链接</h1><p><a href="http://codeforces.com/problemset/problem/255/E" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/255/E</a></p>
<h1 id="解题思路">解题思路</h1><p>题目大意：两个人人轮流从N堆石子中取石子，设某一堆得石子数量为x，必须把这堆石子拿到剩下y个，$x^{1/4}&lt;=y&lt;=x^{1/2}$，不能拿得输。</p>
<p>解题思路：这道题和尼姆博弈非常的相似，我们需要寻找必败态。很容易想到，当这一堆得石子剩余1，2，3得时候，此时先手必输。对于石子数量大于大于3的堆，我们需要通过前面的状态来求得后续的状态。</p>
<p>例如，这一堆有4个石子的时候，我们可以取的y值是2，那么我们可以拿走的石子的数量就是2，因此当<code>x = 4</code>的时候，<code>sg[4] = mex(sg[2])</code>。<strong>这里的mex(A)函数是一个作用于集合A上的函数，意义是找到一个不在A集合中的最小的自然数</strong>。由于<code>sg[2] = 0</code>，因此<code>sg[4] = mex(sg[2]) = 1</code>；</p>
<p>当<code>x = 5</code>的时候，我们可以取的y值是2，因此<code>sg[5] = mex(sg[2]) = 1</code>；</p>
<p>当<code>x = 6</code>的时候，我们可以取的y值是2，因此<code>sg[6] = mex(sg[2]) = 1</code>；</p>
<p>……</p>
<p>当<code>x = 16</code>的时候，我们可以取的y值是2，3，4，因此<code>sg[14] = mex(sg[2], sg[3], sg[4]) = 2</code>；</p>
<p>当<code>x = 16</code>的时候，我们可以取的y值是2，3，4，因此<code>sg[14] = mex(sg[2], sg[3], sg[4]) = 2</code>；</p>
<p>……</p>
<p>多求几个元素我们就可以发现这个SG函数的规律了，它是成段出现的，而且段的长度按照指数级别增长。按照这个规律打表，但是数据范围是1 - 777777777777，无法开这么大的数组，因此我们打表的时候我们只需要处理到$10^6$就可以了，因为$10^6$的sg值可以处理到$10^12$左右的数据。但是这个CF题比较坑，数据不多不少恰好超过了$10^12$这个范围，因此我们需要找到那个超大的下标。</p>
<p>因此我们可以模仿前面的规律，来找到极限的数据。我们可以通过打表来找到的最大的数是50626，此时<code>sg[50626] = 3</code> ，因此我们可以处理小于<code>50626 * 50626</code>这个数的数据了。一旦超出了这个数据，我们的y值取值范围就会改变，会受到3这个sg值的影响，因此我们要寻找的最大的数就是<code>50626 * 50626</code>。</p>
<p>打表求出每一堆的sg值之后，我们就可以依次将这些状态异或起来，如果最后的结果是0，那么就代表的是先手的必败态，如果是一个非0的数，那么就是后手的必败态。</p>
<p>然后附上一个SG打表的函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; sg;</span><br><span class="line"><span class="keyword">bool</span> hash[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSG</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">sqrt</span>(<span class="built_in">sqrt</span>(x)), r = <span class="built_in">sqrt</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (l * l * l * l != x) l++;</span><br><span class="line">    <span class="built_in">memset</span>(hash, <span class="literal">false</span>, <span class="keyword">sizeof</span>(hash));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hash[sg[i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hash[i]) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sg[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sg[i] = getSG(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sg[i] != sg[i - <span class="number">1</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sg[%d] = %d\n"</span>, i, sg[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sg[4] = 1</span></span><br><span class="line"><span class="comment">sg[16] = 2</span></span><br><span class="line"><span class="comment">sg[82] = 0</span></span><br><span class="line"><span class="comment">sg[6724] = 3</span></span><br><span class="line"><span class="comment">sg[50626] = 1</span></span><br><span class="line"><span class="comment">sg[2562991876] = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<h1 id="AC代码">AC代码</h1><p>4 KB/62 ms/GNU G++ 4.9.2<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">4</span>) ans ^= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">16</span>) ans ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">82</span>) ans ^= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">6724</span>) ans ^= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">50626</span>) ans ^= <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">2562991876L</span>L) ans ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> ans ^= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans) <span class="built_in">puts</span>(<span class="string">"Furlo"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Rublo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 255D Mr. Bender and Square]]></title>
      <url>http://gyshgx868.github.io/2015/11/07/CodeForces/cf-255d/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.<br><a id="more"></a><br>We’ll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.</p>
<p>For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).</p>
<p>In how many seconds will Mr. Bender get happy?</p>
<h2 id="Input">Input</h2><p>The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 10^9; 1 ≤ x, y ≤ n; c ≤ n^2).</p>
<h2 id="Output">Output</h2><p>In a single line print a single integer — the answer to the problem.</p>
<h2 id="Sample_test(s)">Sample test(s)</h2><table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>6 4 3 1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>9 3 8 10</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
</tr>
</tbody>
</table>
<h2 id="Note">Note</h2><p>Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure.<br><img src="http://codeforces.com/predownloaded/6e/3e/6e3ecb10e3686908f6976363a9e607ca9dfeb5c4.png" alt="cf-255d"></p>
<h1 id="题目链接">题目链接</h1><p><a href="http://codeforces.com/problemset/problem/255/C" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/255/C</a></p>
<h1 id="解题思路">解题思路</h1><p>题目大意：给一个n * n的格子，然后给一个坐标(x, y)，从这个格子开始，每隔1秒格子会向四周扩散，问经过多少秒格子的总数会大于等于给定的c。<br>解题思路：由于n非常的大，所以无法开数组进行模拟；又因为在扩散的时候碰到墙壁的话，不会再继续向墙的方向进行扩散了，所以公式的解法也行不通。因此我们就需要通过数学来计算一定时间内格子的数目，转换为面积的计算，这样就容易了很多。</p>
<p>因此我们可以二分所有可能的时间，来计算最终的结果。二分的下限是0，上限是n * 2。在计算格子的数量的时候，我们需要做比较多的判断。首先需要先计算出在一定时间内，不考虑墙壁影响的情况下的格子数量，然后判断是否碰到了四周的墙壁，碰到了就减去超出的部分。另外注意如下类似的情况：如果同时超出了左侧墙壁和上侧墙壁，那么我们在分别处理上侧和左侧的时候会有重复的部分，因此我们要把多减掉的部分再加回来。其他三个角亦是如此。</p>
<p>代码写得应该比较清晰，画一下图就可以理解了。</p>
<h1 id="AC代码">AC代码</h1><p>4 KB/30 ms/GNU G++ 4.9.2<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;cstdio&gt;</span></span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">ll l, r, u, d;</span><br><span class="line">ll n, <span class="keyword">x</span>, <span class="keyword">y</span>, c;</span><br><span class="line">ll <span class="keyword">s</span><span class="string">qr(ll x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">x</span> * <span class="keyword">x</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll tri(ll <span class="keyword">x</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">x</span> + <span class="number">1</span>) * <span class="keyword">x</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool solve(ll t)</span><br><span class="line">&#123;</span><br><span class="line">    ll sum = t * t + (t + <span class="number">1</span>) * (t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; l) sum -= <span class="keyword">s</span><span class="string">qr(t - l)</span>;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; r) sum -= <span class="keyword">s</span><span class="string">qr(t - r)</span>;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; u) sum -= <span class="keyword">s</span><span class="string">qr(t - u)</span>;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; d) sum -= <span class="keyword">s</span><span class="string">qr(t - d)</span>;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; l + d) sum += tri(t - (l + d) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; l + u) sum += tri(t - (l + u) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; r + d) sum += tri(t - (r + d) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; r + u) sum += tri(t - (r + u) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= c) <span class="keyword">return</span> true;</span><br><span class="line">    <span class="keyword">return</span> false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (~scanf(<span class="string">"%I64d%I64d%I64d%I64d"</span>, &amp;n, &amp;<span class="keyword">x</span>, &amp;<span class="keyword">y</span>, &amp;c))</span><br><span class="line">    &#123;</span><br><span class="line">        l = <span class="keyword">x</span> - <span class="number">1</span>, r = n - <span class="keyword">x</span>;</span><br><span class="line">        u = <span class="keyword">y</span> - <span class="number">1</span>, d = n - <span class="keyword">y</span>;</span><br><span class="line">        ll low = <span class="number">0</span>, high = <span class="number">2</span> * n, mid;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (solve(mid)) high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%I64d\n"</span>, low);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 255C Almost Arithmetical Progression]]></title>
      <url>http://gyshgx868.github.io/2015/11/07/CodeForces/cf-255c/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Gena loves sequences of numbers. Recently, he has discovered a new type of sequences which he called an almost arithmetical progression. A sequence is an almost arithmetical progression, if its elements can be represented as:</p>
<ul>
<li>$a_1 = p$, where p is some integer;</li>
<li>ai = $a_{i-1} + (-1)^{i+1} * q (i &gt; 1)$, where q is some integer.<a id="more"></a>
Right now Gena has a piece of paper with sequence b, consisting of n integers. Help Gena, find there the longest subsequence of integers that is an almost arithmetical progression.</li>
</ul>
<p>Sequence s1, s2, …, sk is a subsequence of sequence b1, b2, …, bn, if there is such increasing sequence of indexes i1, i2, …, ik (1  ≤ i1 &lt; i2 &lt; … &lt; ik ≤ n), that $b_{i_j} = s_j$. In other words, sequence s can be obtained from b by crossing out some elements.</p>
<h2 id="Input">Input</h2><p>The first line contains integer n (1 ≤ n ≤ 4000). The next line contains n integers b1, b2, …, bn (1 ≤ bi ≤ 10^6).</p>
<h2 id="Output">Output</h2><p>Print a single integer — the length of the required longest subsequence.</p>
<h2 id="Sample_test(s)">Sample test(s)</h2><table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
</tr>
<tr>
<td>3 5</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
</tr>
<tr>
<td>10 20 10 30</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
</tr>
</tbody>
</table>
<h1 id="题目链接">题目链接</h1><p><a href="http://codeforces.com/problemset/problem/255/C" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/255/C</a></p>
<h1 id="解题思路">解题思路</h1><p>题目大意：给出一个序列b，求b中形如p，p - q，p，p - q，p，p - q，…这样出现的最长子序列的最大长度。</p>
<p>这题第一反应是O(n^3)算法，没有试验到底会不会TLE。再纠结了1小时之后决定写一个DP试试。</p>
<p>所以我们设<code>dp[i][j]</code>，表示倒数第一个数是<code>a[i]</code>，倒数第二个数是<code>a[j]</code>的子序列的最大长度。然后观察我们要找的子序列的规律，有动态转移方程：<code>dp[i][j] = dp[j][k] + 1</code>，此处的<code>k</code>是使<code>a[i] == a[j]</code>的j的值。也就是说，<code>dp[i][j]</code>的值是在遇到<code>a[i]</code>这个元素之前的子序列长度加1得到的。首先应该先设任意两个数的<code>dp[i][j] = 2</code>才可以。</p>
<h1 id="AC代码">AC代码</h1><p>62800 KB/109 ms/GNU G++ 4.9.2<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">4005</span>][<span class="number">4005</span>], a[<span class="number">4005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">-1</span>) dp[i][j] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[j][k] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (a[j] == a[i]) k = j;</span><br><span class="line">                ans = max(ans, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 248B Chilly Willy]]></title>
      <url>http://gyshgx868.github.io/2015/11/06/CodeForces/cf-248b/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Chilly Willy loves playing with numbers. He only knows prime numbers that are digits yet. These numbers are 2, 3, 5 and 7. But Willy grew rather bored of such numbers, so he came up with a few games that were connected with them.<br><a id="more"></a><br>Chilly Willy wants to find the minimum number of length n, such that it is simultaneously divisible by all numbers Willy already knows (2, 3, 5 and 7). Help him with that.</p>
<p>A number’s length is the number of digits in its decimal representation without leading zeros.</p>
<h2 id="Input">Input</h2><p>A single input line contains a single integer n (1 ≤ n ≤ 10^5).</p>
<h2 id="Output">Output</h2><p>Print a single integer — the answer to the problem without leading zeroes, or “-1” (without the quotes), if the number that meet the problem condition does not exist.</p>
<h2 id="Sample_test(s)">Sample test(s)</h2><table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>5</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>10080</td>
</tr>
</tbody>
</table>
<h1 id="题目链接">题目链接</h1><p><a href="http://codeforces.com/problemset/problem/248/B" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/248/B</a></p>
<h1 id="解题思路">解题思路</h1><p>题目大意：给一个n，求一个最小的n位数，使这个数能同时被2，3，5，7整除。<br>解题思路：由于我们要找的数是能被210整除的，所以可以得出来我们求的数一定是一个位数为3位循环的数，因为要保证最小的数，因为<code>10 ^ n % a = x</code>，所以我们找数的时候只需找上<code>10 ^ n + y</code>（此处的<code>y</code>就是循环节，也就是<code>210 - x</code>）这个数就好了。</p>
<h1 id="AC代码">AC代码</h1><p>0 KB/30 ms/GNU G++ 4.9.2<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[] = &#123;<span class="number">50</span>, <span class="number">80</span>, <span class="number">170</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">110</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"210\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%03d\n"</span>, num[(n - <span class="number">4</span>) % <span class="number">6</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UVA 1152 4 Values whose Sum is 0]]></title>
      <url>http://gyshgx868.github.io/2015/10/06/UVA/uva-1152/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>The SUM problem can be formulated as follows: given four lists A, B, C, D of integer values, compute how many quadruplet (a, b, c, d) ∈ A × B × C × D are such that a + b + c + d = 0. In the following, we assume that all lists have the same size n.<br><a id="more"></a></p>
<h2 id="Input">Input</h2><p>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs.</p>
<p>The first line of the input file contains the size of the lists n (this value can be as large as 4000). We then have n lines containing four integer values (with absolute value as large as 228) that belong respectively to A, B, C and D.</p>
<h2 id="Output">Output</h2><p>For each test case, your program has to write the number quadruplets whose sum is zero.</p>
<p>The outputs of two consecutive cases will be separated by a blank line.</p>
<h2 id="Sample_Input">Sample Input</h2><p>1</p>
<p>6<br>-45 22 42 -16<br>-41 -27 56 30<br>-36 53 -37 77<br>-36 30 -75 -46<br>26 -38 -10 62<br>-32 -54 -6 45</p>
<h2 id="Sample_Output">Sample Output</h2><p>5</p>
<p><strong>Sample Explanation</strong>: Indeed, the sum of the five following quadruplets is zero: (-45, -27, 42, 30), (26, 30, -10, -46), (-32, 22, 56, -46), (-32, 30, -75, 77), (-32, -54, 56, 30).</p>
<h1 id="题目链接">题目链接</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3593" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3593</a></p>
<h1 id="解题思路">解题思路</h1><p>题意：给n行4列数，要求每列选一个数，使4个数相加起来的和为0。</p>
<p>很容易就想到了O(n^4)算法，但是很显然题目不是让我们这样做，于是就想到了二分的方法。首先我们先把前两列和后两列的数分别两两组合，这样就得到了两个数组<code>a</code>和<code>b</code>，接着把<code>b</code>数组排一下序，然后使用二分查找遍历<code>a</code>，在<code>b</code>中寻找等于<code>-a[i]</code>的元素的数量，然后将数量累加就是最后的结论。</p>
<p>要注意两组输出数据之间有一个空行，但是最后一组数据没有空行。</p>
<h1 id="AC代码">AC代码</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include &lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res[<span class="number">5005</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">16000005</span>], b[<span class="number">16000005</span>];</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">                scanf(<span class="string">"%d"</span>, &amp;res[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[<span class="keyword">index</span>++] = res[i][<span class="number">0</span>] + res[j][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                b[<span class="keyword">index</span>++] = res[i][<span class="number">2</span>] + res[j][<span class="number">3</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">sort</span>(b, b + <span class="keyword">index</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">index</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">pos</span> = lower_bound(b, b + <span class="keyword">index</span>, -a[i]) - b;</span><br><span class="line">            <span class="keyword">while</span> (b[<span class="keyword">pos</span>] == -a[i] &amp;&amp; <span class="keyword">pos</span> &lt; <span class="keyword">index</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">pos</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        <span class="keyword">if</span> (t) <span class="keyword">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UVA 12333 Revenge of Fibonacci]]></title>
      <url>http://gyshgx868.github.io/2015/10/06/UVA/uva-12333/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>The well-known Fibonacci sequence is defined as following:</p>
<p>F(0) = F(1) = 1<br>F(n) = F(n − 1) + F(n − 2) ∀n ≥ 2</p>
<p>Here we regard n as the index of the Fibonacci number F(n).<br><a id="more"></a><br>This sequence has been studied since the publication of Fibonacci’s book Liber Abaci. So far, many properties of this sequence have been introduced.</p>
<p>You had been interested in this sequence, while after reading lots of papers about it. You think there’s no need to research in it anymore because of the lack of its unrevealed properties. Yesterday, you decided to study some other sequences like Lucas sequence instead.</p>
<p>Fibonacci came into your dream last night. “Stupid human beings. Lots of important properties of Fibonacci sequence have not been studied by anyone, for example, from the Fibonacci number 347746739…”</p>
<p>You woke up and couldn’t remember the whole number except the first few digits Fibonacci told you. You decided to write a program to find this number out in order to continue your research on Fibonacci sequence.</p>
<h2 id="Input">Input</h2><p>There are multiple test cases. The first line of input contains a single integer T denoting the number of test cases (T ≤ 50000).</p>
<p>For each test case, there is a single line containing one non-empty string made up of at most 40 digits. And there won’t be any unnecessary leading zeroes.</p>
<h2 id="Output">Output</h2><p>For each test case, output the smallest index of the smallest Fibonacci number whose decimal notation begins with the given digits. If no Fibonacci number with index <strong>smaller than 100000</strong> satisfy that condition, output ‘-1’ instead — you think what Fibonacci wants to told you beyonds your ability.</p>
<h2 id="Sample_Input">Sample Input</h2><p>15<br>1<br>12<br>123<br>1234<br>12345<br>9<br>98<br>987<br>9876<br>98765<br>89<br>32<br>51075176167176176176<br>347746739<br>5610</p>
<h2 id="Sample_Output">Sample Output</h2><p>Case #1: 0<br>Case #2: 25<br>Case #3: 226<br>Case #4: 1628<br>Case #5: 49516<br>Case #6: 15<br>Case #7: 15<br>Case #8: 15<br>Case #9: 43764<br>Case #10: 49750<br>Case #11: 10<br>Case #12: 51<br>Case #13: -1<br>Case #14: 1233<br>Case #15: 22374</p>
<h1 id="题目链接">题目链接</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3755" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3755</a></p>
<h1 id="解题思路">解题思路</h1><p>其实这是一道非常水的题，就是一个简单的字典树模板题。</p>
<p>题意是输入一个不超过40位数字的数n，然后找出前缀为n的最小的斐波那契数的下标是多少。</p>
<p>用C++做的话需要手写大数加法，然后算出100000项的斐波那契数，统统存到字典树里，存的时候增加一个参数，记录当前存的斐波那契数的下标。但是后面算出来的斐波那契数的位数非常的多，计算的时候肯定会超时，存储的时候也肯定会爆内存。所以需要截断一下，只计算前50位就可以了。</p>
<p>一开始本来使用C++写的，但是不知为何一直RE（在自己电脑上就爆内存了），后来一气之下改用Java，处理一下大数和输入输出，就把这题过了。</p>
<h1 id="AC代码">AC代码</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Main</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span>[][] ch = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5000005</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span>[] val = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5000005</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> cnt;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span>;</span><br><span class="line">        <span class="built_in">int</span> t;</span><br><span class="line">        Fib();</span><br><span class="line">        t = s.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">str</span> = s.next();</span><br><span class="line">            System.out.printf(<span class="string">"Case #%d: %d\n"</span>, i, query(<span class="built_in">str</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> Fib()</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">String</span> a, b;</span><br><span class="line">        BigInteger x = BigInteger.ONE, y = BigInteger.ONE, ret;</span><br><span class="line">        insert(<span class="string">"1"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a = x.toString();</span><br><span class="line">            b = y.toString();</span><br><span class="line">            <span class="keyword">if</span> (b.length() &gt; <span class="number">50</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x = <span class="keyword">new</span> BigInteger(a.substring(<span class="number">0</span>, a.length() - <span class="number">1</span>));</span><br><span class="line">                y = <span class="keyword">new</span> BigInteger(b.substring(<span class="number">0</span>, b.length() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            ret = x.<span class="built_in">add</span>(y);</span><br><span class="line">            insert(ret.toString(), i);</span><br><span class="line">            x = y;</span><br><span class="line">            y = ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> insert(<span class="keyword">String</span> s, <span class="built_in">int</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length() &amp;&amp; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> k = s.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch[u][k] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                val[cnt] = x;</span><br><span class="line">                ch[u][k] = cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = ch[u][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> query(<span class="keyword">String</span> s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> k = s.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch[u][k] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            u = ch[u][k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UVA 401 Palindromes]]></title>
      <url>http://gyshgx868.github.io/2015/10/05/UVA/uva-401/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>A regular palindrome is a string of numbers or letters that is the same forward as backward. For example, the string “ABCDEDCBA” is a palindrome because it is the same when the string is read from left to right as when the string is read from right to left.<br><a id="more"></a><br>A mirrored string is a string for which when each of the elements of the string is changed to its reverse (if it has a reverse) and the string is read backwards the result is the same as the original string. For example, the string “3AIAE” is a mirrored string because “A” and “I” are their own reverses, and “3” and “E” are each others’ reverses.</p>
<p>A mirrored palindrome is a string that meets the criteria of a regular palindrome and the criteria of a mirrored string. The string “ATOYOTA” is a mirrored palindrome because if the string is read backwards, the string is the same as the original and because if each of the characters is replaced by its reverse and the result is read backwards, the result is the same as the original string.</p>
<p>Of course,”A”,”T”, “O”, and “Y” are all their own reverses.</p>
<p>A list of all valid characters and their reverses is as follows.</p>
<table>
<thead>
<tr>
<th>Character</th>
<th>Reverse</th>
<th>Character</th>
<th>Reverse</th>
<th>Character</th>
<th>Reverse</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>A</td>
<td>M</td>
<td>M</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>B</td>
<td></td>
<td>N</td>
<td></td>
<td>Z</td>
<td>5</td>
</tr>
<tr>
<td>C</td>
<td></td>
<td>O</td>
<td>O</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>D</td>
<td></td>
<td>P</td>
<td></td>
<td>2</td>
<td>S</td>
</tr>
<tr>
<td>E</td>
<td>3</td>
<td>Q</td>
<td></td>
<td>3</td>
<td>E</td>
</tr>
<tr>
<td>F</td>
<td></td>
<td>R</td>
<td></td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>G</td>
<td></td>
<td>S</td>
<td>2</td>
<td>5</td>
<td>Z</td>
</tr>
<tr>
<td>H</td>
<td>H</td>
<td>T</td>
<td>T</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>I</td>
<td>I</td>
<td>U</td>
<td>U</td>
<td>7</td>
<td></td>
</tr>
<tr>
<td>J</td>
<td>L</td>
<td>V</td>
<td>V</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>K</td>
<td></td>
<td>W</td>
<td>W</td>
<td>9</td>
<td></td>
</tr>
<tr>
<td>L</td>
<td>J</td>
<td>X</td>
<td>X</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Note</strong> that O (zero) and 0 (the letter) are considered the same character and therefore <strong>ONLY</strong> the letter “0” is a valid character.</p>
<h2 id="Input">Input</h2><p>Input consists of strings (one per line) each of which will consist of one to twenty valid characters. There will be no invalid characters in any of the strings. Your program should read to the end of file.</p>
<h2 id="Output">Output</h2><p>For each input string, you should print the string starting in column 1 immediately followed by exactly one of the following strings.</p>
<table>
<thead>
<tr>
<th>STRING</th>
<th>CRITERIA</th>
</tr>
</thead>
<tbody>
<tr>
<td>“ — is not a palindrome.”</td>
<td>if the string is not a palindrome and is not a mirrored string</td>
</tr>
<tr>
<td>“ — is a regular palindrome.”</td>
<td>if the string is a palindrome and is not a mirrored string</td>
</tr>
<tr>
<td>“ — is a mirrored string.”</td>
<td>if the string is not a palindrome and is a mirrored string</td>
</tr>
<tr>
<td>“ — is a mirrored palindrome.”</td>
<td>if the string is a palindrome and is a mirrored string</td>
</tr>
</tbody>
</table>
<p><strong>Note</strong> that the output line is to include the -‘s and spacing exactly as shown in the table above and demonstrated in the Sample Output below.</p>
<p>In addition, after each output line, you must print an empty line.</p>
<h2 id="Sample_Input">Sample Input</h2><p>NOTAPALINDROME<br>ISAPALINILAPASI<br>2A3MEAS<br>ATOYOTA</p>
<h2 id="Sample_Output">Sample Output</h2><p>NOTAPALINDROME — is not a palindrome.</p>
<p>ISAPALINILAPASI — is a regular palindrome.</p>
<p>2A3MEAS — is a mirrored string.</p>
<p>ATOYOTA — is a mirrored palindrome.</p>
<h1 id="题目链接">题目链接</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=342" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=342</a></p>
<h1 id="解题思路">解题思路</h1><p>题目意思：判断输入的字符串是否是回文串还是镜面字符串。<br>回文串：从左到右读和从右到左读是一样的。<br>镜面字符串：如果某个字符有镜面字符，转换为相应的镜面字符。转换后从左到右读和从右到左读是一样的。<br>注意数字0和字母O是等价的，并且在每组的输出要多输出一个空行。</p>
<h1 id="AC代码">AC代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch[] = <span class="string">"AEHIJLMOSTUVWXYZ123580"</span>;</span><br><span class="line"><span class="keyword">char</span> re[] = <span class="string">"A3HILJMO2TUVWXY51SEZ80"</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge1</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != s[len - i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge2</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[len - i - <span class="number">1</span>] != m[s[i]])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len &amp; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[len / <span class="number">2</span>] != <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">return</span> m[s[len / <span class="number">2</span>]] != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1005</span>], str2[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(ch); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        m[ch[i]] = re[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str2[i] = str[i];</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">'0'</span>) str2[i] = <span class="string">'O'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str2[len] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">bool</span> x = judge1(str2), y = judge2(str2);</span><br><span class="line">        <span class="keyword">if</span> (!x &amp;&amp; !y)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s -- is not a palindrome.\n\n"</span>, str);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; !y)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s -- is a regular palindrome.\n\n"</span>, str);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!x &amp;&amp; y)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s -- is a mirrored string.\n\n"</span>, str);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; y)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s -- is a mirrored palindrome.\n\n"</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python运算符]]></title>
      <url>http://gyshgx868.github.io/2015/10/03/Python/06-python-operators/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-operators.html#ysf3" target="_blank" rel="noopener">runoob.com - Python运算符</a><br><a id="more"></a></p>
<h1 id="什么是运算符？">什么是运算符？</h1><p>本章节主要说明Python的运算符。举个简单的例子：<code>4 + 5 = 9</code>。例子中，4和5被称为操作数，“+”号为运算符。</p>
<p>Python语言支持以下类型的运算符：</p>
<ul>
<li>算术运算符</li>
<li>比较（关系）运算符</li>
<li>赋值运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>成员运算符</li>
<li>身份运算符</li>
<li>运算符优先级</li>
</ul>
<p>接下来让我们一个个来学习Python的运算符。</p>
<h1 id="Python算术运算符">Python算术运算符</h1><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加 - 两个对象相加</td>
<td>a + b 输出结果 30</td>
</tr>
<tr>
<td>-</td>
<td>减 - 得到负数或是一个数减去另一个数</td>
<td>a - b 输出结果 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td>a * b 输出结果 200</td>
</tr>
<tr>
<td>/</td>
<td>除 - x除以y</td>
<td>b / a 输出结果 2</td>
</tr>
<tr>
<td>%</td>
<td>取模 - 返回除法的余数</td>
<td>b % a 输出结果 0</td>
</tr>
<tr>
<td>**</td>
<td>幂 - 返回x的y次幂</td>
<td>a**b 为10的20次方，输出结果 100000000000000000000</td>
</tr>
<tr>
<td>//</td>
<td>取整除 - 返回商的整数部分</td>
<td>9//2 输出结果 4，9.0//2.0 输出结果 4.0</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有算术运算符的操作：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line">print <span class="string">"Line 1 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a - b</span><br><span class="line">print <span class="string">"Line 2 - Value of c is "</span>, c </span><br><span class="line"></span><br><span class="line">c = a * b</span><br><span class="line">print <span class="string">"Line 3 - Value of c is "</span>, c </span><br><span class="line"></span><br><span class="line">c = a / b</span><br><span class="line">print <span class="string">"Line 4 - Value of c is "</span>, c </span><br><span class="line"></span><br><span class="line">c = a % b</span><br><span class="line">print <span class="string">"Line 5 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">a = 2</span><br><span class="line">b = 3</span><br><span class="line">c = a**b </span><br><span class="line">print <span class="string">"Line 6 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = 5</span><br><span class="line">c = a//b </span><br><span class="line">print <span class="string">"Line 7 - Value of c is "</span>, c</span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - Value of c is 31<br>Line 2 - Value of c is 11<br>Line 3 - Value of c is 210<br>Line 4 - Value of c is 2<br>Line 5 - Value of c is 1<br>Line 6 - Value of c is 8<br>Line 7 - Value of c is 2</p>
</blockquote>
<h1 id="Python比较运算符">Python比较运算符</h1><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>等于 - 比较对象是否相等</td>
<td>(a == b) 返回 False。</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a != b) 返回 true。</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a &lt;&gt; b) 返回 true。这个运算符类似 !=。</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于 - 返回x是否大于y</td>
<td>(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td>(a &lt; b) 返回 true。</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于 - 返回x是否大于等于y。</td>
<td>(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于 - 返回x是否小于等于y。</td>
<td>(a &lt;= b) 返回 true。</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有比较运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a == b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is not equal to b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a != b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a is not equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a is equal to b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &lt;&gt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is not equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is equal to b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &lt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a is less than b"</span> </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a is not less than b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &gt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - a is greater than b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - a is not greater than b"</span></span><br><span class="line"></span><br><span class="line">a = 5;</span><br><span class="line">b = 20;</span><br><span class="line"><span class="keyword">if</span> ( a &lt;= b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 6 - a is either less than or equal to  b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 6 - a is neither less than nor equal to  b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( b &gt;= a ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 7 - b is either greater than  or equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 7 - b is neither greater than  nor equal to b"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a is not equal to b<br>Line 2 - a is not equal to b<br>Line 3 - a is not equal to b<br>Line 4 - a is not less than b<br>Line 5 - a is greater than b<br>Line 6 - a is either less than or equal to b<br>Line 7 - b is either greater than or equal to b</p>
</blockquote>
<h1 id="Python赋值运算符">Python赋值运算符</h1><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>简单的赋值运算符</td>
<td>c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算符</td>
<td>c += a 等效于 c = c + a</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
<td>c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
<td>c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
<td>c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
<td>c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算符</td>
<td>c **= a 等效于 c = c ** a</td>
</tr>
<tr>
<td>//=</td>
<td>取整除赋值运算符</td>
<td>c //= a 等效于 c = c // a</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有赋值运算符的操作：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">c</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> = a + b</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 1 - Value of c is "</span>, <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> += a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 2 - Value of c is "</span>, <span class="built_in">c</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> *= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 3 - Value of c is "</span>, <span class="built_in">c</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> /= a </span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 4 - Value of c is "</span>, <span class="built_in">c</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span>  = <span class="number">2</span></span><br><span class="line"><span class="built_in">c</span> %= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 5 - Value of c is "</span>, <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> **= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 6 - Value of c is "</span>, <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> <span class="comment">//= a</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 7 - Value of c is "</span>, <span class="built_in">c</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - Value of c is 31<br>Line 2 - Value of c is 52<br>Line 3 - Value of c is 1092<br>Line 4 - Value of c is 52<br>Line 5 - Value of c is 2<br>Line 6 - Value of c is 2097152<br>Line 7 - Value of c is 99864</p>
</blockquote>
<h1 id="Python位运算符">Python位运算符</h1><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>按位与运算符</td>
<td>(a &amp; b) 输出结果 12，二进制解释：0000 1100</td>
</tr>
<tr>
<td>&#124;</td>
<td>按位或运算符</td>
<td>(a &#124; b) 输出结果 61，二进制解释：0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符</td>
<td>(a ^ b) 输出结果 49，二进制解释：0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符</td>
<td>(~a) 输出结果 -61，二进制解释：1100 0011，在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符</td>
<td>a &lt;&lt; 2 输出结果 240，二进制解释：1111 0000</td>
</tr>
<tr>
<td>>></td>
<td>右移动运算符</td>
<td>a &gt;&gt; 2 输出结果 15，二进制解释：0000 1111</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有位运算符的操作：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">a = <span class="number">60</span>            # <span class="number">60</span> = <span class="number">0011</span> <span class="number">1100</span> </span><br><span class="line">b = <span class="number">13</span>            # <span class="number">13</span> = <span class="number">0000</span> <span class="number">1101</span> </span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a &amp; b;        # <span class="number">12</span> = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">print <span class="string">"Line 1 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a | b;        # <span class="number">61</span> = <span class="number">0011</span> <span class="number">1101</span> </span><br><span class="line">print <span class="string">"Line 2 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a ^ b;        # <span class="number">49</span> = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">print <span class="string">"Line 3 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = ~a;           # <span class="number">-61</span> = <span class="number">1100</span> <span class="number">0011</span></span><br><span class="line">print <span class="string">"Line 4 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;       # <span class="number">240</span> = <span class="number">1111</span> <span class="number">0000</span></span><br><span class="line">print <span class="string">"Line 5 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;       # <span class="number">15</span> = <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">print <span class="string">"Line 6 - Value of c is "</span>, c</span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - Value of c is 12<br>Line 2 - Value of c is 61<br>Line 3 - Value of c is 49<br>Line 4 - Value of c is -61<br>Line 5 - Value of c is 240<br>Line 6 - Value of c is 15</p>
</blockquote>
<h1 id="Python逻辑运算符">Python逻辑运算符</h1><p>Python语言支持逻辑运算符，以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>布尔“与” - 如果x为False，x and y返回False，否则它返回y的计算值。</td>
<td>(a and b) 返回 true。</td>
</tr>
<tr>
<td>or</td>
<td>布尔“或” - 如果x是True，它返回True，否则它返回y的计算值。</td>
<td>(a or b) 返回 true。</td>
</tr>
<tr>
<td>not</td>
<td>布尔“非” - 如果x为True，返回False。如果x为False，它返回True。</td>
<td>not(a and b) 返回 false。</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有逻辑运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">c = 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a and b are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - Either a is not true or b is not true"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">or</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - Either a is true or b is true or both are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - Neither a is true nor b is true"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = 0</span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a and b are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - Either a is not true or b is not true"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">or</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - Either a is true or b is true or both are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - Neither a is true nor b is true"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span>( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - Either a is not true or b is  not true or both are not true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - a and b are true"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a and b are true<br>Line 2 - Either a is true or b is true or both are true<br>Line 3 - Either a is not true or b is not true<br>Line 4 - Either a is true or b is true or both are true<br>Line 5 - Either a is not true or b is  not true or both are not true</p>
</blockquote>
<h1 id="Python成员运算符">Python成员运算符</h1><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>如果在指定的序列中找到值返回True，否则返回False。</td>
<td>x 在 y序列中 , 如果x在y序列中返回True。</td>
</tr>
<tr>
<td>not in</td>
<td>如果在指定的序列中没有找到值返回True，否则返回False。</td>
<td>x 不在 y序列中 , 如果x不在y序列中返回True。</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有成员运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">list = [1, 2, 3, 4, 5 ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is available in the given list"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is not available in the given list"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - b is not available in the given list"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - b is available in the given list"</span></span><br><span class="line"></span><br><span class="line">a = 2</span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is available in the given list"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is not available in the given list"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a is not available in the given list<br>Line 2 - b is not available in the given list<br>Line 3 - a is available in the given list</p>
</blockquote>
<h1 id="Python身份运算符">Python身份运算符</h1><p>身份运算符用于比较两个对象的存储单元。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>is</td>
<td>is是判断两个标识符是不是引用自一个对象</td>
<td>x is y, 如果 id(x) 等于 id(y) , is 返回结果 1</td>
</tr>
<tr>
<td>is not</td>
<td>is not是判断两个标识符是不是引用自不同对象</td>
<td>x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有身份运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a is b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a and b have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a and b do not have same identity"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( id(a) == id(b) ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a and b have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a and b do not have same identity"</span></span><br><span class="line"></span><br><span class="line">b = 30</span><br><span class="line"><span class="keyword">if</span> ( a is b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a and b have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a and b do not have same identity"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a is <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a and b do not have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a and b have same identity"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a and b have same identity<br>Line 2 - a and b have same identity<br>Line 3 - a and b do not have same identity<br>Line 4 - a and b do not have same identity </p>
</blockquote>
<h1 id="Python运算符优先级">Python运算符优先级</h1><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>**</td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>>> &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>^ &#124;</td>
<td>位运算符</td>
</tr>
<tr>
<td>&lt;= &lt; &gt; &gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&lt;&gt; == !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>= %= /= //= -= += *= **=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not or and</td>
<td>逻辑运算符</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有运算符优先级的操作：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 20</span><br><span class="line">b = 10</span><br><span class="line">c = 15</span><br><span class="line">d = 5</span><br><span class="line">e = 0</span><br><span class="line"></span><br><span class="line">e = (a + b) * c / d       <span class="comment">#( 30 * 15 ) / 5</span></span><br><span class="line">print <span class="string">"Value of (a + b) * c / d is "</span>,  e</span><br><span class="line"></span><br><span class="line">e = ((a + b) * c) / d     <span class="comment"># (30 * 15 ) / 5</span></span><br><span class="line">print <span class="string">"Value of ((a + b) * c) / d is "</span>,  e</span><br><span class="line"></span><br><span class="line">e = (a + b) * (c / d);    <span class="comment"># (30) * (15/5)</span></span><br><span class="line">print <span class="string">"Value of (a + b) * (c / d) is "</span>,  e</span><br><span class="line"></span><br><span class="line">e = a + (b * c) / d;      <span class="comment">#  20 + (150/5)</span></span><br><span class="line">print <span class="string">"Value of a + (b * c) / d is "</span>,  e</span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Value of (a + b) * c / d is 90<br>Value of ((a + b) * c) / d is 90<br>Value of (a + b) * (c / d) is 90<br>Value of a + (b * c) / d is 50</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python变量类型]]></title>
      <url>http://gyshgx868.github.io/2015/10/03/Python/05-python-variable-types/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-variable-types.html" target="_blank" rel="noopener">runoob.com - Python变量类型</a></p>
<p>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。</p>
<p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p>
<p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p>
<a id="more"></a>
<h1 id="变量赋值">变量赋值</h1><p>Python中的变量不需要声明，变量的赋值操作既是变量声明和定义的过程。</p>
<p>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</p>
<p>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<p>等号（=）用来给变量赋值。</p>
<p>等号（=）运算符左边是一个变量名，等号（=）运算符右边是存储在变量中的值。例如：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">counter = 100 <span class="comment"># 赋值整型变量</span></span><br><span class="line">miles = 1000.0 <span class="comment"># 浮点型</span></span><br><span class="line">name = <span class="string">"John"</span> <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line">print counter</span><br><span class="line">print miles</span><br><span class="line">print name</span><br></pre></td></tr></table></figure></p>
<p>以上实例中，100，1000.0和“John”分别赋值给counter，miles，name变量。<br>执行以上程序会输出如下结果：</p>
<blockquote>
<p>100<br>1000.0<br>John</p>
</blockquote>
<h1 id="多个变量赋值">多个变量赋值</h1><p>Python允许你同时为多个变量赋值。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">b</span> = c = <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</p>
<p>您也可以为多个对象指定多个变量。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"john"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例，两个整型对象1和2的分配给变量a和b，字符串对象“john”分配给变量c。</p>
<h1 id="标准数据类型">标准数据类型</h1><p>在内存中存储的数据可以有多种类型。</p>
<p>例如，person.s年龄作为一个数值存储和他或她的地址是字母数字字符存储。</p>
<p>Python有一些标准类型用于定义操作上，他们和为他们每个人的存储方法可能。</p>
<p>Python有五个标准的数据类型：</p>
<ul>
<li>Numbers（数字）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Dictionary（字典）</li>
</ul>
<h1 id="Python数字">Python数字</h1><p>数字数据类型用于存储数值。</p>
<p>他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</p>
<p>当你指定一个值时，Number对象就会被创建：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var1</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">var2</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>您也可以使用del语句删除一些对象引用。</p>
<p>del语句的语法是：<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1<span class="comment">[,var2<span class="comment">[,var3<span class="comment">[....,varN]</span>]</span>]</span>]</span><br></pre></td></tr></table></figure></p>
<p>您可以通过使用del语句删除单个或多个对象。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">del</span> var</span><br><span class="line"><span class="selector-tag">del</span> var_a, var_b</span><br></pre></td></tr></table></figure></p>
<p>Python支持四种不同的数值类型：</p>
<ul>
<li>int（有符号整型）</li>
<li>long（长整型[也可以代表八进制和十六进制]）</li>
<li>float（浮点型）</li>
<li>complex（复数）</li>
</ul>
<p><strong>实例</strong></p>
<p>一些数值类型的实例：</p>
<table>
<thead>
<tr>
<th>int</th>
<th>long</th>
<th>float</th>
<th>complex</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>51924361L</td>
<td>0.0</td>
<td>3.14j</td>
</tr>
<tr>
<td>100</td>
<td>-0x19323L</td>
<td>15.20</td>
<td>45.j</td>
</tr>
<tr>
<td>-786</td>
<td>0122L</td>
<td>-21.9</td>
<td>9.322e-36j</td>
</tr>
<tr>
<td>080</td>
<td>0xDEFABCECBDAECBFBAEl</td>
<td>32.3+e18</td>
<td>.876j</td>
</tr>
<tr>
<td>-0490</td>
<td>535633629843L</td>
<td>-90.</td>
<td>-.6545+0J</td>
</tr>
<tr>
<td>-0x260</td>
<td>-052318172735L</td>
<td>-32.54e100</td>
<td>3e+26J</td>
</tr>
<tr>
<td>0x69</td>
<td>-4721885298529L</td>
<td>70.2-E12</td>
<td>4.53e-7j</td>
</tr>
</tbody>
</table>
<ul>
<li>长整型也可以使用小写“L”，但是还是建议您使用大写“L”，避免与数字“1”混淆。Python使用“L”来显示长整型。</li>
<li>Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj，或者complex(a, b)表示，复数的实部a和虚部b都是浮点型。</li>
</ul>
<h1 id="Python字符串">Python字符串</h1><p>字符串或串（String）是由数字、字母、下划线组成的一串字符。</p>
<p>一般记为 :<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s</span>=<span class="string">"a1a2···an"</span>(n&gt;=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>它是编程语言中表示文本的数据类型。</p>
<p>Python的字串列表有2种取值顺序:</p>
<ul>
<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>
<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>
</ul>
<p>如果你的实要取得一段子串的话，可以用到变量<code>[头下标:尾下标]</code>，就可以截取相应的字符串，其中下标是从0开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</p>
<p>比如：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s</span> = <span class="string">'ilovepython'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>s[1:5]</strong>的结果是love。</p>
<p>当使用以冒号分隔的字符串，Python返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。</p>
<p>上面的结果包含了s[1]的值l，而取到的最大范围不包括上边界，就是s[5]的值p。<br>加号（+）是字符串连接运算符，星号（*）是重复操作。如下实例：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"><span class="meta"># -*- coding: UTF<span class="number">-8</span> -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">str</span> = <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span> <span class="meta"># 输出完整字符串</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span>[<span class="number">0</span>] <span class="meta"># 输出字符串中的第一个字符</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span>[<span class="number">2</span>:<span class="number">5</span>] <span class="meta"># 输出字符串中第三个至第五个之间的字符串</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span>[<span class="number">2</span>:] <span class="meta"># 输出从第三个字符开始的字符串</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span> * <span class="number">2</span> <span class="meta"># 输出字符串两次</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span> + <span class="string">"TEST"</span> <span class="meta"># 输出连接的字符串</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Hello World!<br>H<br>llo<br>llo World!<br>Hello World!Hello World!<br>Hello World!TEST</p>
</blockquote>
<h1 id="Python列表">Python列表</h1><p>List（列表）是Python中使用最频繁的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表用<code>[ ]</code>标识。是Python最通用的复合数据类型。看这段代码就明白。</p>
<p>列表中的值得分割也可以用到变量<code>[头下标:尾下标]</code>，就可以截取相应的列表，从左到右索引默认0开始的，从右到左索引默认-1开始，下标可以为空表示取到头或尾。</p>
<p>加号（+）是列表连接运算符，星号（*）是重复操作。如下实例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span> = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'john'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span> <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span>[<span class="number">0</span>] <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span>[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span>[<span class="number">2</span>:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="keyword">print</span> tinylist * <span class="number">2</span> <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span> + tinylist <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>[‘abcd’, 786, 2.23, ‘john’, 70.2]<br>abcd<br>[786, 2.23]<br>[2.23, ‘john’, 70.2]<br>[123, ‘john’, 123, ‘john’]<br>[‘abcd’, 786, 2.23, ‘john’, 70.2, 123, ‘john’]</p>
</blockquote>
<h1 id="Python元组">Python元组</h1><p>元组是另一个数据类型，类似于List（列表）。</p>
<p>元组用<code>()</code>标识。内部元素用逗号隔开。但是元素不能二次赋值，相当于只读列表。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">tuple = ( <span class="string">'abcd'</span>, 786 , 2.23, <span class="string">'john'</span>, 70.2 )</span><br><span class="line">tinytuple = (123, <span class="string">'john'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> tuple <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> tuple[0] <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> tuple[1:3] <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="built_in">print</span> tuple[2:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinytuple * 2 <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="built_in">print</span> tuple + tinytuple <span class="comment"># 打印组合的元组</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>(‘abcd’, 786, 2.23, ‘john’, 70.2)<br>abcd<br>(786, 2.23)<br>(2.23, ‘john’, 70.2)<br>(123, ‘john’, 123, ‘john’)<br>(‘abcd’, 786, 2.23, ‘john’, 70.2, 123, ‘john’)</p>
</blockquote>
<p>以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tuple</span> = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> )</span><br><span class="line"><span class="attr">list</span> = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> ]</span><br><span class="line"><span class="attr">tuple[2]</span> = <span class="number">1000</span> # 元组中是非法应用</span><br><span class="line"><span class="attr">list[2]</span> = <span class="number">1000</span> # 列表中是合法应用</span><br></pre></td></tr></table></figure></p>
<h1 id="Python元字典">Python元字典</h1><p>字典（dictionary）是除列表以外Python之中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。</p>
<p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典用<code>{ }</code>标识。字典由索引（key）和它对应的值value组成。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"This is one"</span></span><br><span class="line">dict[2] = <span class="string">"This is two"</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'john'</span>,<span class="string">'code'</span>:6734, <span class="string">'dept'</span>: <span class="string">'sales'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> dict[<span class="string">'one'</span>] <span class="comment"># 输出键为'one' 的值</span></span><br><span class="line"><span class="built_in">print</span> dict[2] <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> tinydict <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> tinydict.keys() <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> tinydict.values() <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure></p>
<p>输出结果为：</p>
<blockquote>
<p>This is one This is two {‘dept’: ‘sales’, ‘code’: 6734, ‘name’: ‘john’} [‘dept’, ‘code’, ‘name’] [‘sales’, 6734, ‘john’]</p>
</blockquote>
<h1 id="Python数据类型转换">Python数据类型转换</h1><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>
<p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>int(x [,base])</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>long(x [,base] )</td>
<td>将x转换为一个长整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real [,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x)</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UVA 10491 Cows and Cars]]></title>
      <url>http://gyshgx868.github.io/2015/10/01/UVA/uva-10491/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>In television contests, participants are often asked to choose one from a set of or doors for example, one or several of which lead to different prizes. In this problem we will deal with a specific kind of sucha contest. Suppose you are given the following challenge by the contest presenter:<br><a id="more"></a><br>In front of you there are three doors. Two of them hide a cow, the other one hides your prize - a car. After you choose a door, but before you open it, I will give you an hint, by opening one of the doors which hides a cow (I’ll never open the door you have chosen, even if it hides a cow). You will then be able to choose if you want to keep your choice, or if you wish to change to the other unopened door. You will win whatever is behind the door you open.</p>
<p>In this example, the probability you have of winning the car is 2/3 (as hard as it is to believe), assuming you always switch your choice when the presenter gives you the opportunity to do so (after he shows you a door with a cow). The reason of this number (2/3) is this - if you had chosen one of the two cows, you would surely switch to the car, since the presenter had shown you the other cow. If you had chosen the car, you would switch to the remaining cow, therefore losing the prize. Thus, in two out of three cases you would switch to the car. The probability to win if you had chosen to stick with your initial choice would obviously be only 1/3, but that isn’t important for this problem.</p>
<p>In this problem, you are to calculate the probability you have of winning the car, for a generalization of the problem above:</p>
<ul>
<li>The number of cows is variable</li>
<li>The number of cars is variable (number of cows + number of cars = total number of doors)</li>
<li>The number of doors hiding cows that the presenter opens for you is variable (several doors may still be open when you are given the opportunity to change your choice)</li>
</ul>
<p>You should assume that you always decide to switch your choice to any other of the unopen doors after the presenter shows you some doors with cows behind it.</p>
<h2 id="Input">Input</h2><p>There are several test cases for your program to process. Each test case consists of three integers on a line, separated by whitespace. Each line has the following format:<br>NCOWS NCARS NSHOW<br>Where NCOW S is the number of doors with cows, NCARS is the number of doors with cars and NSHOW is the number of doors the presenter opens for you before you choose to switch to another unopen door.<br>The limits for your program are:<br>1 ≤ NCOWS ≤ 10000<br>1 ≤ NCARS ≤ 10000<br>0 ≤ NSHOW &lt; NCOWS</p>
<h2 id="Output">Output</h2><p>For each of the test cases, you are to output a line containing just one value - the probability of winning the car assuming you switch to another unopen door, displayed to 5 decimal places.</p>
<h2 id="Sample_Input">Sample Input</h2><p>2 1 1<br>5 3 2<br>2000 2700 900</p>
<h2 id="Sample_Output">Sample Output</h2><p>0.66667<br>0.52500<br>0.71056</p>
<h1 id="题目链接">题目链接</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1432" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1432</a></p>
<h1 id="解题思路">解题思路</h1><p>UVA的题目永远这么难读！</p>
<p>题意：有牛和车躲在门内，你做一个选择，但是还不能看答案，然后知情人会帮助你，你会打开几个门里面全是牛，但是注意一点，知情人知道你选的那个门里面是牛还是车，但即便他知道是牛他也不能告诉你。知情人打开门后，你必定重新选择另一个门（要是可能保持不变的话又不同了），问你这次选到车的概率多少。</p>
<p>知情人会一次性打开<code>door</code>个门（如果你选的就是牛，虽然知情人能打开<code>door</code>个门，但是它不能打开你那个，而题目有一个条件<code>0 &lt;= door &lt; cow</code>，这说明即便你选了一个牛，知情人还是能打开<code>door</code>个门的，是另外的<code>door</code>个门）。</p>
<ul>
<li>第一次选择牛，概率为<code>cow / (cow + car)</code>，然后知情人打开了<code>door</code>个门（自己选的那个不被打开），然后现在实际上只剩下<code>cow + car - door</code>个门（包括自己选的那个）。改变选择，那么现在能选的门的个数为<code>cow + car - door - 1</code>，选到车的概率为<code>car / (cow + car - door - 1)</code>。由于是条件概率所以要相乘：<code>p1 = car / (cow + car) * car / (cow + car - door - 1)</code>；</li>
<li>如果第一次选到车，概率为<code>car / (cow + car)</code>，然后知情人打开<code>door</code>个门，实际上剩下的门也是<code>cow + car - door</code>。改变选择，那么能选的个数为<code>cow + car - door - 1</code>，车的个数只剩下<code>car - 1</code>（你放弃了之前选择的那个），选到车的概率就是<code>(car - 1) / (cow + car - door - 1)</code>，两者相乘：<code>p2 = car / (cow + car) * (car - 1) / (cow + car - door - 1)</code>。</li>
</ul>
<h1 id="AC代码">AC代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cow, car, door;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;cow, &amp;car, &amp;door))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> p1 = <span class="number">1.0</span> * cow / (cow + car) * car / (cow + car - door - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">double</span> p2 = <span class="number">1.0</span> * car / (cow + car) * (car - <span class="number">1</span>) / (cow + car - door - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.5f\n"</span>, p1 + p2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础语法]]></title>
      <url>http://gyshgx868.github.io/2015/09/26/Python/04-python-basic-syntax/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-basic-syntax.html" target="_blank" rel="noopener">runoob.com - Python基础语法</a></p>
<p>Python语言与Perl，C和Java等语言有许多相似之处。但是，也存在一些差异。</p>
<p>在本章中我们将来学习Python的基础语法，让你快速学会Python编程。<br><a id="more"></a></p>
<h1 id="第一个Python程序">第一个Python程序</h1><h2 id="交互式编程">交互式编程</h2><p>交互式编程不需要创建脚本文件，是通过Python解释器的交互模式进来编写代码。</p>
<p>Linux上你只需要在命令行中输入Python命令即可启动交互式编程，提示窗口如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 2.7.6 (default, Sep  9 2014, 15:04:36) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<p>Windows上在安装Python时已经已经安装了默认的交互式编程客户端，提示窗口如下：<br><img src="http://7xn25g.dl1.z0.glb.clouddn.com/python-shell.jpg" alt="python-shell"></p>
<p>在python提示符中输入以下文本信息，然后按<code>Enter</code>键查看运行效果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span> <span class="string">"Hello, Python!"</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>在Python 2.7.6版本中，以上事例输出结果如下：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<p>如果您运行的是新版本的Python，那么你就需要在<code>print</code>语句中使用括号如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;  <span class="built_in">print</span> (<span class="string">"Hello, Python!"</span>);</span></span><br></pre></td></tr></table></figure></p>
<h2 id="脚本式编程">脚本式编程</h2><p>通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。</p>
<p>让我们写一个简单的Python脚本程序。所有Python文件将以<code>.py</code>为扩展名。将以下的源代码拷贝至<code>test.py</code>文件中。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">print</span> <span class="string">"Hello, Python!"</span>;</span><br></pre></td></tr></table></figure></p>
<p>这里，假设你已经设置了Python解释器PATH变量。使用以下命令运行程序：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python test.py</span></span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<p>让我们尝试另一种方式来执行Python脚本。修改<code>test.py</code>文件，如下所示：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">print <span class="string">"Hello, Python!"</span>;</span><br></pre></td></tr></table></figure></p>
<p>这里，假定您的Python解释器在<code>/usr/bin</code>目录中，使用以下命令执行脚本：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod +x test.py     <span class="comment"># 脚本文件添加可执行权限</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">./test.py</span></span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<h1 id="Python标识符">Python标识符</h1><p>在python里，标识符有字母、数字、下划线组成。</p>
<p>在python中，所有标识符可以包括英文、数字以及下划线（_），但不能以数字开头。</p>
<p>python中的标识符是区分大小写的。</p>
<p>以下划线开头的标识符是有特殊意义的。以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用<code>from xxx import *</code>而导入；</p>
<p>以双下划线开头的（__foo）代表类的私有成员；以双下划线开头和结尾的（__foo__）代表python里特殊方法专用的标识，如<code>__init__()</code>代表类的构造函数。</p>
<h1 id="Python保留字符">Python保留字符</h1><p>下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。</p>
<p>所有Python的关键字只包含小写字母。</p>
<table>
<thead>
<tr>
<th>and</th>
<th>exec</th>
<th>not</th>
</tr>
</thead>
<tbody>
<tr>
<td>assert</td>
<td>finally</td>
<td>or</td>
</tr>
<tr>
<td>break</td>
<td>for</td>
<td>pass</td>
</tr>
<tr>
<td>class</td>
<td>from</td>
<td>print</td>
</tr>
<tr>
<td>continue</td>
<td>global</td>
<td>raise</td>
</tr>
<tr>
<td>def</td>
<td>if</td>
<td>return</td>
</tr>
<tr>
<td>del</td>
<td>import</td>
<td>try</td>
</tr>
<tr>
<td>elif</td>
<td>in</td>
<td>while</td>
</tr>
<tr>
<td>else</td>
<td>is</td>
<td>with</td>
</tr>
<tr>
<td>except</td>
<td>lambda</td>
<td>yield</td>
</tr>
</tbody>
</table>
<h1 id="行和缩进">行和缩进</h1><p>学习Python与其他语言最大的区别就是，Python的代码块不使用大括号（{}）来控制类，函数以及其他逻辑判断。Python最具特色的就是用缩进来写模块。</p>
<p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。如下所示：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"True"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"False"</span></span><br></pre></td></tr></table></figure></p>
<p>以下代码将会执行错误：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"Answer"</span></span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"True"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"Answer"</span></span><br><span class="line">    # 没有严格缩进，在执行时保持</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"False"</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> test.<span class="keyword">py</span>  </span><br><span class="line">  File <span class="string">"test.py"</span>, <span class="built_in">line</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> True:</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected <span class="built_in">indent</span></span><br></pre></td></tr></table></figure>
<p><code>IndentationError: unexpected indent</code>错误是python编译器是在告诉你“Hi，老兄，你的文件里格式不对了，可能是Tab和空格没对齐的问题”，所有Python对格式要求非常严格。</p>
<p>如果是<code>IndentationError: unindent does not match any outer indentation level</code>错误表明，你使用的缩进方式不一致，有的是Tab键缩进，有的是空格缩进，改为一致即可。</p>
<p>因此，在Python的代码块中必须使用相同数目的行首缩进空格数。</p>
<p>建议你在每个缩进层次使用<strong>单个制表符</strong>或<strong>两个空格</strong>或<strong>四个空格</strong>，切记不能混用。</p>
<h1 id="多行语句">多行语句</h1><p>Python语句中一般以新行作为为语句的结束符。</p>
<p>但是我们可以使用斜杠（\）将一行的语句分为多行显示，如下所示：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">total</span> = <span class="keyword">item_one </span>+ \</span><br><span class="line">        <span class="keyword">item_two </span>+ \</span><br><span class="line">        <span class="keyword">item_three</span></span><br></pre></td></tr></table></figure></p>
<p>语句中包含<code>[]</code>，<code>{}</code>或<code>()</code>括号就不需要使用多行连接符。如下实例：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">days</span> = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>,</span><br><span class="line">        <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</span><br></pre></td></tr></table></figure></p>
<h1 id="Python引号">Python引号</h1><p>Python接收单引号（&apos;），双引号（&quot;），三引号（&apos;&apos;&apos; &quot;&quot;&quot;）来表示字符串，引号的开始与结束必须的相同类型的。</p>
<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word</span> = <span class="string">'word'</span></span><br><span class="line"><span class="attr">sentence</span> = <span class="string">"这是一个句子。"</span></span><br><span class="line"><span class="attr">paragraph</span> = <span class="string">"""这是一个段落。</span></span><br><span class="line"><span class="string">包含了多个语句"""</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Python注释">Python注释</h1><p>python中单行注释采用<code>#</code>开头。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"><span class="meta"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="meta"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 第一个注释</span></span><br><span class="line">print <span class="string">"Hello, Python!"</span>;  # 第二个注释</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<p>注释可以在语句或表达式行末：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Madisetti"</span> <span class="comment"># 这是一个注释</span></span><br></pre></td></tr></table></figure></p>
<p>Python中多行注释使用三个单引号（&apos;&apos;&apos;）或三个单引号（&quot;&quot;&quot;）。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Python空行">Python空行</h1><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>
<p>记住：空行也是程序代码的一部分。</p>
<h1 id="等待用户输入">等待用户输入</h1><p>下面的程序在按回车键后就会等待用户输入：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">"\n\nPress the enter key to exit."</span>)</span><br></pre></td></tr></table></figure></p>
<p>以上代码中，<code>\n\n</code>在结果输出前会输出两个新的空行。一旦用户按下键时，程序将退出。</p>
<h1 id="同一行显示多条语句">同一行显示多条语句</h1><p>Python可以在同一行中使用多条语句，语句之间使用分号（;）分割，以下是一个简单的实例：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> sys;</span> x = <span class="string">'foo'</span>; sys.stdout.write(x + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="多个语句构成代码组">多个语句构成代码组</h1><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>
<p>像<code>if</code>、<code>while</code>、<code>def</code>和<code>class</code>这样的复合语句，首行以关键字开始，以冒号（:）结束，该行之后的一行或多行代码构成代码组。</p>
<p>我们将首行及后面的代码组称为一个子句（clause）。</p>
<p>如下实例：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite </span><br><span class="line">elif expression :  </span><br><span class="line">   suite  </span><br><span class="line"><span class="keyword">else</span> :  </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure></p>
<h1 id="命令行参数">命令行参数</h1><p>很多程序可以执行一些操作来查看一些基本信，Python可以使用<code>-h</code>参数查看各参数帮助信息：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> -h </span><br><span class="line">usage: <span class="keyword">python</span> [option] ... [-<span class="keyword">c</span> cmd | -<span class="keyword">m</span> <span class="keyword">mod</span> | <span class="keyword">file</span> | -] [arg] ... </span><br><span class="line">Options <span class="built_in">and</span> arguments (<span class="built_in">and</span> corresponding environment variables): </span><br><span class="line">-<span class="keyword">c</span> cmd : program passed in <span class="keyword">as</span> <span class="built_in">string</span> (terminates option <span class="keyword">list</span>) </span><br><span class="line">-d     : <span class="keyword">debug</span> output from parser (also PYTHONDEBUG=<span class="keyword">x</span>) </span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH) </span><br><span class="line">-h     : <span class="keyword">print</span> this <span class="keyword">help</span> message <span class="built_in">and</span> <span class="keyword">exit</span> </span><br><span class="line"> </span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python中文编码]]></title>
      <url>http://gyshgx868.github.io/2015/09/26/Python/03-python-chinese-encoding/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-chinese-encoding.html" target="_blank" rel="noopener">runoob.com - Python中文编码</a></p>
<p>前面章节中我们已经学会了如何用Python输出“Hello, World!”，英文没有问题，但是如果你输出中文字符“你好，世界”就有可能会碰到中文编码问题。<br><a id="more"></a><br>Python文件中如果未指定编码，在执行过程会出现报错：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line">print <span class="string">"你好，世界"</span>;</span><br></pre></td></tr></table></figure></p>
<p>以上程序执行输出结果为：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">File</span> <span class="string">"test.py"</span>, <span class="keyword">line</span> 2</span><br><span class="line">SyntaxError: Non-ASCII character '\xe4' <span class="keyword">in</span> <span class="keyword">file</span> <span class="keyword">test</span>.py <span class="keyword">on</span> <span class="keyword">line</span> 2, but <span class="keyword">no</span> encoding declared; see http:<span class="comment">//www.python.org/peps/pep-0263.html for details</span></span><br></pre></td></tr></table></figure></p>
<p>Python中默认的编码格式是ASCII格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</p>
<p>解决方法为只要在文件开头加入<code># -*- coding: UTF-8 -*-</code>或者<code>#coding=utf-8</code>就行了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python环境搭建]]></title>
      <url>http://gyshgx868.github.io/2015/09/25/Python/02-python-install/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-install.html" target="_blank" rel="noopener">runoob.com - Python环境搭建</a></p>
<p>本章节我们将向大家介绍如何在本地搭建Python开发环境。</p>
<p>Python可应用于多平台包括Linux和Mac OS X。一般的Linux发行版本都自带Python，Mac OS X最新版也自带了Python，也就是已经安装好了，不需要再配置。<br><a id="more"></a><br>Windows下直接下载最新版的Python 2.7.9，安装的时候注意选择。</p>
<p><img src="http://7xn25g.dl1.z0.glb.clouddn.com/python_install.png" alt="Python安装"></p>
<p>你可以通过终端窗口输入<code>python</code>命令来查看本地是否已经安装Python以及Python的安装版本。</p>
<ul>
<li><p>Unix（Solaris，Linux，FreeBSD，AIX，HP/UX，SunOS，IRIX，等等。）</p>
</li>
<li><p>Win 9x/NT/2000</p>
</li>
<li><p>Macintosh（Intel, PPC, 68K）</p>
</li>
<li><p>OS/2</p>
</li>
<li><p>DOS（多个DOS版本）</p>
</li>
<li><p>PalmOS</p>
</li>
<li><p>Nokia移动手机</p>
</li>
<li><p>Windows CE</p>
</li>
<li><p>Acorn/RISC OS</p>
</li>
<li><p>BeOS</p>
</li>
<li><p>Amiga</p>
</li>
<li><p>VMS/OpenVMS</p>
</li>
<li><p>QNX</p>
</li>
<li><p>VxWorks</p>
</li>
<li><p>Psion</p>
</li>
<li><p>Python同样可以移植到Java和.NET虚拟机上。</p>
</li>
</ul>
<h1 id="Python下载">Python下载</h1><p>Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到：</p>
<p>Python官网：<a href="http://www.python.org/" target="_blank" rel="noopener">http://www.python.org/</a></p>
<p>你可以在一下链接中下载Python的文档，你可以下载 HTML、PDF和PostScript等格式的文档。</p>
<p>Python文档下载地址：<a href="www.python.org/doc/">www.python.org/doc/</a></p>
<h1 id="Python安装">Python安装</h1><p>Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。</p>
<p>您需要下载适用于您使用平台的二进制代码，然后安装Python。</p>
<p>如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。</p>
<p>编译的源代码，功能上有更多的选择性，为Python安装提供了更多的灵活性。</p>
<p>以下为不同平台上安装Python的方法：</p>
<h2 id="Unix_&amp;_Linux平台安装Python">Unix &amp; Linux平台安装Python</h2><p>以下为在Unix &amp; Linux 平台上安装 Python 的简单步骤：</p>
<ul>
<li><p>打开WEB浏览器访问：<a href="http://www.python.org/download/" target="_blank" rel="noopener">http://www.python.org/download/</a></p>
</li>
<li><p>选择使用于Unix/Linux的源码压缩包</p>
</li>
<li><p>下载及解压压缩包</p>
</li>
<li><p>如果你需要自定义一些选项修改Modules/Setup</p>
</li>
<li><p>执行./configure脚本</p>
</li>
<li><p>make</p>
</li>
<li><p>make install</p>
</li>
</ul>
<p>执行以上操作后，Python会安装在<code>/usr/local/bin</code>目录中，Python库安装在<code>/usr/local/lib/pythonXX</code>，<code>XX</code>为你使用的Python的版本号。</p>
<h2 id="Windows平台安装Python">Windows平台安装Python</h2><p>以下为在Windows平台上安装Python的简单步骤：</p>
<ul>
<li><p>打开WEB浏览器访问：<a href="http://www.python.org/download/" target="_blank" rel="noopener">http://www.python.org/download/</a></p>
</li>
<li><p>在下载列表中选择Windows平台安装包，包格式为：python-XYZ.msi文件，XYZ为你要安装的版本号。</p>
</li>
<li><p>要使用安装程序python-XYZ.msi，Windows系统必须支持Microsoft Installer 2.0搭配使用。只要保存安装文件到本地计算机，然后运行它，看看你的机器支持MSI。Windows XP和更高版本已经有MSI，很多老机器也可以安装MSI。</p>
</li>
<li><p>下载后，双击下载包，进入Python安装向导，安装非常简单，你只需要使用默认的设置一直点击“下一步”直到安装完成即可。</p>
</li>
</ul>
<h2 id="Mac平台安装Python">Mac平台安装Python</h2><p>最近的Mac OS系统都自带有Python环境，但是自带的Python版本为旧版本，你可以通过链接<a href="http://www.python.org/download/mac/" target="_blank" rel="noopener">http://www.python.org/download/mac/</a>查看Mac上Python的新版功能介绍。</p>
<p>Mac上完整的Python安装教程你可以查看：<a href="http://www.cwi.nl/~jack/macpython.html" target="_blank" rel="noopener">http://www.cwi.nl/~jack/macpython.html</a></p>
<h1 id="环境变量配置">环境变量配置</h1><p>程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。</p>
<p>path（路径）存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。</p>
<p>Unix或Windows中路径变量为PATH（UNIX区分大小写，Windows不区分大小写）。</p>
<p>在Mac OS中，安装程序过程中改变了Python的安装路径。如果你需要在其他目录引用Python，你必须在path中添加Python目录。</p>
<h2 id="在Unix/Linux设置环境变量">在Unix/Linux设置环境变量</h2><ul>
<li><p>在<code>csh shell</code>输入<code>setenv PATH &quot;$PATH:/usr/local/bin/python</code>，按下<code>Enter</code>。</p>
</li>
<li><p>在<code>bash shell</code>(Linux)输入<code>export PATH=&quot;$PATH:/usr/local/bin/python</code>，按下<code>Enter</code>。</p>
</li>
<li><p>在<code>sh</code>或者<code>ksh shell</code>输入<code>PATH=&quot;$PATH:/usr/local/bin/python</code>, 按下<code>Enter</code>。</p>
</li>
</ul>
<p>注意: <code>/usr/local/bin/python</code>是Python的安装目录。</p>
<h2 id="在Windows设置环境变量">在Windows设置环境变量</h2><p>在环境变量中添加Python目录：</p>
<p>在命令提示框中（cmd）输入<code>path %path%;C:\Python</code>, 按下<code>Enter</code>。</p>
<p>注意: C:\Python是Python的安装目录。</p>
<h1 id="Python_环境变量">Python 环境变量</h1><p>下面几个重要的环境变量，它应用于Python：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>PYTHONPATH</td>
<td>PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td>
</tr>
<tr>
<td>PYTHONSTARTUP</td>
<td>Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此文件中变量指定的执行代码。</td>
</tr>
<tr>
<td>PYTHONCASEOK</td>
<td>加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写。</td>
</tr>
<tr>
<td>PYTHONHOME</td>
<td>另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td>
</tr>
</tbody>
</table>
<h1 id="运行Python">运行Python</h1><p>有三种方式可以运行Python：</p>
<p>1、交互式解释器：<br>你可以通过命令行窗口进入python并开在交互式解释器中开始编写Python代码。</p>
<p>你可以在Unix，DOS或任何其他提供了命令行或者shell的系统进行python编码工作。</p>
<p><code>$python # Unix/Linux</code></p>
<p><code>C:\&gt;python # Windows/DOS</code></p>
<p>以下为Python命令行参数：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>在解析时显示调试信息</td>
</tr>
<tr>
<td>-O</td>
<td>生成优化代码（.pyo文件）</td>
</tr>
<tr>
<td>-S</td>
<td>启动时不引入查找Python路径的位置</td>
</tr>
<tr>
<td>-v</td>
<td>输出Python版本号</td>
</tr>
<tr>
<td>-X</td>
<td>从1.6版本之后基于内建的异常（仅仅用于字符串）已过时</td>
</tr>
<tr>
<td>-c cmd</td>
<td>执行Python脚本，并将运行结果作为cmd字符串</td>
</tr>
<tr>
<td>file</td>
<td>在给定的python文件执行python脚本</td>
</tr>
</tbody>
</table>
<p>2、命令行脚本<br>在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：</p>
<p><code>$python script.py # Unix/Linux</code></p>
<p>或者 </p>
<p><code>./script.py # Unix/Linux</code></p>
<p>或者 </p>
<p><code>C:\&gt;python script.py # Windows/DOS</code></p>
<p>注意：在执行脚本时，请检查脚本是否有可执行权限。</p>
<p>3、集成开发环境（IDE：Integrated Development Environment）<br>您可以使用图形用户界面（GUI）环境来编写及运行Python代码。以下推荐各个平台上使用的IDE：</p>
<ul>
<li><p><strong>Unix</strong>：IDLE是UNIX上最早的Python IDE。</p>
</li>
<li><p><strong>Windows</strong>：PythonWin是一个Python集成开发环境，在许多方面都比IDE优秀。</p>
</li>
<li><p><strong>Macintosh</strong>：Python的Mac可以使用IDLE IDE，你可以在网站上下载对应Mac的IDLE。</p>
</li>
</ul>
<p>继续下一章之前，请确保您的环境已搭建成功。如果你不能够建立正确的环境，那么你就可以从您的系统管理员的帮助。</p>
<p>在以后的章节中给出的例子已在Ubuntu下Python 2.7.6版本测试通过。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python简介]]></title>
      <url>http://gyshgx868.github.io/2015/09/25/Python/01-python-intro/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-intro.html" target="_blank" rel="noopener">runoob.com - Python简介</a></p>
<p>Python是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p>
<p>Python的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。<br><a id="more"></a></p>
<ul>
<li><p><strong>Python是一种解释型语言</strong>：这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p>
</li>
<li><p><strong>Python是交互式语言</strong>：这意味着，您可以在一个Python提示符，直接互动执行写你的程序。</p>
</li>
<li><p><strong>Python是面向对象语言</strong>：这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p>
</li>
<li><p><strong>Python是初学者的语言</strong>：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到WWW浏览器再到游戏。</p>
</li>
</ul>
<h1 id="Python发展历史">Python发展历史</h1><p>Python是由Guido van Rossum在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p>
<p>Python本身也是由诸多其他语言发展而来的，这包括ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell和其他的脚本语言等等。</p>
<p>像Perl语言一样, Python源代码同样遵循GPL(GNU General Public License)协议。</p>
<p>现在Python是由一个核心开发团队在维护，Guido van Rossum仍然占据着至关重要的作用，指导其进展。</p>
<h1 id="Python特点">Python特点</h1><ol>
<li><p><strong>易于学习</strong>：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p>
</li>
<li><p><strong>易于阅读</strong>：Python代码定义的更清晰。</p>
</li>
<li><p><strong>易于维护</strong>：Python的成功在于它的源代码是相当容易维护的。</p>
</li>
<li><p><strong>一个广泛的标准库</strong>：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</p>
</li>
<li><p><strong>互动模式</strong>：互动模式的支持，您可以从终端输入并获得结果的语言，互动的测试和调试代码片断。</p>
</li>
<li><p><strong>便携式</strong>：Python可以运行在多种硬件平台和所有平台上都具有相同的接口。</p>
</li>
<li><p><strong>可扩展</strong>：可以添加低层次的模块到Python解释器。这些模块使程序员可以添加或定制自己的工具，更有效。</p>
</li>
<li><p><strong>数据库</strong>：Python提供所有主要的商业数据库的接口。</p>
</li>
<li><p><strong>GUI编程</strong>：Python支持GUI可以创建和移植到许多系统调用。</p>
</li>
<li><p><strong>可扩展性</strong>：相比shell脚本，Python提供了一个更好的结构，且支持大型程序。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[并查集简单题目]]></title>
      <url>http://gyshgx868.github.io/2015/08/26/Algorithm/union-find-problems/</url>
      <content type="html"><![CDATA[<h1 id="题目列表">题目列表</h1><p>HDU：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1232" target="_blank" rel="noopener">1232</a></p>
<p>POJ：<a href="http://poj.org/problem?id=1308" target="_blank" rel="noopener">1308</a> <a href="http://poj.org/problem?id=1611" target="_blank" rel="noopener">1611</a> <a href="http://poj.org/problem?id=1703" target="_blank" rel="noopener">1703</a><br><a id="more"></a></p>
<h1 id="HDU_1232_畅通工程">HDU 1232 畅通工程</h1><h2 id="Description">Description</h2><p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ </p>
<h2 id="Input">Input</h2><p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。 </p>
<h2 id="Output">Output</h2><p>对每个测试用例，在1行里输出最少还需要建设的道路数目。 </p>
<h2 id="Sample_Input">Sample Input</h2><p>4 2<br>1 3<br>4 3<br>3 3<br>1 2<br>1 3<br>2 3<br>5 2<br>1 2<br>3 5<br>999 0<br>0</p>
<h2 id="Sample_Output">Sample Output</h2><p>1<br>0<br>2<br>998</p>
<h2 id="Hint">Hint</h2><p>Huge input, scanf is recommended.</p>
<h2 id="解题思路">解题思路</h2><p>要求的是输出最少需要建设的条数，一共给出了<code>N</code>个点，那么如果一条路也没有的话，最少就需要建立<code>N - 1</code>条路，也就是先把最后的结论<code>ans</code>初始化为<code>N - 1</code>。然后，针对每输入的一对点，判断这两个点的父亲，如果不相等的话，证明这两个城市没有办法联通，需要建路，那么此时的<code>ans</code>就应该减1，依次处理到最后一组数据。最后<code>ans</code>就是题目的答案。</p>
<h2 id="AC代码">AC代码</h2><p>31MS/1412K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> father[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = findset(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionset</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = findset(a);</span><br><span class="line">    b = findset(b);</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">    &#123;</span><br><span class="line">        ans--;</span><br><span class="line">        father[a] = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            father[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        ans = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            unionset(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="POJ_1308_Is_It_A_Tree?">POJ 1308 Is It A Tree?</h1><h2 id="Description-1">Description</h2><p>A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties. </p>
<p>There is exactly one node, called the root, to which no directed edges point.<br>Every node except the root has exactly one edge pointing to it.<br>There is a unique sequence of directed edges from the root to each node.<br>For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not.<br><img src="http://poj.org/images/1308_1.jpg" alt="POJ1308"></p>
<p>In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not.</p>
<h2 id="Input-1">Input</h2><p>The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero.</p>
<h2 id="Output-1">Output</h2><p>For each test case display the line “Case k is a tree.” or the line “Case k is not a tree.”, where k corresponds to the test case number (they are sequentially numbered starting with 1).</p>
<h2 id="Sample_Input-1">Sample Input</h2><p>6 8  5 3  5 2  6 4<br>5 6  0 0</p>
<p>8 1  7 3  6 2  8 9  7 5<br>7 4  7 8  7 6  0 0</p>
<p>3 8  6 8  6 4<br>5 3  5 6  5 2  0 0<br>-1 -1</p>
<h2 id="Sample_Output-1">Sample Output</h2><p>Case 1 is a tree.<br>Case 2 is a tree.<br>Case 3 is not a tree.</p>
<h2 id="解题思路-1">解题思路</h2><p>需要判断几种不是树的情况：</p>
<ul>
<li>0 0 空树是一棵树</li>
<li>1 1 0 0 不是树 不能自己指向自己</li>
<li>1 2 1 3 2 3 0 0 成环不是树</li>
<li>1 2 2 3 4 5 森林不算是树(主要是注意自己)</li>
</ul>
<p>综上也就是三种大情况，全都讨论了就没问题了。</p>
<h2 id="AC代码-1">AC代码</h2><p>172K/0MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> father[N], flag[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        flag[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = findset(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionset</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = findset(a);</span><br><span class="line">    b = findset(b);</span><br><span class="line">    <span class="keyword">if</span> (a != b) father[a] = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, t = <span class="number">1</span>, first;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">-1</span> &amp;&amp; y == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//空树是一棵树</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d is a tree.\n"</span>, t++);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        init();</span><br><span class="line">        flag[x] = flag[y] = <span class="literal">true</span>;</span><br><span class="line">        first = x;</span><br><span class="line">        <span class="keyword">bool</span> tree = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//同if (findset(x) == findset(y))</span></span><br><span class="line">        <span class="keyword">if</span> (x == y) tree = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> unionset(x, y);</span><br><span class="line">        <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y) &amp;&amp; x + y)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[x] = flag[y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//不能为环</span></span><br><span class="line">            <span class="keyword">if</span> (findset(x) == findset(y)) tree = <span class="literal">false</span>;</span><br><span class="line">            unionset(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> root = findset(first);</span><br><span class="line">        <span class="comment">//不能为森林</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[i] &amp;&amp; findset(i) != root)</span><br><span class="line">                tree = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tree) <span class="built_in">printf</span>(<span class="string">"Case %d is a tree.\n"</span>, t++);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case %d is not a tree.\n"</span>, t++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="POJ_1611_The_Suspects">POJ 1611 The Suspects</h1><h2 id="Description-2">Description</h2><p>Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others.<br>In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP).<br>Once a member in a group is a suspect, all members in the group are suspects.<br>However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects.</p>
<h2 id="Input-2">Input</h2><p>The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 &lt; n &lt;= 30000 and 0 &lt;= m &lt;= 500. Every student is numbered by a unique integer between 0 and n−1, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space.<br>A case with n = 0 and m = 0 indicates the end of the input, and need not be processed.</p>
<h2 id="Output-2">Output</h2><p>For each case, output the number of suspects in one line.</p>
<h2 id="Sample_Input-2">Sample Input</h2><p>100 4<br>2 1 2<br>5 10 13 11 12 14<br>2 0 1<br>2 99 2<br>200 2<br>1 5<br>5 1 2 3 4 5<br>1 0<br>0 0</p>
<h2 id="Sample_Output-2">Sample Output</h2><p>4<br>1<br>1</p>
<h2 id="解题思路-2">解题思路</h2><p>需要使用一个<code>num[x]</code>来记录每一个父亲节点所包含的子节点数量，创建集合的时候每一个社团里的人都与该社团的第一个人连接，这样每个社团就能组成一个集合了。最后判断<code>0</code>属于哪个集合，输出<code>num[findset(0)]</code>即可。</p>
<h2 id="AC代码-2">AC代码</h2><p>400K/16MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30005</span>;</span><br><span class="line"><span class="keyword">int</span> father[N], num[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        num[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = findset(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionset</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = findset(a);</span><br><span class="line">    b = findset(b);</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">    &#123;</span><br><span class="line">        father[a] = b;</span><br><span class="line">        num[b] += num[a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, a, b;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n + m)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">                unionset(a, b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[findset(<span class="number">0</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="POJ_1703_Find_them,_Catch_them">POJ 1703 Find them, Catch them</h1><h2 id="Description-3">Description</h2><p>The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) </p>
<p>Assume N (N &lt;= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M &lt;= 10^5) messages in sequence, which are in the following two kinds: </p>
<ol>
<li><p>D [a] [b]<br>where [a] and [b] are the numbers of two criminals, and they belong to different gangs. </p>
</li>
<li><p>A [a] [b]<br>where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. </p>
</li>
</ol>
<h2 id="Input-3">Input</h2><p>The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above.</p>
<h2 id="Output-3">Output</h2><p>For each message “A [a] [b]” in each case, your program should give the judgment based on the information got before. The answers might be one of “In the same gang.”, “In different gangs.” and “Not sure yet.”</p>
<h2 id="Sample_Input-3">Sample Input</h2><p>1<br>5 5<br>A 1 2<br>D 1 2<br>A 1 2<br>D 2 4<br>A 1 4</p>
<h2 id="Sample_Output-3">Sample Output</h2><p>Not sure yet.<br>In different gangs.<br>In the same gang.</p>
<h2 id="解题思路-3">解题思路</h2><p>使用<code>num[x]</code>数组记录和<code>x</code>敌对的人的编号，建立集合的时候，将<code>x</code>的敌对方<code>num[x]</code>和<code>y</code>建立到一起，这两拨人才是属于同一个集合的，最后判断，输出结论就好。</p>
<h2 id="AC代码-3">AC代码</h2><p>948K/329MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> father[N], num[N]; <span class="comment">//num[x]表示x的敌对势力</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        <span class="comment">//没有敌对势力</span></span><br><span class="line">        num[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = findset(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionset</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = findset(a);</span><br><span class="line">    b = findset(b);</span><br><span class="line">    <span class="keyword">if</span> (a != b) father[a] = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b, m, n;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c%d%d"</span>, &amp;c, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[a]) unionset(num[a], b); <span class="comment">//b和a的敌对势力是一伙</span></span><br><span class="line">                <span class="keyword">if</span> (num[b]) unionset(a, num[b]); <span class="comment">//a和b的敌对势力是一伙</span></span><br><span class="line">                num[a] = b;</span><br><span class="line">                num[b] = a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (findset(a) == findset(num[b])) <span class="built_in">printf</span>(<span class="string">"In different gangs.\n"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (findset(a) == findset(b)) <span class="built_in">printf</span>(<span class="string">"In the same gang.\n"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Not sure yet.\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法学习：并查集]]></title>
      <url>http://gyshgx868.github.io/2015/08/26/Algorithm/union-find/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>在计算机科学中，并查集是一种树型的数据结构，其保持着用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个操作用于此数据结构：<br><a id="more"></a></p>
<ul>
<li>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li>
<li>Union：将两个子集合并成同一个集合。</li>
</ul>
<p>因为它支持这两种操作，一个不相交集也常被称为联合-查找数据结构（union-find data structure）或合并-查找集合（merge-find set）。其他的重要方法，MakeSet，用于建立单元素集合。有了这些方法，许多经典的划分问题可以被解决。</p>
<p>为了更加精确的定义这些方法，需要定义如何表示集合。一种常用的策略是为每个集合选定一个固定的元素，称为代表，以表示整个集合。接着。Find(x)返回x所属集合的代表，而Union使用两个集合的代表作为参数。</p>
<p><strong>（以上内容复制自维基百科）</strong></p>
<h1 id="集合的查找">集合的查找</h1><p>集合的查找的作用就是寻找一个元素的父亲。我们首先设置了一个<code>father[x]</code>数组，他记录了表示<code>x</code>的“父亲”的编号，<strong>数组元素的值全都设置为<code>father[x] = x</code>，即节点的父亲就是它本身</strong>。</p>
<p>那么接下来我们就可以通过迭代的方式来不断的递推，直到找到了<code>x = father[x]</code>的时候，那么我们就能说<code>x</code>就是这个集合最原始的父亲了。</p>
<p>C++代码如下：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int findset(int <span class="keyword">x</span>)</span><br><span class="line">&#123;</span><br><span class="line">    while (<span class="keyword">x</span> != father[<span class="keyword">x</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">x</span> = father[<span class="keyword">x</span>]<span class="comment">;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>但是一旦元素一多起来，或退化成一条链，每次<code>findset(x)</code>都将会使用<code>O(n)</code>的复杂度，这显然不是我们想要的。</p>
<p>对此，我们必须要进行路径压缩，即我们找到最久远的祖先时“顺便”把它的子孙直接连接到它上面。这就是路径压缩了。</p>
<p><img src="http://7xlcor.dl1.z0.glb.clouddn.com/find-set.jpg" alt="Find Set"></p>
<p>C++代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, j, r;</span><br><span class="line">    r = x;</span><br><span class="line">    <span class="keyword">while</span> (r != father[r])</span><br><span class="line">    &#123;</span><br><span class="line">        r = father[r];</span><br><span class="line">    &#125;</span><br><span class="line">    k = x;</span><br><span class="line">    <span class="keyword">while</span> (k != r)</span><br><span class="line">    &#123;</span><br><span class="line">        j = father[k];</span><br><span class="line">        father[k] = r;</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//递归式</span><br><span class="line">int findset(int <span class="keyword">x</span>)</span><br><span class="line">&#123;</span><br><span class="line">    return father[<span class="keyword">x</span>] == <span class="keyword">x</span> ? <span class="keyword">x</span> : father[<span class="keyword">x</span>] = findset(father[<span class="keyword">x</span>])<span class="comment">;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="集合的合并">集合的合并</h1><p>操作很简单：还是使用<code>father[x]</code>数组。那么，合并两个不相交集合的方法就是，找到其中一个集合最父亲的父亲（也就是最久远的祖先），将另外一个集合的最久远的祖先的父亲指向它。<strong>简单的说就是将两个集合的父亲指向同一个父亲。</strong></p>
<p><img src="http://7xlcor.dl1.z0.glb.clouddn.com/union-set.jpg" alt="Union Set"></p>
<p>C++代码如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">void</span> unionset(int a, int <span class="keyword">b)</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"> </span>   a = findset(a)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">b </span>= findset(<span class="keyword">b);</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (a != <span class="keyword">b) </span>father[a] = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>其中<code>findset(x)</code>表示的是寻找x的父亲节点。</p>
<h1 id="集合的按秩合并">集合的按秩合并</h1><p>集合的合并的时候有一个问题，就是两个集合的父亲到底谁指向谁，其实都没问题。问题就是谁更优。</p>
<p>显然，合并之后高度比较小的集合更加的优化，查找操作更加的节省时间。因此我们就可以将高度比较小的集合合并到高度比较大的集合上面，这样就能保证高度最小了。</p>
<p>要维持这样的合并方式，我们需要引入一个<code>rk[x]</code>数组，记录的就是<code>x</code>的最子节点开始，到<code>x</code>的高度。通过<code>rk[x]</code>的值进行合并就可以将低深度的集合合并到高深度的集合了，但是需要将其初始化：<code>memset(rk, 0, sizeof(rk))</code>。</p>
<p>C++代码如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">void</span> unionset(int a, int <span class="keyword">b)</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"> </span>   a = findset(a)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">b </span>= findset(<span class="keyword">b);</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (a == <span class="keyword">b) </span>return<span class="comment">;</span></span><br><span class="line">    <span class="meta">if</span> (rk[a] &gt; rk[<span class="keyword">b]) </span>father[<span class="keyword">b] </span>= a<span class="comment">;</span></span><br><span class="line">    <span class="meta">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">if</span> (rk[a] == rk[<span class="keyword">b]) </span>rk[<span class="keyword">b]++;</span></span><br><span class="line"><span class="keyword"> </span>       father[a] = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料">参考资料</h1><p>[1] <a href="http://blog.csdn.net/nedushy123/article/details/21647519" target="_blank" rel="noopener">并查集详解</a> By nedushy123</p>
<p>[2] <a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86" target="_blank" rel="noopener">并查集 - 维基百科</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1384 Piggy-Bank]]></title>
      <url>http://gyshgx868.github.io/2015/08/23/POJ/poj-1384/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is irreversible, the coins cannot be removed without breaking the pig. After a sufficiently long time, there should be enough cash in the piggy-bank to pay everything that needs to be paid.<br><a id="more"></a><br>But there is a big problem with piggy-banks. It is not possible to determine how much money is inside. So we might break the pig into pieces only to find out that there is not enough money. Clearly, we want to avoid this unpleasant situation. The only possibility is to weigh the piggy-bank and try to guess how many coins are inside. Assume that we are able to determine the weight of the pig exactly and that we know the weights of all coins of a given currency. Then there is some minimum amount of money in the piggy-bank that we can guarantee. Your task is to find out this worst case and determine the minimum amount of cash inside the piggy-bank. We need your help. No more prematurely broken pigs! </p>
<h2 id="Input">Input</h2><p>The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers E and F. They indicate the weight of an empty pig and of the pig filled with coins. Both weights are given in grams. No pig will weigh more than 10 kg, that means 1 &lt;= E &lt;= F &lt;= 10000. On the second line of each test case, there is an integer number N (1 &lt;= N &lt;= 500) that gives the number of various coins used in the given currency. Following this are exactly N lines, each specifying one coin type. These lines contain two integers each, Pand W (1 &lt;= P &lt;= 50000, 1 &lt;= W &lt;=10000). P is the value of the coin in monetary units, W is it’s weight in grams.</p>
<h2 id="Output">Output</h2><p>Print exactly one line of output for each test case. The line must contain the sentence “The minimum amount of money in the piggy-bank is X.” where X is the minimum amount of money that can be achieved using coins with the given total weight. If the weight cannot be reached exactly, print a line “This is impossible.”.</p>
<h2 id="Sample_Input">Sample Input</h2><p>3<br>10 110<br>2<br>1 1<br>30 50<br>10 110<br>2<br>1 1<br>50 30<br>1 6<br>2<br>10 3<br>20 4</p>
<h2 id="Sample_Output">Sample Output</h2><p>The minimum amount of money in the piggy-bank is 60.<br>The minimum amount of money in the piggy-bank is 100.<br>This is impossible.</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=1384" target="_blank" rel="noopener">http://poj.org/problem?id=1384</a></p>
<h1 id="解题思路">解题思路</h1><p>完全背包问题，首先需要确定所给出的钱币是否能够将这个背包装满。把原本动态转移方程<code>dp[j] = max(dp[j], dp[j - v[i]] + w[i])</code>中的<code>w[i]</code>也换成容量<code>v[i]</code>，这样就能通过方程来判断是不是可以装满了。然再通过另外一个数组<code>f</code>来求最小的数值，完全背包原本的动态转移方程是用来求最大值的，这里把原本的<code>max</code>改成<code>min</code>就可以了，不过事先需要将<code>f</code>数组的初始值都设为无穷大。</p>
<h1 id="AC代码">AC代码</h1><p>252K/157MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN], f[MAXN];</span><br><span class="line"><span class="keyword">int</span> w[MAXN], v[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, E, F, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;E, &amp;F);</span><br><span class="line">        <span class="keyword">int</span> N = F - E;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = inf;</span><br><span class="line">        &#125;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = v[i]; j &lt;= N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j] = max(dp[j], dp[j - v[i]] + v[i]);</span><br><span class="line">                f[j] = min(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[N] == N)</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"The minimum amount of money in the piggy-bank is %d.\n"</span>, f[N]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"This is impossible.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1189 钉子和小球]]></title>
      <url>http://gyshgx868.github.io/2015/08/20/POJ/poj-1189/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>有一个三角形木板,竖直立放，上面钉着n(n+1)/2颗钉子，还有(n+1)个格子（当n=5时如图1）。每颗钉子和周围的钉子的距离都等于d，每个格子的宽度也都等于d，且除了最左端和最右端的格子外每个格子都正对着最下面一排钉子的间隙。<br><a id="more"></a><br>让一个直径略小于d的小球中心正对着最上面的钉子在板上自由滚落，小球每碰到一个钉子都可能落向左边或右边（概率各1/2），且球的中心还会正对着下一颗将要碰上的钉子。例如图2就是小球一条可能的路径。<br>我们知道小球落在第i个格子中的概率pi=pi=<img src="http://poj.org/images/1189_1.jpg" alt="POJ1189_1">，其中i为格子的编号，从左至右依次为0,1,…,n。<br>现在的问题是计算拔掉某些钉子后，小球落在编号为m的格子中的概率pm。假定最下面一排钉子不会被拔掉。例如图3是某些钉子被拔掉后小球一条可能的路径。<br><img src="http://poj.org/images/1189_2.jpg" alt="POJ1189_2"></p>
<h2 id="Input">Input</h2><p>第1行为整数n（2 &lt;= n &lt;= 50）和m（0 &lt;= m &lt;= n）。以下n行依次为木板上从上至下n行钉子的信息，每行中’*’表示钉子还在，’.’表示钉子被拔去，注意在这n行中空格符可能出现在任何位置。</p>
<h2 id="Output">Output</h2><p>仅一行，是一个既约分数(0写成0/1)，为小球落在编号为m的格子中的概pm。既约分数的定义：A/B是既约分数，当且仅当A、B为正整数且A和B没有大于1的公因子。</p>
<h2 id="Sample_Input">Sample Input</h2><p>5 2<br>&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;* .<br>&nbsp;&nbsp;* * *<br>&nbsp;* . * *<br>* * * * *</p>
<h2 id="Sample_Output">Sample Output</h2><p>7/16</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=1189" target="_blank" rel="noopener">http://poj.org/problem?id=1189</a></p>
<h1 id="解题思路">解题思路</h1><p>使用DP来模拟打表。我们先把输入的数据处理成类似下面的数组：<br>1<br>1 0<br>1 1 1<br>1 0 1 1<br>1 1 1 1 1</p>
<p><code>dp[i][j]</code>表示的是第i行第j列碰到的概率，<code>dp[0][0]</code>的初始值为<code>1 &lt;&lt; n</code>，因为我们要保证处理到最后一行之前不能出现0。然后从第一层开始推，假如碰到1，此时的坐标如果是i和j的话，那么，<code>dp[i + 1][j]</code>和<code>dp[i + 1][j + 1]</code>触碰到的概率都要加上1/2，所以在这里加上<code>dp[i][j] / 2</code>；如果碰到了0，那么小球将会跳过这一行，然后触碰到<code>(i + 2, j + 1)</code>这个点，也就是说这个点的概率也要加上<code>dp[i][j] / 2</code>。</p>
<p>依次处理到最后一层，直接化简求一下概率就行了。</p>
<p>给<code>dp[0][0]</code>赋初值的时候不能直接<code>1 &lt;&lt; n</code>，因为编译器会将这里的1认为是<code>int</code>型的，要转换一下类型。</p>
<h1 id="AC代码">AC代码</h1><p>168K/0MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line">ll __gcd(ll a, ll b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : __gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">            s[i][j] = str[<span class="number">0</span>] == <span class="string">'*'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1l</span>l &lt;&lt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j] += dp[i][j] / <span class="number">2</span>;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] += dp[i][j] / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i + <span class="number">2</span>][j + <span class="number">1</span>] += dp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll num = dp[n][m];</span><br><span class="line">    ll den = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        den += dp[n][i];</span><br><span class="line">    &#125;</span><br><span class="line">    ll g = __gcd(num, den);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d/%I64d\n"</span>, num / g, den / g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[memset函数效率分析]]></title>
      <url>http://gyshgx868.github.io/2015/08/14/Cpp/memset-efficiency/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>在处理数组的时候经常需要频繁地将数组初始化为0，这时候有两种选择，一种是使用for循环，一个元素一个元素地赋值；再者就是使用包含于<code>string.h</code>头文件的<code>memset</code>函数了。</p>
<p>原文：<a href="http://blog.csdn.net/hackbuteer1/article/details/7343189" target="_blank" rel="noopener">http://blog.csdn.net/hackbuteer1/article/details/7343189</a></p>
<a id="more"></a>
<h1 id="函数原型">函数原型</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memset</span><span class="params">(<span class="keyword">void</span>* s, <span class="keyword">int</span> c, <span class="keyword">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* p = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*) s;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *p++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) c;</span><br><span class="line">        --n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作用：将s所指向的某一块内存中的每个字节的内容全部设置为c指定的ASCII值, 块的大小由第三个参数指定，这个函数通常为新申请的内存做初始化工作。</p>
<h1 id="函数使用">函数使用</h1><p><code>memset</code>函数通常都被当做当作万能的初始化工具，例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10000</span>; </span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="built_in">memset</span>(arr, <span class="number">1</span>, n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure></p>
<p>这样得到的arr数组一定不是全0，而是16843009，下面解释原因。<br>首先，变量类型的本质只是标志从某一内存地址开始读取的位数，强制转换就是改变读取位数的大小。</p>
<p>c的二进制表示: 00000000 00000000 00000000 00000001 (32位)</p>
<ol>
<li>c转换为<code>unsigned char</code>后：00000001（8位）</li>
<li>将指针p（<code>unsigned char</code>类型）的每一元素（8位）赋值为00000001，循环<code>4n</code>次。</li>
<li><code>memset</code>结束后，<code>arr</code>的每个元素按照<code>int</code>类型读取，读出来的就是00000001 00000001 00000001 00000001，十进制就是16843009。</li>
</ol>
<p>不过如果是<code>memset(arr, 0, n * sizeof(int))</code>的话可以使用，因为32位都是0。<code>memset(arr, -1, n * sizeof(int))</code>也可以将<code>arr</code>数组成功赋值为-1，因为计算机在存储负数的时候采用的是补码表示，-1的补码为：11111111 11111111 11111111 11111111，因此可以成功地赋值。</p>
<h1 id="效率测试">效率测试</h1><p>再来说<code>memset</code>的效率问题。使用<code>memset</code>函数与将上面的函数代码写在自己的程序里是不一样的，C标准库中的<code>memset</code>对<code>Cache</code>的利用做了优化，具体的在《C专家编程》151页有解释，这里给出测试代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[MAXSIZE];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="comment">//for (int j = 0; j &lt; MAXSIZE; j++)</span></span><br><span class="line">        <span class="comment">//    arr[0] = '0';</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序里的注释部分与<code>memset</code>行分别使用，结果是使用<code>memset</code>的程序运行时间大约为0.1s，而用for循环的程序大约需要3s。</p>
<p>综上：<code>memset</code>可以用在字符数组的初始化以及类似于<code>memset(arr, 0, n * sizeof(int))</code>的情况，效率比手动赋值要高的多，但大量的初始化也需要谨慎使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 570C Replacement]]></title>
      <url>http://gyshgx868.github.io/2015/08/14/CodeForces/cf-570/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Daniel has a string s, consisting of lowercase English letters and period signs (characters ‘.’). Let’s define the operation of replacement as the following sequence of steps: find a substring “..” (two consecutive periods) in string s, of all occurrences of the substring let’s choose the first one, and replace this substring with string “.”. In other words, during the replacement operation, the first two consecutive periods are replaced by one. If string s contains no two consecutive periods, then nothing happens.<br><a id="more"></a><br>Let’s define f(s) as the minimum number of operations of replacement to perform, so that the string does not have any two consecutive periods left.</p>
<p>You need to process m queries, the i-th results in that the character at position $x_i$ (1 ≤ $x_i$ ≤ n) of string s is assigned value $c_i$. After each operation you have to calculate and output the value of f(s).</p>
<p>Help Daniel to process all queries.</p>
<h2 id="Input">Input</h2><p>The first line contains two integers n and m (1 ≤ n, m ≤ 300 000) the length of the string and the number of queries.</p>
<p>The second line contains string s, consisting of n lowercase English letters and period signs.</p>
<p>The following m lines contain the descriptions of queries. The i-th line contains integer $x_i$ and $c_i$ (1 ≤ $x_i$ ≤ n, $c_i$ — a lowercas English letter or a period sign), describing the query of assigning symbol $c_i$ to position $x_i$.</p>
<h2 id="Output">Output</h2><p>Print m numbers, one per line, the i-th of these numbers must be equal to the value of f(s) after performing the i-th assignment.</p>
<h2 id="Sample_test(s)">Sample test(s)</h2><table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>10 3</td>
</tr>
<tr>
<td>.b..bz….</td>
</tr>
<tr>
<td>1 h</td>
</tr>
<tr>
<td>3 c</td>
</tr>
<tr>
<td>9 f</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
</tr>
<tr>
<td>3</td>
</tr>
<tr>
<td>1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>4 4</td>
</tr>
<tr>
<td>.cc.</td>
</tr>
<tr>
<td>2 .</td>
</tr>
<tr>
<td>3 .</td>
</tr>
<tr>
<td>2 a</td>
</tr>
<tr>
<td>1 a</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
</tr>
<tr>
<td>3</td>
</tr>
<tr>
<td>1</td>
</tr>
<tr>
<td>1</td>
</tr>
</tbody>
</table>
<h2 id="Note">Note</h2><p>Note to the first sample test (replaced periods are enclosed in square brackets).</p>
<p>The original string is “.b..bz….”.</p>
<ul>
<li>after the first query f(hb..bz….) = 4    (“hb[..]bz….”  →  “hb.bz[..]..”  →  “hb.bz[..].”  →  “hb.bz[..]”  →  “hb.bz.”)</li>
<li>after the second query f(hbс.bz….) = 3    (“hbс.bz[..]..”  →  “hbс.bz[..].”  →  “hbс.bz[..]”  →  “hbс.bz.”)</li>
<li>after the third query f(hbс.bz..f.) = 1    (“hbс.bz[..]f.”  →  “hbс.bz.f.”)<br>Note to the second sample test.</li>
</ul>
<p>The original string is “.cc.”.</p>
<ul>
<li>after the first query: f(..c.) = 1    (“[..]c.”  →  “.c.”)</li>
<li>after the second query: f(….) = 3    (“[..]..”  →  “[..].”  →  “[..]”  →  “.”)</li>
<li>after the third query: f(.a..) = 1    (“.a[..]”  →  “.a.”)</li>
<li>after the fourth query: f(aa..) = 1    (“aa[..]”  →  “aa.”)</li>
</ul>
<h1 id="题目链接">题目链接</h1><p><a href="http://codeforces.com/problemset/problem/570/C" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/570/C</a></p>
<h1 id="解题思路">解题思路</h1><p>一开始以为是一道多难的题，竟然如此的简单。比赛还剩不到10分钟的时候才想到，匆忙中敲了一发，竟然WA了，也没时间检查哪里错了。赛后看了一下别人的代码，才发现自己的代码写Low了。</p>
<h1 id="AC代码">AC代码</h1><p>171 ms/100 KB/GNU C++<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line">char <span class="keyword">str</span>[<span class="number">300005</span>], ch[<span class="number">5</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, x<span class="comment">;</span></span><br><span class="line">    <span class="keyword">while</span> (~scanf(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">cnt</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        scanf(<span class="string">"%s"</span>, <span class="keyword">str</span> + <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span><span class="comment">; i &lt; n; i++)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">cnt</span> += <span class="keyword">str</span>[i] == <span class="string">'.'</span> &amp;&amp; <span class="keyword">str</span>[i + <span class="number">1</span>] == <span class="string">'.'</span><span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span><span class="comment">; i &lt;= m; i++)</span></span><br><span class="line">        &#123;</span><br><span class="line">            scanf(<span class="string">"%d%s"</span>, &amp;x, ch)<span class="comment">;</span></span><br><span class="line">            <span class="keyword">cnt</span> -= <span class="keyword">str</span>[x - <span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; <span class="keyword">str</span>[x] == <span class="string">'.'</span><span class="comment">;</span></span><br><span class="line">            <span class="keyword">cnt</span> -= <span class="keyword">str</span>[x + <span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; <span class="keyword">str</span>[x] == <span class="string">'.'</span><span class="comment">;</span></span><br><span class="line">            <span class="keyword">str</span>[x] = ch[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">            <span class="keyword">cnt</span> += <span class="keyword">str</span>[x - <span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; <span class="keyword">str</span>[x] == <span class="string">'.'</span><span class="comment">;</span></span><br><span class="line">            <span class="keyword">cnt</span> += <span class="keyword">str</span>[x + <span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; <span class="keyword">str</span>[x] == <span class="string">'.'</span><span class="comment">;</span></span><br><span class="line">            printf(<span class="string">"%d\n"</span>, <span class="keyword">cnt</span>)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1157 LITTLE SHOP OF FLOWERS]]></title>
      <url>http://gyshgx868.github.io/2015/08/13/POJ/poj-1157/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>You want to arrange the window of your flower shop in a most pleasant way. You have F bunches of flowers, each being of a different kind, and at least as many vases ordered in a row. The vases are glued onto the shelf and are numbered consecutively 1 through V, where V is the number of vases, from left to right so that the vase 1 is the leftmost, and the vase V is the rightmost vase. The bunches are moveable and are uniquely identified by integers between 1 and F. These id-numbers have a significance: They determine the required order of appearance of the flower bunches in the row of vases so that the bunch i must be in a vase to the left of the vase containing bunch j whenever i &lt; j. Suppose, for example, you have bunch of azaleas (id-number=1), a bunch of begonias (id-number=2) and a bunch of carnations (id-number=3). Now, all the bunches must be put into the vases keeping their id-numbers in order. The bunch of azaleas must be in a vase to the left of begonias, and the bunch of begonias must be in a vase to the left of carnations. If there are more vases than bunches of flowers then the excess will be left empty. A vase can hold only one bunch of flowers.<br><a id="more"></a><br>Each vase has a distinct characteristic (just like flowers do). Hence, putting a bunch of flowers in a vase results in a certain aesthetic value, expressed by an integer. The aesthetic values are presented in a table as shown below. Leaving a vase empty has an aesthetic value of 0. </p>
<p><img src="http://7xkj0a.dl1.z0.glb.clouddn.com/poj-1157.png" alt="POJ1157"></p>
<p>According to the table, azaleas, for example, would look great in vase 2, but they would look awful in vase 4. </p>
<p>To achieve the most pleasant effect you have to maximize the sum of aesthetic values for the arrangement while keeping the required ordering of the flowers. If more than one arrangement has the maximal sum value, any one of them will be acceptable. You have to produce exactly one arrangement. </p>
<h2 id="Input">Input</h2><ul>
<li>The first line contains two numbers: F, V.</li>
<li><p>The following F lines: Each of these lines contains V integers, so that Aij is given as the jth number on the (i+1)st line of the input file.</p>
</li>
<li><p>1 &lt;= F &lt;= 100 where F is the number of the bunches of flowers. The bunches are numbered 1 through F. </p>
</li>
<li>F &lt;= V &lt;= 100 where V is the number of vases. </li>
<li>-50 &lt;= Aij &lt;= 50 where Aij is the aesthetic value obtained by putting the flower bunch i into the vase j.</li>
</ul>
<h2 id="Output">Output</h2><p>The first line will contain the sum of aesthetic values for your arrangement.</p>
<h2 id="Sample_Input">Sample Input</h2><p>3 5<br>7 23 -5 -24 16<br>5 21 -4 10 23<br>-21 5 -4 -20 20</p>
<h2 id="Sample_Output">Sample Output</h2><p>53</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=1157" target="_blank" rel="noopener">http://poj.org/problem?id=1157</a></p>
<h1 id="解题思路">解题思路</h1><p>题目很长，简单的意思就是在一个F行V列的矩阵中找出在不同行不同列中的F个数字的最大和，并且还要满足条件，后一行的数所在的列必须大于该行的数所在的列。</p>
<p>一道经典的DP，使用的动态转移方程为：<code>dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + a[i][j])</code></p>
<p>前提条件必须要初始化<code>dp[i][i]</code>的值，这几个值不能在方程中初始化，如果在方程中初始化，就不能满足后一行的列数大于前一行的列数这个条件了。</p>
<h1 id="AC代码">AC代码</h1><p>220K/16MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>], dp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> F, V;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;F, &amp;V);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= F; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= V; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][i] = dp[i - <span class="number">1</span>][i - <span class="number">1</span>] + a[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= F; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= V; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[F][V]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1088 滑雪]]></title>
      <url>http://gyshgx868.github.io/2015/08/13/POJ/poj-1088/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Michael喜欢滑雪百这并不奇怪， 因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael想知道载一个区域中最长底滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子<br><a id="more"></a><br> 1  2  3  4 5</p>
<p>16 17 18 19 6</p>
<p>15 24 25 20 7</p>
<p>14 23 22 21 8</p>
<p>13 12 11 10 9</p>
<p>一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-…-3-2-1更长。事实上，这是最长的一条。</p>
<h2 id="Input">Input</h2><p>输入的第一行表示区域的行数R和列数C(1 &lt;= R,C &lt;= 100)。下面是R行，每行有C个整数，代表高度h，0&lt;=h&lt;=10000。</p>
<h2 id="Output">Output</h2><p>输出最长区域的长度。</p>
<h2 id="Sample_Input">Sample Input</h2><p>5 5<br>1 2 3 4 5<br>16 17 18 19 6<br>15 24 25 20 7<br>14 23 22 21 8<br>13 12 11 10 9</p>
<h2 id="Sample_Output">Sample Output</h2><p>25</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=1088" target="_blank" rel="noopener">http://poj.org/problem?id=1088</a></p>
<h1 id="解题思路">解题思路</h1><p>这道题一看就是DFS的题目，但是直接朴素的搜索会TLE。所以，我们就需要用到记忆化搜索了，一个简单的DP。<code>dp[x][y]</code>记录的是从点<code>(x, y)</code>出发最长的长度。每次搜索到相应的点的时候，如果改点存储的最大长度大于0的话，就直接返回这个点的最大长度，跳过这个点的搜索，这样就大大加快了时间。</p>
<p>这里所用到的动态转移方程为：<code>dp[x][y] = max(dfs(x - 1, y), dfs(x + 1, y), dfs(x, y - 1), dfs(x, y + 1)) + 1</code></p>
<p>这里+1的原因是将自己这个点本身也算进去。</p>
<h1 id="AC代码">AC代码</h1><p>220K/16MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>], dp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dp[x][y] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[x][y];</span><br><span class="line">    <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x][y] &gt; a[x][y - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            maxn = max(maxn, dfs(x, y - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y + <span class="number">1</span> &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x][y] &gt; a[x][y + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            maxn = max(maxn, dfs(x, y + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x][y] &gt; a[x - <span class="number">1</span>][y])</span><br><span class="line">        &#123;</span><br><span class="line">            maxn = max(maxn, dfs(x - <span class="number">1</span>, y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x + <span class="number">1</span> &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x][y] &gt; a[x + <span class="number">1</span>][y])</span><br><span class="line">        &#123;</span><br><span class="line">            maxn = max(maxn, dfs(x + <span class="number">1</span>, y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxn + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = dfs(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = max(ans, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下使用EasyBCD引导安装Ubuntu]]></title>
      <url>http://gyshgx868.github.io/2015/08/12/Ubuntu/easybcd-ubuntu/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>Ubuntu作为一款非常流行而又强大的操作系统，相信很多人都想安装一下。而安装Ubuntu系统的方法有很多种，例如U盘启动、光盘启动、GRUB引导法等等。这里我将介绍在Windows系统下用EasyBCD软件建立引导，然后安装Ubuntu的方法，这就不需要制作U盘启动盘那么麻烦，只需配置一些引导文件即可。<br><a id="more"></a></p>
<h1 id="所需工具">所需工具</h1><p>先去下载EasyBCD的安装包，百度直接搜就行，我使用的版本是2.2。</p>
<p>下载完EasyBCD之后，我们就去Ubuntu的官网（<a href="http://www.ubuntu.com/download/" target="_blank" rel="noopener">http://www.ubuntu.com/download/</a>）上下载安装映像，这里以15.04的32位版本为例。</p>
<h1 id="前期准备">前期准备</h1><p>首先将下载好的EasyBCD安装好，安装位置随意，运行之后有个语言的选择，选择简体中文就可以。接着再把下载好的Ubuntu映像复制到C盘的根目录下面（当然也可以放置到其他目录）。</p>
<p>然后，使用压缩软件（或者虚拟光驱软件）打开Ubuntu的安装映像，将安装映像中<code>casper</code>目录中的<code>initrd.lz</code>和<code>vmlinuz</code>两个文件（不同版本的操作系统映像名称可能会稍有不同，但是大体都是这两个名字，只是扩展名问题）也同时复制到C盘的根目录。<br><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-copy-file.png" alt="ubuntu-install-copy-file"></p>
<p>打开EasyBCD，就会看到如下界面：<br><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-easy-bcd.png" alt="ubuntu-install-easy-bcd"></p>
<p>选择<code>添加新条目</code>，然后选择<code>NeoGrub</code>，点击<code>安装</code>：<br><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-neogrub.png" alt="ubuntu-install-neogrub"></p>
<p>接着点击<code>配置</code>，在打开的记事本文件中，将原有内容替换为以下内容：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title Install Ubuntu</span><br><span class="line">root (hd0,0)</span><br><span class="line">kernel (hd0,0)/vmlinuz <span class="attribute">boot</span>=casper iso-scan/<span class="attribute">filename</span>=/ubuntu-15.04-desktop-i386.iso <span class="attribute">locale</span>=zh_CN.UTF-8</span><br><span class="line">initrd (hd0,0)/initrd.lz</span><br><span class="line">title reboot</span><br><span class="line">reboot</span><br><span class="line">title halt</span><br><span class="line">halt</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-notepad-edit.png" alt="ubuntu-install-notepad-edit"></p>
<p>完成后按下<code>Ctrl</code>+<code>S</code>保存，关掉就可以了。</p>
<p><strong>说明：</strong><code>hd0</code>表示C盘所处的硬盘号，一般电脑只有一个，所以都是<code>hd0</code>；如果有多个硬盘，则根据情况改为<code>hd0</code>、<code>hd1</code>等。</p>
<p>hd0后面的数字表示C盘在硬盘中的分区顺序，每个人的系统不大一样，不知道的可以在磁盘管理里面看一下。如果是第二个，写为<code>(hd0,1)</code>即可，依次后推。</p>
<p><strong>注意：</strong><code>initrd.lz</code>和<code>vmlinuz</code>就是刚刚复制到C盘根目录的两个文件，根据文件的名称自行修改。<code>ubuntu-15.04-desktop-i386.iso</code>代表的是C盘根目录下面的安装映像的名称，根据情况自行修改。</p>
<p>这样，相关的前期准备工作就做好了。</p>
<h1 id="安装Ubuntu">安装Ubuntu</h1><p>重启电脑，可以看到多了一个启动项<code>NeoGrub引导加载器</code>，选择该项然后回车，然后选择<code>install ubuntu</code>，另外两项分别是<code>reboot</code>和<code>halt</code>，作用分别是重启和关机，是为了防止安装出错而设的，这个在之前的menu.lst配置文件中已经设定好了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-multi-system.png" alt="ubuntu-install-multi-system"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-boot-menu.png" alt="ubuntu-install-boot-menu"></p>
<p>接下来，如果正常的话，会刷出一堆蛋疼的白字，等着它结束就行，好像要5分钟左右。如果在这一步报错，一般来说就是之前的menu.lst配置文件不对，很可能就是文件的名称配置的问题。这时只要<code>reboot</code>然后进入Windows重新配置就行。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-loading.png" alt="ubuntu-install-loading"></p>
<p>等到白字刷完之后，我们就进入到了Ubuntu的安装程序了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-installation-desktop.png" alt="ubuntu-install-installation-desktop"></p>
<p>此时进行最重要的一步，按下<code>Ctrl</code>+<code>Alt</code>+<code>T</code>打开终端，输入：<code>sudo umount -l /isodevice</code>（注意大小写问题和空格）</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-console.png" alt="ubuntu-install-console"></p>
<p>然后，我们关闭终端，就可以双击桌面上的<code>安装 Ubuntu 15.04</code>进行安装了。</p>
<p>安装程序运行之后，首先就是选择语言，选择一种常用的语言，这里选择<code>简体中文</code>，然后点击继续。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-select-language.png" alt="ubuntu-install-select-language"></p>
<p>然后，如果有网络的话，我们可以选择<code>安装中下载更新</code>和<code>安装这个第三方软件</code>，但是这样安装会比较慢，我这里两个都不选，点击继续。</p>
<p>接着我们就到了安装类型选择界面，选择<code>其他选项</code>，点击继续。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-install-type.png" alt="ubuntu-install-install-type"></p>
<p>接下来要设置分区，首先设置交换分区，分区的大小设置为电脑内存的大小或者电脑内存的两倍。注意，在Linux中1GB对应1000MB。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-swap.png" alt="ubuntu-install-swap"></p>
<p>然后设置其他的挂载点大小，分区的方案很多。但是由于我在虚拟机中进行演示，所以只设置一个/挂载点。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-disk-list.png" alt="ubuntu-install-disk-list"></p>
<p>接下来就是简单的设置时区、键盘布局和帐户信息，设置好了之后就可以进行安装了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-timezone.png" alt="ubuntu-install-timezone"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-keyboard-layout.png" alt="ubuntu-install-keyboard-layout"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-user.png" alt="ubuntu-install-user"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-processing.png" alt="ubuntu-install-processing"></p>
<p>安装好了之后，点击<code>现在重启</code>，就可以进入Ubuntu的GRUB启动菜单了，选择<code>Ubuntu</code>，就可以进入Ubuntu操作系统了。至此，Ubuntu的安装也结束了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-restart.png" alt="ubuntu-install-restart"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-grub.png" alt="ubuntu-install-grub"></p>
<h1 id="后续工作">后续工作</h1><p>最后，我们在重启系统，进入到Windows操作系统，再次点开EasyBCD，把<code>NeoGrub</code>引导项删除，然后把C盘复制的Ubuntu安装映像文件和<code>initrd.lz</code>、<code>vmlinuz</code>两个文件删掉就行了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-del-neogrub.png" alt="ubuntu-install-del-neogrub"></p>
<h1 id="参考资料">参考资料</h1><p>百度经验：<a href="http://jingyan.baidu.com/article/e4d08ffdace06e0fd2f60d39.html" target="_blank" rel="noopener">win7下通过easyBCD引导安装Ubuntu14.04</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装Windows 7过程如何不产生100MB分区]]></title>
      <url>http://gyshgx868.github.io/2015/08/11/Windows/win-install-partition/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>如果是对一块新的磁盘或者删除原有的分区进行重新安装Windows 7及其以上的操作系统时候，使用安装程序提供的磁盘分区选项分区的时候，就会出现一个100MB的保留分区。<br><a id="more"></a><br>这100MB的分区的作用如下：</p>
<ul>
<li>BitLocker的规定，引导文件和Windows文件要分开；</li>
<li>此系统分区可以使用实用软件，如备份，支持双启动的情况；</li>
<li>如果启动文件保存在系统分区，很容易因为系统分区上的重装活动，而格式化丢失这些启动文件；</li>
<li>该驱动器没有盘符可以很好的的阻止意外删除引导文件。</li>
</ul>
<p>但同时，这100MB的分区也带来了如下的弊端：</p>
<ul>
<li>不能使用GHOST版系统光盘来安装Windows操作系统，仅能使用安装版的进行一步一步地安装；</li>
<li>安装完系统后，不能使用Wingho、OneKey Ghost等一键还原类的软件进行备份系统；</li>
<li>Norton Partition Magic无法正常使用，如果你尝试修复这100MB分区，会导致已安装的Windows无法引导；</li>
<li>使用100MB的分区，不容易安装Ubuntu + Windows双系统。</li>
</ul>
<h1 id="方法">方法</h1><p>首先，先运行Windows的安装程序进行全新安装，直到下面的界面：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-disk.png" alt="win-install-disk"></p>
<p>这时候，不能够使用磁盘工具的格式化选项，我们需要使用命令行手动进行分区，按下<code>Shift</code>+<code>F10</code>进入到下面的界面：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-shift-f10.png" alt="win-install-shift-f10"></p>
<p>此时输入<code>diskpart</code>，接下来显示出来的就是diskpart分区工具的版本等信息：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-diskpart.png" alt="win-install-diskpart"></p>
<p>再输入<code>list disk</code>命令，然后就列出了当前计算机的物理磁盘的信息：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-list-disk.png" alt="win-install-list-disk"></p>
<p>输入<code>select disk 0</code>，选择你要安装操作系统的物理磁盘（我这里只有一块磁盘，所以选择了0）：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-select-disk-0.png" alt="win-install-select-disk-0"></p>
<p>输入<code>clean</code>命令清除物理磁盘的所有信息，接着输入<code>create partition primary size=20480</code>创建主磁盘分区，也就是传说中的C盘。</p>
<p>其中<code>create partition</code>表示创建分区；<code>primary</code>表示创建是主分区，如果这个位置是<code>logical</code>则表示逻辑分区，<code>extended</code>表示扩展分区；<code>size</code>表示分区大小，单位MB。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-create-partition-primary.png" alt="win-install-create-partition-primary"></p>
<p>输入<code>active</code>把主分区激活。为什么要激活？因为，激活后分区信息和唯一的活动分区标记会写入硬盘分区表，这样当启动电脑时BIOS会检测主分区的操作系统（io.sys文件），然后操作系统开始控制启动权。</p>
<p>激活之后输入<code>format</code>命令，将分区格式化。至此，主磁盘分区就创建完毕了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-format.png" alt="win-install-format"></p>
<p>最后输入<code>create partition extended</code>将剩余的空间全部创建为扩展分区，再输入命令<code>create partition logical</code>，将扩展分区的全部剩余空间创建为一个逻辑分区，你也可以指定<code>size</code>参数，将剩余空间创建出多个逻辑分区。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-create-partition-extended.png" alt="win-install-create-partition-extended"></p>
<p>这时候，所有的分区就全部创建完毕了，可以关闭命令行窗口，然后点击刷新，就可以执行下一步的Windows安装了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-diskpart-complete.png" alt="win-install-dispart-complete"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 485C Bits]]></title>
      <url>http://gyshgx868.github.io/2015/08/11/CodeForces/cf-485c/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Let’s denote as <strong>popcount($x$)</strong> the number of bits set (‘1’ bits) in the binary representation of the non-negative integer $x$.</p>
<p>You are given multiple queries consisting of pairs of integers $l$ and $r$. For each query, find the $x$, such that $l$ ≤ $x$ ≤ $r$, and <strong>popcount($x$)</strong> is maximum possible. If there are multiple such numbers find the smallest of them.<br><a id="more"></a></p>
<h2 id="Input">Input</h2><p>The first line contains integer $n$ — the number of queries (1 ≤ $n$ ≤ 10000).</p>
<p>Each of the following $n$ lines contain two integers $l_i$, $r_i$ — the arguments for the corresponding query (0 ≤ $l_i$ ≤ $r_i$ ≤ $10^{18}$).</p>
<h2 id="Output">Output</h2><p>For each query print the answer in a separate line.</p>
<h2 id="Sample_test(s)">Sample test(s)</h2><table>
<thead>
<tr>
<th>input</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
</tr>
<tr>
<td>1 2</td>
</tr>
<tr>
<td>2 4</td>
</tr>
<tr>
<td>1 10</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
</tr>
<tr>
<td>3</td>
</tr>
<tr>
<td>7</td>
</tr>
</tbody>
</table>
<h2 id="Note">Note</h2><p>The binary representations of numbers from 1 to 10 are listed below:</p>
<p>$1_{10} = 1_2$</p>
<p>$2_{10} = 10_2$</p>
<p>$3_{10} = 11_2$</p>
<p>$4_{10} = 100_2$</p>
<p>$5_{10} = 101_2$</p>
<p>$6_{10} = 110_2$</p>
<p>$7_{10} = 111_2$</p>
<p>$8_{10} = 1000_2$</p>
<p>$9_{10} = 1001_2$</p>
<p>$10_{10} = 1010_2$</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://codeforces.com/problemset/problem/485/C" target="_blank" rel="noopener">http://codeforces.com/problemset/problem/485/C</a></p>
<h1 id="解题思路">解题思路</h1><p>题目大意是给定一个区间[l, r]，求这个区间里的数在转化为二进制的情况下，1的个数最多的数字；同时，当1的个数相同的时候，输出数最小的那个。</p>
<p>首先设置一个数组，用来存储1、10、100、1000这些二进制数，然后对这些数进行累加，直到大于等于r为止。此时的sum就是1的个数最多的那个数，但是有可能不在这个区间中，所以我们需要进行判断。假如他大于r的话，就减去最后相加的那个数，这样可以保证得出的结果是区间中1最多的但是数值最小的。</p>
<h1 id="AC代码">AC代码</h1><p>31 ms/0 KB/GNU C++<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;cstdio&gt;</span></span><br><span class="line">typedef long long <span class="keyword">ll;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">ll </span><span class="keyword">bit[65];</span></span><br><span class="line"><span class="keyword">int </span>main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">bit[0] </span>= <span class="number">1</span><span class="comment">;</span></span><br><span class="line">    for (int i = <span class="number">1</span><span class="comment">; i &lt;= 63; i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bit[i] </span>= <span class="number">2</span> * <span class="keyword">bit[i </span>- <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    int t<span class="comment">;</span></span><br><span class="line">    <span class="keyword">ll </span>l, r, sum<span class="comment">;</span></span><br><span class="line">    <span class="keyword">scanf("%d", </span>&amp;t)<span class="comment">;</span></span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        <span class="keyword">scanf("%I64d%I64d", </span>&amp;l, &amp;r)<span class="comment">;</span></span><br><span class="line">        int i<span class="comment">;</span></span><br><span class="line">        for (i = <span class="number">0</span><span class="comment">; sum &lt;= r; i++)</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += <span class="keyword">bit[i];</span></span><br><span class="line"><span class="keyword"> </span>       &#125;</span><br><span class="line">        i--<span class="comment">;</span></span><br><span class="line">        while (sum &gt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            sum -= <span class="keyword">bit[i];</span></span><br><span class="line"><span class="keyword"> </span>           if (sum &lt; l)</span><br><span class="line">                sum += <span class="keyword">bit[i];</span></span><br><span class="line"><span class="keyword"> </span>           i--<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"%I64d\n"</span>, sum)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4289 Control]]></title>
      <url>http://gyshgx868.github.io/2015/08/06/HDU/hdu-4289/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>You, the head of Department of Security, recently received a top-secret information that a group of terrorists is planning to transport some WMD $^1$ from one city (the source) to another one (the destination). You know their date, source and destination, and they are using the highway network.<br><a id="more"></a><br>The highway network consists of bidirectional highways, connecting two distinct city. A vehicle can only enter/exit the highway network at cities only. </p>
<p>You may locate some SA (special agents) in some selected cities, so that when the terrorists enter a city under observation (that is, SA is in this city), they would be caught immediately. </p>
<p>It is possible to locate SA in all cities, but since controlling a city with SA may cost your department a certain amount of money, which might vary from city to city, and your budget might not be able to bear the full cost of controlling all cities, you must identify a set of cities, that: </p>
<ul>
<li>all traffic of the terrorists must pass at least one city of the set. </li>
<li>sum of cost of controlling all cities in the set is minimal. </li>
</ul>
<p>You may assume that it is always possible to get from source of the terrorists to their destination. </p>
<p>$^1$ Weapon of Mass Destruction</p>
<h2 id="Input">Input</h2><p>There are several test cases.<br>The first line of a single test case contains two integer N and M (2 &lt;= N &lt;= 200; 1 &lt;= M &lt;= 20000), the number of cities and the number of highways. Cities are numbered from 1 to N.<br>The second line contains two integer S,D (1 &lt;= S,D &lt;= N), the number of the source and the number of the destination.<br>The following N lines contains costs. Of these lines the ith one contains exactly one integer, the cost of locating SA in the ith city to put it under observation. You may assume that the cost is positive and not exceeding 10 7.<br>The followingM lines tells you about highway network. Each of these lines contains two integers A and B, indicating a bidirectional highway between A and B.<br>Please process until EOF (End Of File). </p>
<h2 id="Output">Output</h2><p>For each test case you should output exactly one line, containing one integer, the sum of cost of your selected set.<br>See samples for detailed information.</p>
<h2 id="Sample_Input">Sample Input</h2><p>5 6<br>5 3<br>5<br>2<br>3<br>4<br>12<br>1 5<br>5 4<br>2 3<br>2 4<br>4 3<br>2 1</p>
<h2 id="Sample_Output">Sample Output</h2><p>3</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4289" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4289</a></p>
<h1 id="解题思路">解题思路</h1><p>题意就是有恐怖分子要袭击城市，你可已在城市中设置一些SA来抓捕他们，每放置一个SA都需要相对应的金钱，但是由于你的预算问题不能在所有的城市中都放置SA，现在求的是抓捕全部的恐怖分子所花费的最少费用。<br>将每个城市拆成两个点，两点之间的权值就是安装SA的费用，然后将不同城市之间的流量设为无穷大，这样就能保证流量只受拆点边的限制。边建好之后就能跑一遍Dinic了。</p>
<h1 id="AC代码">AC代码</h1><p>78MS/2556K/G++<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cstring&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#define inf 0x3f3f3f3f</span></span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">const int maxn = <span class="number">100005</span><span class="comment">;</span></span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    int to, c, next<span class="comment">;</span></span><br><span class="line">&#125; e[maxn * <span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">int src, sink, cnt<span class="comment">;</span></span><br><span class="line">int head[<span class="number">1000</span>]<span class="comment">;</span></span><br><span class="line">void <span class="keyword">adde(int </span>a, int <span class="keyword">b, </span>int c)</span><br><span class="line">&#123;</span><br><span class="line">    e[cnt].to = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   e[cnt].c = c<span class="comment">;</span></span><br><span class="line">    e[cnt].next = head[a]<span class="comment">;</span></span><br><span class="line">    head[a] = cnt++<span class="comment">;</span></span><br><span class="line">    e[cnt].to = a<span class="comment">;</span></span><br><span class="line">    e[cnt].c = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    e[cnt].next = head[<span class="keyword">b];</span></span><br><span class="line"><span class="keyword"> </span>   head[<span class="keyword">b] </span>= cnt++<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int vis[<span class="number">1000</span>], <span class="keyword">dis[1000];</span></span><br><span class="line"><span class="keyword">int </span>cur[<span class="number">1000</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">bool </span><span class="keyword">BFS()</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"> </span>   memset(<span class="keyword">dis, </span>-<span class="number">1</span>, sizeof(<span class="keyword">dis));</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">dis[src] </span>= <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    queue&lt;int&gt; que<span class="comment">;</span></span><br><span class="line">    que.push(src)<span class="comment">;</span></span><br><span class="line">    while (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int <span class="keyword">j </span>= que.front()<span class="comment">;</span></span><br><span class="line">        que.pop()<span class="comment">;</span></span><br><span class="line">        for (int k = head[<span class="keyword">j]; </span>k != -<span class="number">1</span><span class="comment">; k = e[k].next)</span></span><br><span class="line">        &#123;</span><br><span class="line">            int i = e[k].to<span class="comment">;</span></span><br><span class="line">            if (<span class="keyword">dis[i] </span>== -<span class="number">1</span> &amp;&amp; e[k].c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">dis[i] </span>= <span class="keyword">dis[j] </span>+ <span class="number">1</span> <span class="comment">;</span></span><br><span class="line">                que.push(i)<span class="comment">;</span></span><br><span class="line">                if (i == sink) return true<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int DFS(int x, int mx)</span><br><span class="line">&#123;</span><br><span class="line">    if (x == sink <span class="title">||</span> mx == <span class="number">0</span>) return mx<span class="comment">;</span></span><br><span class="line">    int f, flow = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    for (int&amp; i = cur[x]<span class="comment">; i != -1; i = e[i].next)</span></span><br><span class="line">    &#123;</span><br><span class="line">        if (<span class="keyword">dis[x] </span>+ <span class="number">1</span> == <span class="keyword">dis[e[i].to] </span>&amp;&amp; (f = DFS(e[i].to, min(mx, e[i].c))))</span><br><span class="line">        &#123;</span><br><span class="line">            e[i].c -= f<span class="comment">;</span></span><br><span class="line">            e[i ^ <span class="number">1</span>].c += f<span class="comment">;</span></span><br><span class="line">            flow += f<span class="comment">;</span></span><br><span class="line">            mx -= f<span class="comment">;</span></span><br><span class="line">            if (!mx) <span class="keyword">break;</span></span><br><span class="line"><span class="keyword"> </span>       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return flow<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="keyword">dinic()</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"> </span>   int tmp = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    int maxflow = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    while (<span class="keyword">BFS())</span></span><br><span class="line"><span class="keyword"> </span>   &#123;</span><br><span class="line">        for (int i = src<span class="comment">; i &lt;= sink; i++)</span></span><br><span class="line">            cur[i] = head[i]<span class="comment">;</span></span><br><span class="line">        while (tmp = DFS(src, inf))</span><br><span class="line">            maxflow += tmp<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return maxflow<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m, s, t, x, y<span class="comment">;</span></span><br><span class="line">    while (~<span class="keyword">scanf("%d%d", </span>&amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        memset(head, -<span class="number">1</span>, sizeof(head))<span class="comment">;</span></span><br><span class="line">        <span class="keyword">scanf("%d%d", </span>&amp;s, &amp;t)<span class="comment">;</span></span><br><span class="line">        src = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        sink = <span class="number">2</span> * n + <span class="number">1</span><span class="comment">;</span></span><br><span class="line">        <span class="keyword">adde(src, </span>s, inf)<span class="comment">;</span></span><br><span class="line">        <span class="keyword">adde(n </span>+ t, sink, inf)<span class="comment">;</span></span><br><span class="line">        for (int i = <span class="number">1</span><span class="comment">; i &lt;= n; i++)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">scanf("%d", </span>&amp;x)<span class="comment">;</span></span><br><span class="line">            <span class="keyword">adde(i, </span>i + n, x)<span class="comment">;</span></span><br><span class="line">            <span class="keyword">adde(i </span>+ n, i, x)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = <span class="number">1</span><span class="comment">; i &lt;= m; i++)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">scanf("%d%d", </span>&amp;x, &amp;y)<span class="comment">;</span></span><br><span class="line">            <span class="keyword">adde(x </span>+ n, y, inf)<span class="comment">;</span></span><br><span class="line">            <span class="keyword">adde(y </span>+ n, x, inf)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"%d\n"</span>, <span class="keyword">dinic());</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">    return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3281 Dining]]></title>
      <url>http://gyshgx868.github.io/2015/08/06/POJ/poj-3281/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Cows are such finicky eaters. Each cow has a preference for certain foods and drinks, and she will consume no others.</p>
<p>Farmer John has cooked fabulous meals for his cows, but he forgot to check his menu against their preferences. Although he might not be able to stuff everybody, he wants to give a complete meal of both food and drink to as many cows as possible.<br><a id="more"></a><br>Farmer John has cooked F (1 ≤ F ≤ 100) types of foods and prepared D (1 ≤ D ≤ 100) types of drinks. Each of his N (1 ≤ N ≤ 100) cows has decided whether she is willing to eat a particular food or drink a particular drink. Farmer John must assign a food type and a drink type to each cow to maximize the number of cows who get both.</p>
<p>Each dish or drink can only be consumed by one cow (i.e., once food type 2 is assigned to a cow, no other cow can be assigned food type 2).</p>
<h2 id="Input">Input</h2><p>Line 1: Three space-separated integers: N, F, and D<br>Lines 2.. N+1: Each line i starts with a two integers Fi and Di, the number of dishes that cow i likes and the number of drinks that cow i likes. The next Fi integers denote the dishes that cow i will eat, and the Di integers following that denote the drinks that cow i will drink.</p>
<h2 id="Output">Output</h2><p>Line 1: A single integer that is the maximum number of cows that can be fed both food and drink that conform to their wishes</p>
<h2 id="Sample_Input">Sample Input</h2><p>4 3 3<br>2 2 1 2 3 1<br>2 2 2 3 1 2<br>2 2 1 3 1 2<br>2 1 1 3 3</p>
<h2 id="Sample_Output">Sample Output</h2><p>3</p>
<h2 id="Hint">Hint</h2><p>One way to satisfy three cows is:<br>Cow 1: no meal<br>Cow 2: Food #2, Drink #2<br>Cow 3: Food #1, Drink #1<br>Cow 4: Food #3, Drink #3<br>The pigeon-hole principle tells us we can do no better since there are only three kinds of food or drink. Other test data sets are more challenging, of course.</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=3281" target="_blank" rel="noopener">http://poj.org/problem?id=3281</a></p>
<h1 id="解题思路">解题思路</h1><p>题意是说有n头牛，f种食物和d种饮料，每种食物和饮料数量都是1。每头牛都有自己喜欢的食物和饮料，问要怎么分配食物和饮料才能使得尽量多的牛都能得到自己喜欢的。<br>经典的网络流拆点问题，但是由于刚刚接触网络流算法，对他的思想理解的还不是很深。这类题目的难点就是模型的建立，如何构造一个合理的图，然后执行网络流算法得出正确结论。下面就先说一下这题的建图思路：<br>普通建图一般都是源点与供应相连接，汇点与需求相连接，可是此题中有两种供应食物和饮料。因为只有牛与食物和饮料都有关系，而食物和饮料之间没有必然联系，所以可以用牛将这两种供应串起来，即建图就变为：源点-&gt;食物-&gt;牛-&gt;饮料-&gt;汇点。可是为什么不是将源点与牛相连，牛与食物和饮料相连呢？因为一旦是这种连法的话，即：源点-&gt;牛-&gt;食物和饮料-&gt;汇点，这样的话就会导致多头牛用到同一个食物。<br>如果要是按照源点-&gt;食物-&gt;牛-&gt;饮料-&gt;汇点这样建图的话，还有一点点小问题，就是会发生同一头牛对应多种食物和多种水的情况下，会有多条路成立，导致了结果的错误。所以，要将拆点：源点-&gt;食物-&gt;牛-&gt;牛-&gt;饮料-&gt;汇点，将牛和牛的权值设为1，这样，一旦有一条路成立，这条权值为1的边就会占用，这样其他的和这头牛对应的路就不会算在内了。</p>
<h1 id="AC代码">AC代码</h1><p>220K/16MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, F, D;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, c, next;</span><br><span class="line">&#125; e[maxn * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> st, ed, cnt;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt].to = b;</span><br><span class="line">    e[cnt].c = c;</span><br><span class="line">    e[cnt].next = head[a];</span><br><span class="line">    head[a] = cnt++;</span><br><span class="line">    e[cnt].to = a;</span><br><span class="line">    e[cnt].c = <span class="number">0</span>;</span><br><span class="line">    e[cnt].next = head[b];</span><br><span class="line">    head[b] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1000</span>], dis[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> cur[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[st] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(st);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = head[j]; k != <span class="number">-1</span>; k = e[k].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i = e[k].to;</span><br><span class="line">            <span class="keyword">if</span> (dis[i] == <span class="number">-1</span> &amp;&amp; e[k].c)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i] = dis[j] + <span class="number">1</span> ;</span><br><span class="line">                que.push(i);</span><br><span class="line">                <span class="keyword">if</span>(i == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == ed || mx == <span class="number">0</span>) <span class="keyword">return</span> mx;</span><br><span class="line">    <span class="keyword">int</span> f, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = cur[x]; i != <span class="number">-1</span>; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[x] + <span class="number">1</span> == dis[e[i].to] &amp;&amp; (f = DFS(e[i].to, min(mx, e[i].c))))</span><br><span class="line">        &#123;</span><br><span class="line">            e[i].c -= f;</span><br><span class="line">            e[i ^ <span class="number">1</span>].c += f;</span><br><span class="line">            flow += f;</span><br><span class="line">            mx -= f;</span><br><span class="line">            <span class="keyword">if</span> (!mx) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (BFS())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = st; i &lt;= ed; i++)</span><br><span class="line">            cur[i] = head[i];</span><br><span class="line">        <span class="keyword">while</span> (tmp = DFS(st, inf))</span><br><span class="line">            maxflow += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> food, drink, x;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;N, &amp;F, &amp;D))</span><br><span class="line">    &#123;</span><br><span class="line">        st = <span class="number">0</span>;</span><br><span class="line">        ed = F + N * <span class="number">2</span> + D + <span class="number">1</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;food, &amp;drink);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= food; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                add(x, F + i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= drink; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                add(F + N + i, F + N * <span class="number">2</span> + x, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= F; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            add(st, i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= D; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            add(F + N * <span class="number">2</span> + i, ed, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            add(F + i, F + N + i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dinic());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2536 Gopher II]]></title>
      <url>http://gyshgx868.github.io/2015/08/04/POJ/poj-2536/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>The gopher family, having averted the canine threat, must face a new predator. </p>
<p>The are n gophers and m gopher holes, each at distinct (x, y) coordinates. A hawk arrives and if a gopher does not reach a hole in s seconds it is vulnerable to being eaten. A hole can save at most one gopher. All the gophers run at the same velocity v. The gopher family needs an escape strategy that minimizes the number of vulnerable gophers.<br><a id="more"></a></p>
<h2 id="Input">Input</h2><p>The input contains several cases. The first line of each case contains four positive integers less than 100: n, m, s, and v. The next n lines give the coordinates of the gophers; the following m lines give the coordinates of the gopher holes. All distances are in metres; all times are in seconds; all velocities are in metres per second.</p>
<h2 id="Output">Output</h2><p>Output consists of a single line for each case, giving the number of vulnerable gophers.</p>
<h2 id="Sample_Input">Sample Input</h2><p>2 2 5 10<br>1.0 1.0<br>2.0 2.0<br>100.0 100.0<br>20.0 20.0</p>
<h2 id="Sample_Output">Sample Output</h2><p>1</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=2536" target="_blank" rel="noopener">http://poj.org/problem?id=2536</a></p>
<h1 id="解题思路">解题思路</h1><p>题目的大意就是有n只地鼠，m个洞，有一只老鹰，飞到地面的时间是s，地鼠移动的速度是v，询问有几只地鼠会被吃掉。<br>就是一道简单的二分图模板题。将每只地鼠分别和每个洞进行匹配，算出来的距离除以地鼠移动的速度得出来的时间如果小于s的话，证明地鼠躲在该洞里可以生存，可以建一条边。最后跑一下二分图的模板，算一下最大匹配，算出来的是有多少只地鼠可以匹配到洞，用地鼠的总数量减一下就行了。</p>
<h1 id="AC代码">AC代码</h1><p>4096K/125MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125; p[<span class="number">205</span>], q[<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(point a, point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> g[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> linker[MAXN];</span><br><span class="line"><span class="keyword">bool</span> used[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[u][v] &amp;&amp; !used[v])</span><br><span class="line">        &#123;</span><br><span class="line">            used[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (linker[v] == <span class="number">-1</span> || dfs(linker[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                linker[v] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(linker, <span class="number">-1</span>, <span class="keyword">sizeof</span>(linker));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= m; u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">if</span> (dfs(u)) res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> s, v;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%lf%lf"</span>, &amp;n, &amp;m, &amp;s, &amp;v))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span>(g));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">double</span> dis = dist(p[i], q[j]);</span><br><span class="line">                <span class="keyword">if</span> (dis / v &lt;= s)</span><br><span class="line">                &#123;</span><br><span class="line">                    g[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - hungary());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1986 Distance Queries]]></title>
      <url>http://gyshgx868.github.io/2015/07/31/POJ/poj-1986/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Farmer John’s cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in “Navigation Nightmare”,followed by a line containing a single integer K, followed by K “distance queries”. Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ’s distance queries as quickly as possible!<br><a id="more"></a></p>
<h2 id="Input">Input</h2><ul>
<li><p>Lines 1..1+M: Same format as “Navigation Nightmare” </p>
</li>
<li><p>Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000 </p>
</li>
<li><p>Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms. </p>
</li>
</ul>
<h2 id="Output">Output</h2><ul>
<li>Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance. </li>
</ul>
<h2 id="Sample_Input">Sample Input</h2><p>7 6<br>1 6 13 E<br>6 3 9 E<br>3 5 7 S<br>4 1 3 N<br>2 4 20 W<br>4 7 2 S<br>3<br>1 6<br>1 4<br>2 6</p>
<h2 id="Sample_Output">Sample Output</h2><p>13<br>3<br>36</p>
<h2 id="Hint">Hint</h2><p>Farms 2 and 6 are 20+3+13=36 apart.</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=1986" target="_blank" rel="noopener">http://poj.org/problem?id=1986</a></p>
<h1 id="解题思路">解题思路</h1><p>LCA的模板题，我分别用了Tarjan离线算法和在线算法。离线算法将所有的结果都保存起来了，所以耗时是在线算法的5倍。目前还没有完全理解LCA的相关算法，在这里只是Mark一下。</p>
<h1 id="AC代码（离线算法）">AC代码（离线算法）</h1><p>21440K/1563MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> d;   <span class="comment">//存储距离</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[maxn], ans[maxn], vis[maxn], f[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; V[maxn], query[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] != x) f[x] = find(f[x]);</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>, f[u] = u, dis[u] = d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = query[u].begin(); it != query[u].end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[(*it).x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = (*it).x, w = (*it).d;</span><br><span class="line">            ans[w] = dis[u] + dis[v] - <span class="number">2</span> * dis[find(v)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = V[u].begin(); it != V[u].end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[(*it).x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = (*it).x, w = (*it).d;</span><br><span class="line">            dfs(v, d + w);</span><br><span class="line">            f[v] = u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line">        node tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>, &amp;a, &amp;b, &amp;tmp.d, str);</span><br><span class="line">            tmp.x = b;</span><br><span class="line">            V[a].push_back(tmp);</span><br><span class="line">            tmp.x = a;</span><br><span class="line">            V[b].push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            tmp.d = i, tmp.x = b;</span><br><span class="line">            query[a].push_back(tmp);</span><br><span class="line">            tmp.x = a;</span><br><span class="line">            query[b].push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="AC代码（在线算法）">AC代码（在线算法）</h1><p>6124K/250MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, next, w;</span><br><span class="line">&#125; edge[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], cnt, fa[MAXN][<span class="number">20</span>], dep[MAXN], dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt].w = w;</span><br><span class="line">    edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pre, <span class="keyword">int</span> depth, <span class="keyword">int</span> distance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[now][<span class="number">0</span>] = pre;</span><br><span class="line">    dep[now] = depth;</span><br><span class="line">    dis[now] = distance;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        fa[now][i] = fa[fa[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> next = edge[i].v, w = edge[i].w;</span><br><span class="line">        <span class="keyword">if</span> (next != pre) dfs(next, now, depth + w, distance + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[x] &gt; dis[y])</span><br><span class="line">    &#123;</span><br><span class="line">        x ^= y;</span><br><span class="line">        y ^= x;</span><br><span class="line">        x ^= y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[y] - dis[x] &amp; (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">        &#123;</span><br><span class="line">            y = fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i] == fa[y][i]) <span class="keyword">continue</span>;</span><br><span class="line">        x = fa[x][i];</span><br><span class="line">        y = fa[y][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, q;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>, &amp;a, &amp;b, &amp;c, str);</span><br><span class="line">            add_edge(a, b, c);</span><br><span class="line">            add_edge(b, a, c);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">int</span> dis = dep[a] + dep[b] - <span class="number">2</span> * dep[LCA(a, b)];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2299 Ultra-QuickSort]]></title>
      <url>http://gyshgx868.github.io/2015/07/30/POJ/poj-2299/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>In this problem, you have to analyze a particular sorting algorithm. The algorithm processes a sequence of n distinct integers by swapping two adjacent sequence elements until the sequence is sorted in ascending order. For the input sequence<br><a id="more"></a><br>9 1 0 5 4 ,</p>
<p>Ultra-QuickSort produces the output<br>0 1 4 5 9 .</p>
<p><img src="http://poj.org/images/2299_1.jpg" alt="POJ2299"></p>
<p>Your task is to determine how many swap operations Ultra-QuickSort needs to perform in order to sort a given input sequence.</p>
<h2 id="Input">Input</h2><p>The input contains several test cases. Every test case begins with a line that contains a single integer n &lt; 500,000 — the length of the input sequence. Each of the the following n lines contains a single integer 0 ≤ a[i] ≤ 999,999,999, the i-th input sequence element. Input is terminated by a sequence of length n = 0. This sequence must not be processed.</p>
<h2 id="Output">Output</h2><p>For every input sequence, your program prints a single line containing an integer number op, the minimum number of swap operations necessary to sort the given input sequence.</p>
<h2 id="Sample_Input">Sample Input</h2><p>5<br>9<br>1<br>0<br>5<br>4<br>3<br>1<br>2<br>3<br>0</p>
<h2 id="Sample_Output">Sample Output</h2><p>6<br>0</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=2299" target="_blank" rel="noopener">http://poj.org/problem?id=2299</a></p>
<h1 id="解题思路">解题思路</h1><p>一道比较简单的题，就是求逆序数。有树状数组和归并排序两种解法，下面给出了树状数组的解法，树状数组这次用结构体搞的。</p>
<h1 id="AC代码">AC代码</h1><p>11324K/625MS/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Number</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll num;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125; num[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Number a, <span class="keyword">const</span> Number b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.num &gt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">ll bit[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N; j += lowbit(j))</span><br><span class="line">    &#123;</span><br><span class="line">        bit[j] += delta;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt; <span class="number">0</span>; i -= lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt += bit[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) &amp;&amp; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;num[i].num);</span><br><span class="line">            num[i].index = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(num + <span class="number">1</span>, num + <span class="number">1</span> + N, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += sum(num[i].index);</span><br><span class="line">            update(num[i].index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2528 Mayor's posters]]></title>
      <url>http://gyshgx868.github.io/2015/07/30/POJ/poj-2528/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>The citizens of Bytetown, AB, could not stand that the candidates in the mayoral election campaign have been placing their electoral posters at all places at their whim. The city council has finally decided to build an electoral wall for placing the posters and introduce the following rules:<br><a id="more"></a></p>
<ul>
<li>Every candidate can place exactly one poster on the wall. </li>
<li>All posters are of the same height equal to the height of the wall; the width of a poster can be any integer number of bytes (byte is the unit of length in Bytetown). </li>
<li>The wall is divided into segments and the width of each segment is one byte. </li>
<li>Each poster must completely cover a contiguous number of wall segments.</li>
</ul>
<p>They have built a wall 10000000 bytes long (such that there is enough place for all candidates). When the electoral campaign was restarted, the candidates were placing their posters on the wall and their posters differed widely in width. Moreover, the candidates started placing their posters on wall segments already occupied by other posters. Everyone in Bytetown was curious whose posters will be visible (entirely or in part) on the last day before elections.<br>Your task is to find the number of visible posters when all the posters are placed given the information about posters’ size, their place and order of placement on the electoral wall. </p>
<h2 id="Input">Input</h2><p>The first line of input contains a number c giving the number of cases that follow. The first line of data for a single case contains number 1 &lt;= n &lt;= 10000. The subsequent n lines describe the posters in the order in which they were placed. The i-th line among the n lines contains two integer numbers l i and ri which are the number of the wall segment occupied by the left end and the right end of the i-th poster, respectively. We know that for each 1 &lt;= i &lt;= n, 1 &lt;= l i &lt;= ri &lt;= 10000000. After the i-th poster is placed, it entirely covers all wall segments numbered l i, l i+1 ,… , ri.</p>
<h2 id="Output">Output</h2><p>For each input data set print the number of visible posters after all the posters are placed. </p>
<p>The picture below illustrates the case of the sample input.<br><img src="http://poj.org/images/2528_1.jpg" alt="POJ2528"></p>
<h2 id="Sample_Input">Sample Input</h2><p>1<br>5<br>1 4<br>2 6<br>8 10<br>3 4<br>7 10</p>
<h2 id="Sample_Output">Sample Output</h2><p>4</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=2528" target="_blank" rel="noopener">http://poj.org/problem?id=2528</a></p>
<h1 id="解题思路">解题思路</h1><p>这个是个字典树的题目，但是想了想，使用结构体先存储一下每张海报的信息，然后再离散一下使用数组存储一下每张海报出现的区间，后输入的区间把已经输入的区间的覆盖掉就可以，最后统计一下出现的不同数字的个数，最后就可以通过了。</p>
<h1 id="AC代码">AC代码</h1><p>684K/891MS/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poster</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> first, second;</span><br><span class="line">&#125; p[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>], sum[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p[i].first, &amp;p[i].second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">2</span> * i - <span class="number">1</span>] = p[i].first;</span><br><span class="line">            a[<span class="number">2</span> * i] = p[i].second;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">2</span> * n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pos = unique(a + <span class="number">1</span>, a + <span class="number">1</span> + <span class="number">2</span> * n) - a - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = query(p[i].first, pos), b = query(p[i].second, pos);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = a; j &lt;= b; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum[j] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pos; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[sum[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                vis[sum[i]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4911 Inversion]]></title>
      <url>http://gyshgx868.github.io/2015/07/30/HDU/hdu-4911/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>bobo has a sequence $a_1$,$a_2$,…,$a_n$. He is allowed to swap two <strong>adjacent</strong> numbers for no more than k times.</p>
<p>Find the minimum number of inversions after his swaps.</p>
<p>Note: The number of inversions is the number of pair (i,j) where 1≤i<j≤n and="" $a_i$="">$a_j$.<br><a id="more"></a></j≤n></p>
<h2 id="Input">Input</h2><p>The input consists of several tests. For each tests:</p>
<p>The first line contains 2 integers n,k (1≤n≤$10^5$,0≤k≤$10^9$). The second line contains n integers a1,a2,…,an (0≤$a_i$≤$10^9$).</p>
<h2 id="Output">Output</h2><p>For each tests: </p>
<p>A single integer denotes the minimum number of inversions.</p>
<h2 id="Sample_Input">Sample Input</h2><p>3 1<br>2 2 1<br>3 0<br>2 2 1</p>
<h2 id="Sample_Output">Sample Output</h2><p>1<br>2</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4911" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4911</a></p>
<h1 id="解题思路">解题思路</h1><p>就是求逆序数，询问的是交换任意两个相邻的元素K次，使逆序数最大，最后输出最大的逆序数。</p>
<p>根据一个神奇的定理：<strong>如果逆序数大于0，那么必定存在1 &lt;= i &lt; n使得i和i + 1交换后逆序数减1</strong>。假设原逆序数为ans，这样的话，我们就可以得到答案是<code>max(ans - k, 0)</code>。</p>
<p>下面给出了两种做法，一种做法就是归并排序法（<a href="http://blog.csdn.net/cpfeed/article/details/6751831" target="_blank" rel="noopener">算法导论学习1—分治法计算逆序数</a>）：<br>简单说下如何在归并的过程中，计算逆序数。假设，有一个序列array[p, mid, r]. 其中array[p…mid], array[mid + 1, …, r]已经分别从小到大排好序。下面我们将两个子序列进行归并。<br>假设当前的右边子序列（array[mid + 1, …, r]）的当前待比较元素下表为right, 左边的为left， 当array[left] &lt;= array[right]时， 这时候没有逆序发生（因为left的数比right的大）；当array[left] &gt; array[right]时，right指向的元素具有逆序数，个数为他之前的所有的数，即mid - left + 1。如此遍历下去，即可得到在归并中得到逆序数。</p>
<p>还有一种方法就是树状数组法：<br>由于这题的数据特别大，所以在使用树状数组的时候就需要将其离散化，然后再判断每一个元素前面有多少个元素就可以了。</p>
<h1 id="AC代码（归并排序）">AC代码（归并排序）</h1><p>202MS/2352K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>], b[<span class="number">100005</span>];</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (s + t) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> qb = <span class="number">1</span>, bn = t - s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (s &gt;= t) <span class="keyword">return</span>;</span><br><span class="line">    merge_sort(s, mid);</span><br><span class="line">    merge_sort(mid + <span class="number">1</span>, t);</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = s, j = mid + <span class="number">1</span>; i &lt;= mid &amp;&amp; j &lt;= t; qb++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            b[qb] = a[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            b[qb] = a[j];</span><br><span class="line">            ans += mid - i + <span class="number">1</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余元素合并</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        b[qb++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= t)</span><br><span class="line">        b[qb++] = a[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, j = s; i &lt; qb; i++, j++)</span><br><span class="line">        a[j] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        merge_sort(<span class="number">1</span>, n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, max(ans - k, <span class="number">0l</span>l));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="AC代码（树状数组）">AC代码（树状数组）</h1><p>171MS/6280K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NV = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">int</span> a[NV], sub_a[NV], bit[NV];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= N; i += lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        bit[i] += delta;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt; <span class="number">0</span>; i -= lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt += bit[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;K))</span><br><span class="line">    &#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i);</span><br><span class="line">            sub_a[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//离散化</span></span><br><span class="line">        sort(sub_a + <span class="number">1</span>, sub_a + N + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> pos = unique(sub_a + <span class="number">1</span>, sub_a + N + <span class="number">1</span>) - sub_a - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = lower_bound(sub_a + <span class="number">1</span>, sub_a + pos + <span class="number">1</span>, a[i]) - sub_a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            update(a[i], <span class="number">1</span>);</span><br><span class="line">            ans += i - query(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans - K, <span class="number">0L</span>L);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 2846 Repository]]></title>
      <url>http://gyshgx868.github.io/2015/07/28/HDU/hdu-2846/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>When you go shopping, you can search in repository for avalible merchandises by the computers and internet. First you give the search system a name about something, then the system responds with the results. Now you are given a lot merchandise names in repository and some queries, and required to simulate the process.<br><a id="more"></a></p>
<h2 id="Input">Input</h2><p>There is only one case. First there is an integer P (1&lt;=P&lt;=10000)representing the number of the merchanidse names in the repository. The next P lines each contain a string (it’s length isn’t beyond 20,and all the letters are lowercase).Then there is an integer Q(1&lt;=Q&lt;=100000) representing the number of the queries. The next Q lines each contains a string(the same limitation as foregoing descriptions) as the searching condition.</p>
<h2 id="Output">Output</h2><p>For each query, you just output the number of the merchandises, whose names contain the search string as their substrings.</p>
<h2 id="Sample_Input">Sample Input</h2><p>20<br>ad<br>ae<br>af<br>ag<br>ah<br>ai<br>aj<br>ak<br>al<br>ads<br>add<br>ade<br>adf<br>adg<br>adh<br>adi<br>adj<br>adk<br>adl<br>aes<br>5<br>b<br>a<br>d<br>ad<br>s</p>
<h2 id="Sample_Output">Sample Output</h2><p>0<br>20<br>11<br>11<br>2</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2846" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=2846</a></p>
<h1 id="解题思路">解题思路</h1><p>题目大概的意思就是给出P个单词，Q种询问，每次询问一个字符串s，输出包含s的字串的字符串共有多少个。<br>这道题是一个字典树的变形题，和普通的插入不同，我们需要将每个字符串分成不同的字串，然后将他们插入到字典树中。例如abcd，我们需要将其分成abcd，bcd，cd，d，这样就保证将一个字符串分解成了不同的前缀，我们就可以根据输入的查询字串进行查询了。但是，这样还有一个BUG，如果遇到了类似于abab这样的字符串，那么就可能被分成两个以ab为前缀的字符串。所以，对于每一个完整的字符串，我们需要对其进行编号，假如遇到重复前缀的字符串，并且这个编号已经存在了的话，节点的数值就不+1，因此就能通过不同的前缀来判断字符串的数量了。</p>
<h1 id="AC代码">AC代码</h1><p>56368K/109MS/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> node[<span class="number">26</span>];</span><br><span class="line">    TrieTree()</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(node, <span class="number">0</span>, <span class="keyword">sizeof</span>(node));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ch[<span class="number">500000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sz = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c, u = <span class="number">0</span>, len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[u].node[c] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ch[u].node[c] = ++sz;</span><br><span class="line">            u = sz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            u = ch[u].node[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch[u].ID != x)</span><br><span class="line">        &#123;</span><br><span class="line">            ch[u].cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        ch[u].ID = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c, u = <span class="number">0</span>, len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[u].node[c] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        u = ch[u].node[c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ch[u].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            insertion(str + j, n - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(str));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2001 Shortest Prefixes]]></title>
      <url>http://gyshgx868.github.io/2015/07/27/POJ/poj-2001/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>A prefix of a string is a substring starting at the beginning of the given string. The prefixes of “carbon” are: “c”, “ca”, “car”, “carb”, “carbo”, and “carbon”. Note that the empty string is not considered a prefix in this problem, but every non-empty string is considered to be a prefix of itself. In everyday language, we tend to abbreviate words by prefixes. For example, “carbohydrate” is commonly abbreviated by “carb”. In this problem, given a set of words, you will find for each word the shortest prefix that uniquely identifies the word it represents.<br><a id="more"></a><br>In the sample input below, “carbohydrate” can be abbreviated to “carboh”, but it cannot be abbreviated to “carbo” (or anything shorter) because there are other words in the list that begin with “carbo”. </p>
<p>An exact match will override a prefix match. For example, the prefix “car” matches the given word “car” exactly. Therefore, it is understood without ambiguity that “car” is an abbreviation for “car” , not for “carriage” or any of the other words in the list that begins with “car”. </p>
<h2 id="Input">Input</h2><p>The input contains at least two, but no more than 1000 lines. Each line contains one word consisting of 1 to 20 lower case letters.</p>
<h2 id="Output">Output</h2><p>The output contains the same number of lines as the input. Each line of the output contains the word from the corresponding line of the input, followed by one blank space, and the shortest prefix that uniquely (without ambiguity) identifies this word.</p>
<h2 id="Sample_Input">Sample Input</h2><p>carbohydrate<br>cart<br>carburetor<br>caramel<br>caribou<br>carbonic<br>cartilage<br>carbon<br>carriage<br>carton<br>car<br>carbonate</p>
<h2 id="Sample_Output">Sample Output</h2><p>carbohydrate carboh<br>cart cart<br>carburetor carbu<br>caramel cara<br>caribou cari<br>carbonic carboni<br>cartilage carti<br>carbon carbon<br>carriage carr<br>carton carto<br>car car<br>carbonate carbona</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=2001" target="_blank" rel="noopener">http://poj.org/problem?id=2001</a></p>
<h1 id="解题思路">解题思路</h1><p>还是比较容易想到的，就是一个简单的字典树。首先把所有的单词全都存入字典树，然后一个一个的搜索，搜索到1为止，证明这个时候已经找到了他自己独一无二的前缀了；假如没有搜到1，就直接输出整个单词即可，因为搜不到1证明它自己就是一个前缀。（开数组的时候要小心，不要因为简单就随便，第一发竟然MLE了= =）</p>
<h1 id="AC代码">AC代码</h1><p>1612K/79MS/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">10005</span>][<span class="number">30</span>], sz, val[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ch, <span class="number">0</span>, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">    <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span>(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>, i, c, len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!ch[u][c])</span><br><span class="line">        &#123;</span><br><span class="line">            ch[u][c] = sz;</span><br><span class="line">            sz++;</span><br><span class="line">        &#125;</span><br><span class="line">        u = ch[u][c];</span><br><span class="line">        val[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>, i, c, l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!ch[u][c]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        u = ch[u][c];</span><br><span class="line">        <span class="keyword">if</span> (val[u] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1005</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[index]))</span><br><span class="line">    &#123;</span><br><span class="line">        insertion(str[index]);</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = query(str[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>, str[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, str[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1996 汉诺塔VI]]></title>
      <url>http://gyshgx868.github.io/2015/07/24/HDU/hdu-1996/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>n个盘子的汉诺塔问题的最少移动次数是2^n-1,即在移动过程中会产生2^n个系列。由于<br>发生错移产生的系列就增加了，这种错误是放错了柱子，并不会把大盘放到小盘上，即各柱<br>子从下往上的大小仍保持如下关系：<br>n=m+p+q<br>a1&gt;a2&gt;…&gt;am<br>b1&gt;b2&gt;…&gt;bp<br>c1&gt;c2&gt;…&gt;cq<br>计算所有会产生的系列总数.<br><a id="more"></a></p>
<h2 id="Input">Input</h2><p>包含多组数据，首先输入T,表示有T组数据.每个数据一行，是盘子的数<br>目N&lt;30.</p>
<h2 id="Output">Output</h2><p>对于每组数据，输出移动过程中所有会产生的系列总数。</p>
<h2 id="Sample_Input">Sample Input</h2><p>3<br>1<br>3<br>29</p>
<h2 id="Sample_Output">Sample Output</h2><p>3<br>27<br>68630377364883</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1996" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1996</a></p>
<h1 id="解题思路">解题思路</h1><p>强行找规律，很容易发现3^n。即使不用快速幂也不会超时。</p>
<h1 id="AC代码">AC代码</h1><p>0MS/1412K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        ll ans = <span class="built_in">pow</span>(<span class="number">3.0</span>, n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再附上一个组合的版本：<br>15MS/1580K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[N][N], sum[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            c[i][j] = c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; N; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k - i; j++)</span><br><span class="line">                sum[k] += c[k][i] * c[k - i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, sum[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1808 Halloween treats]]></title>
      <url>http://gyshgx868.github.io/2015/07/24/HDU/hdu-1808/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Every year there is the same problem at Halloween: Each neighbour is only willing to give a certain total number of sweets on that day, no matter how many children call on him, so it may happen that a child will get nothing if it is too late. To avoid conflicts, the children have decided they will put all sweets together and then divide them evenly among themselves. From last year’s experience of Halloween they know how many sweets they get from each neighbour. Since they care more about justice than about the number of sweets they get, they want to select a subset of the neighbours to visit, so that in sharing every child receives the same number of sweets. They will not be satisfied if they have any sweets left which cannot be divided. </p>
<a id="more"></a>
<p>Your job is to help the children and present a solution. </p>
<h2 id="Input">Input</h2><p>The input contains several test cases.<br>The first line of each test case contains two integers c and n (1 ≤ c ≤ n ≤ 100000), the number of children and the number of neighbours, respectively. The next line contains n space separated integers a 1 , … , a n (1 ≤ a i ≤ 100000 ), where a i represents the number of sweets the children get if they visit neighbour i. </p>
<p>The last test case is followed by two zeros. </p>
<h2 id="Output">Output</h2><p>For each test case output one line with the indices of the neighbours the children should select (here, index i corresponds to neighbour i who gives a total number of a i sweets). If there is no solution where each child gets at least one sweet, print “no sweets” instead. Note that if there are several solutions where each child gets at least one sweet, you may print any of them. </p>
<h2 id="Sample_Input">Sample Input</h2><p>4 5<br>1 2 3 7 5<br>3 6<br>7 11 2 5 13 17<br>0 0</p>
<h2 id="Sample_Output">Sample Output</h2><p>3 5<br>2 3 4</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1808" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1808</a></p>
<h1 id="解题思路">解题思路</h1><p>这道题运用的就是<code>抽屉原理</code>中的整除问题，以下是相关定理的运用（百度文库：<a href="http://wenku.baidu.com/link?url=k_ytPdBatk4vGiWvfQ5YsLjiF9EwcbWHo04_Yeol4GcK-8Aylw7RLnBsQ5dDDAeNYosW5O_jvqfV6fA5HE7SdLra3xwUzrZY30_b9gZG4nG" target="_blank" rel="noopener">抽屉原理的典型问题</a>）：</p>
<blockquote>
<p>把所有整数按照除以某个自然数m的余数分为m类，叫做m的剩余类或同余类，用[0]，[1]， [2]，…，[m-1]表示.每一个类含有无穷多个数，例如[1]中含有1，m+1，2m+1，3m+1，…。在研究与整除有关的问题时，常用剩余类作为抽屉.根据抽屉原理，可以证明：任意n+1个自然数中，总有两个自然数的差是n的倍数。</p>
</blockquote>
<p>因此，我们每输入一个数，可以记录一个到目前为止的和，将这些和对c进行取模，根据上面的定理，我们就可以找到两个数，这两个数的差为c的倍数。同时，这两个的数的差可以等价于这两个数之间所有的数的和，这样我们就能记录这两个数的下标，输出这两个数中间所有的下标即可。</p>
<h1 id="AC代码">AC代码</h1><p>639M/3372K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line">ll sum[<span class="number">100005</span>], index[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c, n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;n) &amp;&amp; c + n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(index, <span class="number">0</span>, <span class="keyword">sizeof</span>(index));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">            sum[i] = (sum[i - <span class="number">1</span>] + a[i]) % c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left, right;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                left = <span class="number">1</span>;</span><br><span class="line">                right = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (index[sum[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                left = index[sum[i]] + <span class="number">1</span>;</span><br><span class="line">                right = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                index[sum[i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, left);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left + <span class="number">1</span>; i &lt;= right; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 1716 排列2]]></title>
      <url>http://gyshgx868.github.io/2015/07/24/HDU/hdu-1716/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Ray又对数字的列产生了兴趣：<br>现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。<br><a id="more"></a></p>
<h2 id="Input">Input</h2><p>每组数据占一行，代表四张卡片上的数字（0&lt;=数字&lt;=9），如果四张卡片都是0，则输入结束。</p>
<h2 id="Output">Output</h2><p>对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，千位数字相同的在同一行，同一行中每个四位数间用空格分隔。<br>每组输出数据间空一行，最后一组数据后面没有空行。</p>
<h2 id="Sample_Input">Sample Input</h2><p>1 2 3 4<br>1 1 2 3<br>0 1 2 3<br>0 0 0 0</p>
<h2 id="Sample_Output">Sample Output</h2><p>1234 1243 1324 1342 1423 1432<br>2134 2143 2314 2341 2413 2431<br>3124 3142 3214 3241 3412 3421<br>4123 4132 4213 4231 4312 4321</p>
<p>1123 1132 1213 1231 1312 1321<br>2113 2131 2311<br>3112 3121 3211</p>
<p>1023 1032 1203 1230 1302 1320<br>2013 2031 2103 2130 2301 2310<br>3012 3021 3102 3120 3201 3210</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1716" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1716</a></p>
<h1 id="解题思路">解题思路</h1><p>不是什么难题，使用STL的next_permutation就可以解决这道题。不过要注意最后一列数据没有空格，每组数据之间有一个空行，最后一组数据没有空行。PE成狗的一道题……</p>
<h1 id="AC代码">AC代码</h1><p>0MS/1580K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, a, a + <span class="number">1</span>, a + <span class="number">2</span>, a + <span class="number">3</span>) &amp;&amp; a[<span class="number">0</span>] + a[<span class="number">1</span>] + a[<span class="number">2</span>] + a[<span class="number">3</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, a + <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">int</span> pre = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>, start = <span class="literal">true</span>;;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[<span class="number">0</span>] != pre)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                    start = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = a[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%d%d%d"</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line">                start = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d%d%d%d"</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (next_permutation(a, a + <span class="number">4</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        first = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3735 Training little cats]]></title>
      <url>http://gyshgx868.github.io/2015/07/21/POJ/poj-3735/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>Facer’s pet cat just gave birth to a brood of little cats. Having considered the health of those lovely cats, Facer decides to make the cats to do some exercises. Facer has well designed a set of moves for his cats. He is now asking you to supervise the cats to do his exercises. Facer’s great exercise for cats contains three different moves:<br><a id="more"></a><br>g i : Let the ith cat take a peanut.<br>e i : Let the ith cat eat all peanuts it have.<br>s i j : Let the ith cat and jth cat exchange their peanuts.<br>All the cats perform a sequence of these moves and must repeat it m times! Poor cats! Only Facer can come up with such embarrassing idea.<br>You have to determine the final number of peanuts each cat have, and directly give them the exact quantity in order to save them.</p>
<h2 id="Input">Input</h2><p>The input file consists of multiple test cases, ending with three zeroes “0 0 0”. For each test case, three integers n, m and k are given firstly, where n is the number of cats and k is the length of the move sequence. The following k lines describe the sequence.<br>(m≤1,000,000,000, n≤100, k≤100)</p>
<h2 id="Output">Output</h2><p>For each test case, output n numbers in a single line, representing the numbers of peanuts the cats have.</p>
<h2 id="Sample_Input">Sample Input</h2><p>3 1 6<br>g 1<br>g 2<br>g 2<br>s 1 2<br>g 3<br>e 2<br>0 0 0</p>
<h2 id="Sample_Output">Sample Output</h2><p>2 0 1</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://poj.org/problem?id=3735" target="_blank" rel="noopener">http://poj.org/problem?id=3735</a></p>
<h1 id="解题思路">解题思路</h1><p>题目大意就是有N只猫，K次操作（得花生、吃花生、交换花生），重复M次。问最后每只猫各有多少花生剩余。<br>这道题目的巧妙之处就是构造单位矩阵，从而实现三种操作。之后便能用矩阵快速幂来求解了。<br><img src="http://7xkj0a.dl1.z0.glb.clouddn.com/poj-3735.png" alt="POJ 3735"></p>
<h1 id="TLE代码">TLE代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    ll a[N][N];</span><br><span class="line">    Matrix(<span class="keyword">int</span> n = N, <span class="keyword">int</span> m = N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">unit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">t</span><span class="params">(n, n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            t.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">t</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                t.a[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; k++)</span><br><span class="line">                    t.a[i][j] += a[i][k] * b.a[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Matrix <span class="title">quickpow</span><span class="params">(Matrix &amp;a, ll b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) <span class="keyword">return</span> a.unit();</span><br><span class="line">        Matrix ret = a.unit();</span><br><span class="line">        <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    ll m;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%I64d%d"</span>, &amp;n, &amp;m, &amp;k) &amp;&amp; n + m + k != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="function">Matrix <span class="title">A</span><span class="params">(n, n)</span></span>;</span><br><span class="line">        <span class="function">Matrix <span class="title">B</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        A = A.unit();</span><br><span class="line">        B.a[n][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, c);</span><br><span class="line">            <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">'g'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                A.a[x - <span class="number">1</span>][n]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">'e'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">                    A.a[x - <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">'s'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">                    swap(A.a[x - <span class="number">1</span>][j], A.a[y - <span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        A = quickpow(A, m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d"</span>, A.a[i][n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SB题，害得我T了N发。原因就在于进行矩阵乘法的时候，由于乘法的次数m次较多，而矩阵又过于稀疏，导致做了大量的无意义的计算：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Matrix operator *(const Matrix &amp;<span class="keyword">b)</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"> </span>   Matrix t(n, m)<span class="comment">;</span></span><br><span class="line">    for (int i = <span class="number">0</span><span class="comment">; i &lt;= n; i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        for (int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt;= m; j++)</span></span><br><span class="line">        &#123;</span><br><span class="line">            t.a[i][<span class="keyword">j] </span>= <span class="number">0</span><span class="comment">;</span></span><br><span class="line">            for (int k = <span class="number">0</span><span class="comment">; k &lt;= m; k++)</span></span><br><span class="line">                t.a[i][<span class="keyword">j] </span>+= a[i][k] * <span class="keyword">b.a[k][j];</span></span><br><span class="line"><span class="keyword"> </span>       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return t<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将这段代码改成这样就好了：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Matrix operator *(const Matrix &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix t(n, m);</span><br><span class="line">    for (int i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            t.a<span class="string">[i]</span><span class="string">[j]</span> = <span class="number">0</span>;</span><br><span class="line">            for (int k = <span class="number">0</span>; k &lt;= m; k++)</span><br><span class="line">                if (a<span class="string">[i]</span><span class="string">[k]</span> &amp;&amp; b.a<span class="string">[k]</span><span class="string">[j]</span>)</span><br><span class="line">                    t.a<span class="string">[i]</span><span class="string">[j]</span> += a<span class="string">[i]</span><span class="string">[k]</span> * b.a<span class="string">[k]</span><span class="string">[j]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="AC代码">AC代码</h1><p>648K/1016MS/C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    ll a[N][N];</span><br><span class="line">    Matrix(<span class="keyword">int</span> n = N, <span class="keyword">int</span> m = N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">unit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">t</span><span class="params">(n, n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            t.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">t</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                t.a[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; k++)</span><br><span class="line">                    <span class="keyword">if</span> (a[i][k] &amp;&amp; b.a[k][j])</span><br><span class="line">                        t.a[i][j] += a[i][k] * b.a[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Matrix <span class="title">quickpow</span><span class="params">(Matrix &amp;a, ll b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) <span class="keyword">return</span> a.unit();</span><br><span class="line">        Matrix ret = a.unit();</span><br><span class="line">        <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    ll m;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%I64d%d"</span>, &amp;n, &amp;m, &amp;k) &amp;&amp; n + m + k != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="function">Matrix <span class="title">A</span><span class="params">(n, n)</span></span>;</span><br><span class="line">        <span class="function">Matrix <span class="title">B</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        A = A.unit();</span><br><span class="line">        B.a[n][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, c);</span><br><span class="line">            <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">'g'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                A.a[x - <span class="number">1</span>][n]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">'e'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">                    A.a[x - <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">'s'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">                    swap(A.a[x - <span class="number">1</span>][j], A.a[y - <span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        A = quickpow(A, m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d"</span>, A.a[i][n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5175 Misaki's Kiss again]]></title>
      <url>http://gyshgx868.github.io/2015/07/20/HDU/hdu-5175/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>After the Ferries Wheel, many friends hope to receive the Misaki’s kiss again,so Misaki numbers them $1,2…N-1,N$,if someone’s number is M and satisfied the $GCD(N, M)$ equals to $N$ XOR $M$,he will be kissed again.<br><a id="more"></a><br>Please help Misaki to find all $M(1&lt;=M&lt;=N)$. </p>
<p>Note that:<br>$GCD(a, b)$ means the greatest common divisor of $a$ and $b$.<br>$A$ XOR $B$ means $A$ exclusive or $B$</p>
<h2 id="Input">Input</h2><p>There are multiple test cases. </p>
<p>For each testcase, contains a integets $N (0 &lt; N &lt;= {10}^{10})$</p>
<h2 id="Output">Output</h2><p>For each test case,<br>first line output Case #X:,<br>second line output $k$ means the number of friends will get a kiss.<br>third line contains $k$ number mean the friends’ number, sort them in ascending and separated by a space between two numbers</p>
<h2 id="Sample_Input">Sample Input</h2><p>3<br>5<br>15 </p>
<h2 id="Sample_Output">Sample Output</h2><p>Case #1:<br>1<br>2<br>Case #2:<br>1<br>4<br>Case #3:<br>3<br>10 12 14 </p>
<h2 id="Hint">Hint</h2><p>In the third sample, gcd(15,10)=5 and (15 xor 10)=5, gcd(15,12)=3 and (15 xor 12)=3,gcd(15,14)=1 and (15 xor 14)=1</p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5175" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=5175</a></p>
<h1 id="解题思路">解题思路</h1><p>题目的意思就是找到满足$GCD(N, M) == N xor M$所有的$M$。令$M = N xor K$，原式：$GCD(N, N xor K) == N xor (N xor K) == K$，由此我们可以发现$K$是$N$的约数，找到所有$N$的约数，判断是不是满足那个等式即可。找约数的话循环只需要循环$\sqrt{N}$次就可以了，这样可以减少计算因数所需要的时间。因为是异或运算，结果可能比约数本身大，如1 xor 2 == 3，还有异或出来结果等于0的舍掉，因为约数中不可能有0，还有就是0的时候多输出一个空行，不然PE。</p>
<h1 id="AC代码">AC代码</h1><p>109MS/1596K/G++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ll a[<span class="number">1000005</span>], factor[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    ll r = (ll) <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            factor[num] = i;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = r; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            factor[num] = n / i;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cse = <span class="number">1</span>;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, num = make(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n ^ factor[i]) &lt; n &amp;&amp; (n ^ factor[i]) &gt; <span class="number">0</span> &amp;&amp; __gcd(n, n ^ factor[i]) == factor[i])</span><br><span class="line">            &#123;</span><br><span class="line">                a[sum] = n ^ factor[i];</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, cse);</span><br><span class="line">        cse++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d"</span>, a[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %I64d"</span>, a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5191 Building Blocks]]></title>
      <url>http://gyshgx868.github.io/2015/07/18/HDU/hdu-5191/</url>
      <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><h2 id="Description">Description</h2><p>After enjoying the movie,LeLe went home alone. LeLe decided to build blocks.<br>LeLe has already built $n$ piles. He wants to move some blocks to make $W$ consecutive piles with exactly the same height $H$.<br><a id="more"></a><br>LeLe already put all of his blocks in these piles, which means he can not add any blocks into them. Besides, he can move a block from one pile to another or a new one，but not the position betweens two piles already exists.For instance,after one move,”3 2 3” can become “2 2 4” or “3 2 2 1”,but not “3 1 1 3”. </p>
<p>You are request to calculate the minimum blocks should LeLe move.</p>
<h2 id="Input">Input</h2><p>There are multiple test cases, about $100$ cases. </p>
<p>The first line of input contains three integers $n,W,H(1 \leq n,W,H \leq 50000)$.$n$ indicate $n$ piles blocks. </p>
<p>For the next line ,there are $n$ integers $A_1,A_2,A_3,……,A_n$ indicate the height of each piles. $(1 \leq A_i \leq 50000)$ </p>
<p>The height of a block is 1.</p>
<h2 id="Output">Output</h2><p>Output the minimum number of blocks should LeLe move. </p>
<p>If there is no solution, output “-1” (without quotes).</p>
<h2 id="Sample_Input">Sample Input</h2><p>4 3 2<br>1 2 3 5<br>4 4 4<br>1 2 3 4 </p>
<h2 id="Sample_Output">Sample Output</h2><p>1<br>-1 </p>
<h2 id="Hint">Hint</h2><p>In first case, LeLe move one block from third pile to first pile. </p>
<h1 id="题目链接">题目链接</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5191" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=5191</a></p>
<h1 id="解题思路">解题思路</h1><p>其实很简单，就是算出长度为$W$的区间的正数之和和负数之和，不断地更新最小值。每个区间需要添加的砖块的数量和减少的砖块的数量的总和分别用$x$和$y$表示，每次取$x$和$y$中最大的一个数作为满足要求的数值（因为只有操作这两者的最多次数才可以满足题目的要求），最后将这个数和<code>MIN</code>比较，取其中最小的一个输出即可。</p>
<h1 id="AC代码">AC代码</h1><p>670MS/5528K<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ll a[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, w, h;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;w, &amp;h))</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; n + w; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i);</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; (ll) w * h)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll x = w * h, y = <span class="number">0</span>;</span><br><span class="line">            ll MIN = w * h;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; n + w * <span class="number">2</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i - w] &lt; h)</span><br><span class="line">                    x -= h - a[i - w];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    y -= a[i - w] - h;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (a[i] &lt; h)</span><br><span class="line">                    x += h - a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    y += a[i] - h;</span><br><span class="line">                MIN = min(MIN, max(x, y));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, MIN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C#多线程编程]]></title>
      <url>http://gyshgx868.github.io/2015/07/17/CSharp/csharp-thread/</url>
      <content type="html"><![CDATA[<h1 id="相关问题">相关问题</h1><h2 id="什么是进程">什么是进程</h2><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p>
<a id="more"></a>
<h2 id="什么是线程">什么是线程</h2><p>线程（Thread）是程序中一个单一的顺序控制流程。进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。简单来说，不同的线程可以执行相同的代码。</p>
<h2 id="什么是多线程">什么是多线程</h2><p>多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</p>
<h2 id="多线程的优点">多线程的优点</h2><p>可以提高CPU的利用率。在多线程程序中，一个线程必须等待的时候，CPU可以运行其它的线程而不是等待，这样就大大提高了程序的效率。</p>
<h2 id="多线程的缺点">多线程的缺点</h2><ul>
<li>线程需要占用内存，线程越多占用内存也越多； </li>
<li>多线程需要协调和管理，所以需要CPU时间跟踪线程； </li>
<li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；</li>
<li>线程太多会导致控制太复杂，最终可能造成很多Bug。</li>
</ul>
<h1 id="C#实现多线程的方法">C#实现多线程的方法</h1><h2 id="Thread类">Thread类</h2><p><code>Thread</code>类通过委托传递，执行线程的函数可以不带参数，也可以带有一个参数，但是参数的类型需要为<code>object</code>类型，在需要的时候进行类型转换。如果要传递多个参数，可以通过一个类或者结构体来封装需要传递的参数。</p>
<p><code>Thread</code>类C#代码示例：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(TestMethod));</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart(TestMethod));</span><br><span class="line">            t1.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            t2.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            t1.Start();</span><br><span class="line">            t2.Start(<span class="string">"Hello"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"不带参数的线程函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//参数的类型必须为object类型</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestMethod</span>(<span class="params"><span class="keyword">object</span> data</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">string</span> datastr = (<span class="keyword">string</span>) data;</span><br><span class="line">            Console.WriteLine(<span class="string">"带参数的线程函数，参数为：&#123;0&#125;"</span>, datastr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于多个参数的线程创建，请参照<a href="http://blog.sina.com.cn/s/blog_7d892a6701018lkv.html" target="_blank" rel="noopener">C#创建带参数的线程</a>。</p>
<p>下面给出了两种方法的示例，首先是使用类作为参数的传递，此种方式比较常用：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MyThread mt = <span class="keyword">new</span> MyThread(<span class="number">100</span>);</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(mt.Calculate));</span><br><span class="line">            thread.Start();</span><br><span class="line">            <span class="comment">//等待线程结束</span></span><br><span class="line">            <span class="keyword">while</span> (thread.ThreadState != ThreadState.Stopped)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(mt.Result);  <span class="comment">//打印返回值</span></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyThread</span><span class="comment">//线程类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Parame &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;    <span class="comment">//参数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Result &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;    <span class="comment">//返回值</span></span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span>(<span class="params"><span class="keyword">int</span> parame</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.Parame = parame;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//线程执行方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Random ra = <span class="keyword">new</span> Random();        <span class="comment">//随机数对象</span></span><br><span class="line">            Thread.Sleep(ra.Next(<span class="number">10</span>, <span class="number">100</span>));  <span class="comment">//随机休眠一段时间</span></span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Parame);</span><br><span class="line">            <span class="keyword">this</span>.Result = <span class="keyword">this</span>.Parame * ra.Next(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是使用匿名方法作为参数，这种方法十分的灵活：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> Parame = <span class="number">100</span>;     <span class="comment">//当做参数</span></span><br><span class="line">            <span class="keyword">int</span> Result = <span class="number">0</span>;       <span class="comment">//当做返回值</span></span><br><span class="line">            <span class="comment">//匿名方法</span></span><br><span class="line">            ThreadStart threadStart = <span class="keyword">new</span> ThreadStart(<span class="keyword">delegate</span>()</span><br><span class="line">            &#123;</span><br><span class="line">                Random ra = <span class="keyword">new</span> Random();             <span class="comment">//随机数对象</span></span><br><span class="line">                Thread.Sleep(ra.Next(<span class="number">10</span>, <span class="number">100</span>));       <span class="comment">//随机休眠一段时间</span></span><br><span class="line">                Console.WriteLine(Parame);            <span class="comment">//输出参数</span></span><br><span class="line">                Result = Parame * ra.Next(<span class="number">10</span>, <span class="number">100</span>);   <span class="comment">//计算返回值</span></span><br><span class="line">            &#125;);</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(threadStart);</span><br><span class="line">            thread.Start();      <span class="comment">//多线程启动匿名方法</span></span><br><span class="line">            <span class="comment">//等待线程结束</span></span><br><span class="line">            <span class="keyword">while</span> (thread.ThreadState != ThreadState.Stopped)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(Result);   <span class="comment">//打印返回值</span></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="线程池">线程池</h2><p>由于线程的创建和销毁需要耗费一定的开销，过多的使用线程会造成内存资源的浪费，出于对性能的考虑，于是引入了线程池（<code>ThreadPool</code>）的概念。线程池维护一个请求队列，线程池的代码从队列提取任务，然后委派给线程池的一个线程执行，线程执行完不会被立即销毁，这样既可以在后台执行任务，又可以减少线程创建和销毁所带来的开销。</p>
<p>线程池线程默认为后台线程（IsBackground），示例代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//将工作项加入到线程池队列中，这里可以传递一个线程参数</span></span><br><span class="line">            ThreadPool.QueueUserWorkItem(Test, <span class="string">"Hello"</span>);</span><br><span class="line">            ThreadPool.QueueUserWorkItem(Test, <span class="string">"World"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="keyword">object</span> data</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">string</span> datastr = (<span class="keyword">string</span>) data;</span><br><span class="line">            Console.WriteLine(datastr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Task类">Task类</h2><p>使用<code>ThreadPool</code>的<code>QueueUserWorkItem()</code>方法发起一次异步的线程执行很简单，但是该方法最大的问题是没有一个内建的机制让你知道操作什么时候完成，有没有一个内建的机制在操作完成后获得一个返回值。为此，可以使用<code>System.Threading.Tasks</code>中的<code>Task</code>类。</p>
<p>构造一个<code>Task&lt;TResult&gt;</code>对象，并为泛型<code>TResult</code>参数传递一个操作的返回类型。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Task&lt;Int32&gt; t = <span class="keyword">new</span> Task&lt;Int32&gt;(n =&gt; Sum((Int32) n), <span class="number">1000</span>);</span><br><span class="line">            t.Start();</span><br><span class="line">            t.Wait();</span><br><span class="line">            Console.WriteLine(t.Result);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Int32 <span class="title">Sum</span>(<span class="params">Int32 n</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Int32 sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; --n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">checked</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum += n;</span><br><span class="line">                &#125; <span class="comment">//结果太大，抛出异常</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一个任务完成时，自动启动一个新任务；一个任务完成后，它可以启动另一个任务，下面重写了前面的代码，不阻塞任何线程。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Task&lt;Int32&gt; t = <span class="keyword">new</span> Task&lt;Int32&gt;(n =&gt; Sum((Int32)n), <span class="number">1000</span>);</span><br><span class="line">            t.Start();</span><br><span class="line">            <span class="comment">//t.Wait();</span></span><br><span class="line">            Task cwt = t.ContinueWith(task =&gt; Console.WriteLine(<span class="string">"The result is &#123;0&#125;"</span>, t.Result));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Int32 <span class="title">Sum</span>(<span class="params">Int32 n</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Int32 sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; --n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">checked</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum += n;</span><br><span class="line">                &#125; <span class="comment">//结果溢出，抛出异常</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用委托开启多线程">使用委托开启多线程</h2><p>用委托（Delegate）的<code>BeginInvoke</code>和<code>EndInvoke</code>方法操作线程，<code>BeginInvoke</code>方法可以使用线程异步地执行委托所指向的方法。然后通过<code>EndInvoke</code>方法获得方法的返回值（<code>EndInvoke</code>方法的返回值就是被调用方法的返回值），或是确定方法已经被成功调用。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">NewTaskDelegate</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTask</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Thread.Sleep(ms);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> n = random.Next(<span class="number">10000</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成"</span>);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            NewTaskDelegate task = newTask;</span><br><span class="line">            IAsyncResult asyncResult = task.BeginInvoke(<span class="number">2000</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//EndInvoke方法将被阻塞2秒</span></span><br><span class="line">            <span class="keyword">int</span> result = task.EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同时，我们也可以使用IAsyncResult.IsCompleted属性来判断异步调用是否完成，示例代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">NewTaskDelegate</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTask</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Thread.Sleep(ms);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> n = random.Next(<span class="number">10000</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成"</span>);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            NewTaskDelegate task = newTask;</span><br><span class="line">            IAsyncResult asyncResult = task.BeginInvoke(<span class="number">2000</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//等待异步执行完成</span></span><br><span class="line">            <span class="keyword">while</span> (!asyncResult.IsCompleted)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">"*"</span>);</span><br><span class="line">                Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 由于异步调用已经完成，因此， EndInvoke会立刻返回结果</span></span><br><span class="line">            <span class="keyword">int</span> result = task.EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们也可以使用<code>WaitOne</code>方法等待异步方法执行完成。<code>WaitOne</code>的第一个参数表示要等待的毫秒数，在指定时间之内，<code>WaitOne</code>方法将一直等待，直到异步调用完成，并发出通知，<code>WaitOne</code>方法才返回<code>true</code>。当等待指定时间之后，异步调用仍未完成，<code>WaitOne</code>方法返回<code>false</code>，如果指定时间为0，表示不等待，如果为-1，表示永远等待，直到异步调用完成。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">NewTaskDelegate</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTask</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Thread.Sleep(ms);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> n = random.Next(<span class="number">10000</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成"</span>);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            NewTaskDelegate task = newTask;</span><br><span class="line">            IAsyncResult asyncResult = task.BeginInvoke(<span class="number">2000</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//等待异步执行完成</span></span><br><span class="line">            <span class="keyword">while</span> (!asyncResult.AsyncWaitHandle.WaitOne(<span class="number">100</span>, <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> result = task.EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样也可以使用使用回调方式返回结果。要注意的是<code>my.BeginInvoke(3, 300, MethodCompleted, my)</code>，<code>BeginInvoke</code>方法的参数传递方式：</p>
<ul>
<li>前面一部分(3, 300)是其委托本身的参数；</li>
<li>参数<code>MethodCompleted</code>是回调方法委托类型，他是回调方法的委托，此委托没有返回值，有一个<code>IAsyncResult</code>类型的参数，当<code>method</code>方法执行完后，系统会自动调用<code>MethodCompleted</code>方法。</li>
<li>最后一个参数<code>my</code>需要向<code>MethodCompleted</code>方法中传递一些值，一般可以传递被调用方法的委托，这个值可以使用<code>IAsyncResult.AsyncState</code>属性获得。</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">MyMethod</span>(<span class="params"><span class="keyword">int</span> second, <span class="keyword">int</span> millisecond</span>)</span>;</span><br><span class="line">        <span class="comment">//线程执行方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span>(<span class="params"><span class="keyword">int</span> second, <span class="keyword">int</span> millisecond</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"线程休眠"</span> + (second * <span class="number">1000</span> + millisecond) + <span class="string">"毫秒"</span>);</span><br><span class="line">            Thread.Sleep(second * <span class="number">1000</span> + millisecond);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">return</span> random.Next(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MethodCompleted</span>(<span class="params">IAsyncResult asyncResult</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncResult == <span class="literal">null</span> || asyncResult.AsyncState == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"回调失败！！！"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> result = (asyncResult.AsyncState <span class="keyword">as</span> MyMethod).EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成，结果："</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MyMethod my = method;</span><br><span class="line">            IAsyncResult asyncResult = my.BeginInvoke(<span class="number">3</span>, <span class="number">300</span>, MethodCompleted, my);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用BackgroundWorker组件来实现">使用BackgroundWorker组件来实现</h2><p>当在设计<code>WinForm</code>应用程序的时候，如果有一段代码非常的耗费时间，并且我们需要很好的控制代码的执行，或者是返回代码的执行进度，这时候就可以使<code>BackgroundWorker</code>组件了。如果是做<code>WinForm</code>程序开发，可以从工具箱中拖放<code>BackgroundWorker</code>组件到应用程序，也可以在应用程序中添加一个BackgroundWorker实例：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BackgroundWorker </span><span class="keyword">bgw </span>= new <span class="keyword">BackgroundWorker();</span></span><br></pre></td></tr></table></figure></p>
<p><code>BackgroundWorker</code>组件常用的操作:<br>bgw.RunWorkerAsync()：<br>开始后台运行执行，该函数后将触发<code>bgw.DoWorker</code>事件，需要执行的操作写在<code>DoWorker</code>事件响应函数里。该函数也可以加参数，参数从<code>DoWorker</code>事件处理函数的<code>e.Arguement</code>里获取；</p>
<p>bgw.CancelAsync()：<br>申请后台程序停止，注意该函数不能实际停止后台程序，只能将<code>bgw</code>的<code>CancellationPending</code>值设为<code>true</code>，需要自己在后台运行的程序中判断这一值，进而停止后台程序的运行。注意本方法使用前，需要将<code>bgw</code>的<code>WorkerSupportsCancellation</code>值设为<code>true</code>，否则将不起作用。</p>
<p>bgw.ReportProgress()：<br>在后台程序中调用，向主线程传送进度信息。可以带一个或两个参数，一个为<code>int</code>类型的进度（0 ~ 100），一个为自定义类型的参数，可以传任意信息。调用后，将触发<code>bgw.ProgressChanged</code>事件，可以将界面变化的代码写在该事件响应函数中，之前提到的两个参数均可从<code>bgw.ProgressChanged</code>事件响应函数的参数<code>e</code>中获取，分别为<code>e.ProgressPercentage</code>和<code>e.UserState</code>。本方法使用前，需要将<code>bgw</code>的<code>WorkerReportsProgress</code>值设为<code>true</code>，否则将不会触发事件。</p>
<p>完整的示例代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">BackgroundWorker bgw = <span class="keyword">new</span> BackgroundWorker();</span><br><span class="line"><span class="comment">//用于显示后台进度</span></span><br><span class="line">bgw.WorkerReportsProgress = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//支持取消后台正在执行的操作</span></span><br><span class="line">bgw.WorkerSupportsCancellation = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在另一个线程里开始操作（btnStart是一个按钮控件）</span></span><br><span class="line"><span class="comment">//也可以利用RunWokerAsync()方法传递参数，</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnStart_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bgw.RunWokerAsync(<span class="number">2000</span><span class="comment">/*参数是可选的*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持取消后台正在执行的操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCancel_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bgw.CancelAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DoWork事件在另一个线程里执行</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bgw_DoWork</span>(<span class="params">objectsender, DoWorkeventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//允许长时间的操作</span></span><br><span class="line">        <span class="keyword">int</span> input = (<span class="keyword">int</span>)e.Argument;</span><br><span class="line">        Thread.Sleep(input);</span><br><span class="line">		<span class="comment">//报告后台执行的进度</span></span><br><span class="line">        bgw.ReportProgress(i * <span class="number">10</span>);</span><br><span class="line">		<span class="comment">//判断是否发出了取消的指令</span></span><br><span class="line">        <span class="keyword">if</span> (bgw.CancellationPending)</span><br><span class="line">        &#123;</span><br><span class="line">            e.Cancel = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在此处设置返回值</span></span><br><span class="line">    e.Result = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用来接收报告回来的进度</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bgw_ProgressChanged</span>(<span class="params"><span class="keyword">object</span> sender, ProgressChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//progressBar1是ProgressBar控件</span></span><br><span class="line">    progressBar1.Value = e.ProgressPercentage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将后台操作的结果反馈给用户</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bgw_RunWorkerCompleted</span>(<span class="params"><span class="keyword">object</span> sender, RunWorkerCompletedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.Cancelled)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">"Operation Cancelled"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">"OperationCompleted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在此处接收传递回来的值</span></span><br><span class="line">    <span class="keyword">int</span> returnValue = (<span class="keyword">int</span>)e.Result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="相关资料">相关资料</h1><p>[1] <a href="http://www.cnblogs.com/luxiaoxun/p/3280146.html" target="_blank" rel="noopener">C#多线程编程</a> By 阿凡卢</p>
<p>[2] <a href="http://www.cnblogs.com/xugang/archive/2008/04/06/1138856.html" target="_blank" rel="noopener">C#多线程学习(一) 多线程的相关概念</a> By xugang</p>
<p>[3] <a href="http://www.jb51.net/article/46257.htm" target="_blank" rel="noopener">C#多线程的应用全面解析</a></p>
<p>[4] <a href="http://blog.sina.com.cn/s/blog_7d892a6701018lkv.html" target="_blank" rel="noopener">C#创建带参数的线程</a> By 熊猫大叔</p>
<p>[5] <a href="http://www.cnblogs.com/inforasc/archive/2009/10/12/1582110.html" target="_blank" rel="noopener">使用BackgroundWorker组件</a> By inforasc</p>
<p>[6] <a href="http://blog.csdn.net/rrrrssss00/article/details/7707678" target="_blank" rel="noopener">BackgroundWorker的使用</a> By rrrrssss00</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阶乘算法大全]]></title>
      <url>http://gyshgx868.github.io/2015/07/14/Cpp/factorial/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>百度到的阶乘算法大全，先收藏一下，说不定有用。</p>
<p>原文：<a href="http://blog.chinaunix.net/uid-20788636-id-1841373.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-20788636-id-1841373.html</a></p>
<a id="more"></a>
<h1 id="模板源代码">模板源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阶乘各算法的C++类实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factorial</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5001</span>; <span class="comment">// 最大阶乘数，实际用不到这么大</span></span><br><span class="line">    <span class="keyword">int</span> *data[MAXN]; <span class="comment">// 存放各个数的阶乘</span></span><br><span class="line">    <span class="keyword">int</span> *nonzero; <span class="comment">// 从低位数起第一个非0数字</span></span><br><span class="line">    <span class="keyword">int</span> maxn; <span class="comment">// 存放最大已经计算好的n的阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SmallFact</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// n &lt;= 12的递归程序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TransToStr</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *s)</span></span>; <span class="comment">// 将数n倒序存入数组中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Multply</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> *B, <span class="keyword">int</span> *C, <span class="keyword">int</span> totallen)</span></span>;  <span class="comment">// 执行两个高精度数的乘法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Factorial();</span><br><span class="line">    ~Factorial();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 调用计算阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FirstNonZero</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 返回阶乘末尾第一个非0数字</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">CountZeros</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 返回阶乘末尾有多少个0</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SecondNum</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 返回阶乘左边的第二个数字</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">CanDivide</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 判断数值 m 是否可以整除 n!</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Factorial::SmallFact(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> SmallFact(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::TransToStr(<span class="keyword">int</span> n, <span class="keyword">int</span> *tmp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i++] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp[<span class="number">0</span>] = i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::Multply(<span class="keyword">int</span> *A, <span class="keyword">int</span> *B, <span class="keyword">int</span> *C, <span class="keyword">int</span> totallen)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, len;</span><br><span class="line">    <span class="built_in">memset</span>(C, <span class="number">0</span>, totallen * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= A[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= B[<span class="number">0</span>]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i + j - <span class="number">1</span>] += A[i] * B[j]; <span class="comment">// 当前i+j-1位对应项 + A[i] * B[j]</span></span><br><span class="line">            C[i + j] += C[i + j - <span class="number">1</span>] / <span class="number">10</span>; <span class="comment">// 它的后一位 + 它的商（进位）</span></span><br><span class="line">            C[i + j - <span class="number">1</span>] %= <span class="number">10</span>; <span class="comment">// 它再取余即可</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len = A[<span class="number">0</span>] + B[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">1</span> &amp;&amp; C[len] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len--;    <span class="comment">// 获得它的实际长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    C[<span class="number">0</span>] = len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Factorial::Factorial()   <span class="comment">// 构造函数，先把&lt;=12的阶乘计算好</span></span><br><span class="line">&#123;</span><br><span class="line">    maxn = <span class="number">12</span>;</span><br><span class="line">    data[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line">    data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    data[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">12</span>];</span><br><span class="line">        j = j * i;</span><br><span class="line">        TransToStr(j, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    nonzero = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span> * MAXN];</span><br><span class="line">    nonzero[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    nonzero[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// nonzero[0]存储已经计算到的n!末尾非0数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Factorial::~Factorial()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">        <span class="keyword">delete</span> []data[i];</span><br><span class="line">    <span class="keyword">delete</span> []nonzero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::Calculate(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; MAXN)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= maxn)</span><br><span class="line">        <span class="keyword">return</span>;    <span class="comment">// &lt;= maxn的，已经在计算好的数组中了</span></span><br><span class="line">    <span class="keyword">int</span> i, j, len;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = maxn + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        TransToStr(i, tmp);</span><br><span class="line">        len = data[i - <span class="number">1</span>][<span class="number">0</span>] + tmp[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        data[i] = <span class="keyword">new</span> <span class="keyword">int</span> [len + <span class="number">1</span>];</span><br><span class="line">        Multply(data[i - <span class="number">1</span>], tmp, data[i], len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    maxn = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Factorial::FirstNonZero(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">10</span> * MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Super Pig, your input is too large, cannot Calculate. Sorry! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= nonzero[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> nonzero[n];    <span class="comment">//已经计算好了，直接返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res[<span class="number">5</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> i, five, t;</span><br><span class="line">    <span class="keyword">for</span> (i = nonzero[<span class="number">0</span>] + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = i;</span><br><span class="line">        <span class="keyword">while</span> (t % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t /= <span class="number">10</span>;    <span class="comment">// 先去掉 i 末尾的 0，这是不影响的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">// t是偶数直接乘再取模10即可</span></span><br><span class="line">        &#123;</span><br><span class="line">            nonzero[i] = (nonzero[i - <span class="number">1</span>] * t) % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">// 否则转换成 res 数组来求</span></span><br><span class="line">        &#123;</span><br><span class="line">            five = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (t % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (five == <span class="number">3</span>)</span><br><span class="line">                    five = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    five++;</span><br><span class="line">                t /= <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nonzero[i] = res[((nonzero[i - <span class="number">1</span>] * t) % <span class="number">10</span>) / <span class="number">2</span>][five];</span><br><span class="line">            <span class="comment">// (nonzero[i-1]*t)%10/2 正好序号为：1, 2, 3, 4 中的一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nonzero[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">return</span> nonzero[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 阶乘末尾有多少个0，实际上只与5的因子数量有关，即求 n/5+n/25+n/625+...... */</span></span><br><span class="line"><span class="keyword">int</span> Factorial::CountZeros(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">2000000000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Super Pig, your input is too large, cannot Calculate. Sorry! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        n /= <span class="number">5</span>;</span><br><span class="line">        cnt += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出N!左边第二位的数字：用实数乘，超过100就除以10，最后取个位即可 */</span></span><br><span class="line"><span class="keyword">int</span> Factorial::SecondNum(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">4</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x *= i;</span><br><span class="line">        <span class="keyword">while</span> (x &gt;= <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>(x)) % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Factorial::CanDivide(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> nn, i, j, nums1, nums2;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">    j = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(<span class="number">1.0</span> * m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= j; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums1 = <span class="number">0</span>; <span class="comment">// 除数m的素因子i的数量</span></span><br><span class="line">            <span class="keyword">while</span> (m % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums1++;</span><br><span class="line">                m /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            nums2 = <span class="number">0</span>;</span><br><span class="line">            nn = n;</span><br><span class="line">            <span class="keyword">while</span> (nn)   <span class="comment">// 求 n 含有 i 因子的数量</span></span><br><span class="line">            &#123;</span><br><span class="line">                nn /= i;</span><br><span class="line">                nums2 += nn;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums2 &lt; nums1)   <span class="comment">// 少于m中所含i的数量，则m肯定无法整除n!</span></span><br><span class="line">            &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span> * m); <span class="comment">// 调整新的素因子前进范围</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ok || m &gt; n || m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::Output(<span class="keyword">int</span> n) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Super Pig, your input is so large, cannot Calculate. Sorry! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i, len = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; n &lt;&lt; <span class="string">"! = "</span>; <span class="comment">// 格式控制输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = data[n][<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; data[n][i];</span><br><span class="line">        <span class="keyword">if</span> (++len == <span class="number">58</span>)   <span class="comment">// 实际每输出50个字符就换行</span></span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="number">8</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len != <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    Factorial f;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        f.Calculate(n);</span><br><span class="line">        f.Output(n);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"该阶乘末尾第一个非0数字是: "</span> &lt;&lt; f.FirstNonZero(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"该阶乘总共拥有数字0的个数："</span> &lt;&lt; f.CountZeros(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"该阶乘的左边的第2位数字是："</span> &lt;&lt; f.SecondNum(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (f.CanDivide(m, n))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">" 可以整除 "</span> &lt;&lt; n &lt;&lt; <span class="string">"! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">" 不能整除 "</span> &lt;&lt; n &lt;&lt; <span class="string">"! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="高精度计算阶乘">高精度计算阶乘</h1><p>这实际上是最没有技术含量的问题，但是又会经常用到，所以还是得编写，优化它的计算。</p>
<p>首先看小于等于12的阶乘计算（计算结果不会超出32位范围）：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> factorial(<span class="built_in">int</span> <span class="built_in">n</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">if</span> (<span class="built_in">n</span> == <span class="number">1</span> || <span class="built_in">n</span> == <span class="number">0</span>) return <span class="number">1</span>;</span><br><span class="line">    return factorial(<span class="built_in">n</span> - <span class="number">1</span>) * <span class="built_in">n</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个递归程序简单明了，非常直观，然而一旦n&gt;12，则超过32位int型的范围出现错误结果，所以上面这个递归程序仅适合n&lt;=12的阶乘计算。为了计算较大n的阶乘，需要将高精度乘法算法纳入到阶乘计算中来，高精度乘法过程可以如下简单的描述（其中<code>A * B = C</code>，<code>A[0]</code>，<code>B[0]</code>，<code>C[0]</code>分别存储长度）：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for (i = <span class="number">1</span>; i &lt;= A[<span class="number">0</span>]; i++)</span><br><span class="line">&#123;</span><br><span class="line">    for (j = <span class="number">1</span>; j &lt;= B[<span class="number">0</span>]; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i + j - <span class="number">1</span>] += A[i] * B[j];        <span class="comment">// 当前i+j-1位对应项 + A[i] * B[j]</span></span><br><span class="line">        C[i + j] += C[i + j - <span class="number">1</span>] / <span class="number">10</span>;      <span class="comment">// 它的后一位 + 它的商（进位）</span></span><br><span class="line">        C[i + j - <span class="number">1</span>] %= <span class="number">10</span>;                 <span class="comment">// 它再取余即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">C[<span class="number">0</span>] = A[<span class="number">0</span>] + B[<span class="number">0</span>];</span><br><span class="line">while (C[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C[C[<span class="number">0</span>]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    C[<span class="number">0</span>]--;   <span class="comment">// 去头0，获得实际C的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有了这个高精度乘法之后，计算阶乘就可以简单的迭代进行：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">i</span> = <span class="number">2</span>; <span class="built_in">i</span> &lt;= n; <span class="built_in">i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    //将i转换成字符数组;</span><br><span class="line">    //执行高精度乘法：将上一次结果乘上i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="与数论有关">与数论有关</h1><p>由于阶乘到后面越来越大，巧妙的利用数论求得一些有趣的数字（数值）等成为阶乘算法的设计点，下面给出几道相关的问题与分析：</p>
<h2 id="计算阶乘末尾第一个非0数字：">计算阶乘末尾第一个非0数字：</h2><p>这是一个比较经典的问题，比较复杂的算法是利用一个艰难的数学公式，可惜我不会，从网上的资料学习中，整理出下面这个简单易懂的算法：</p>
<p>观察n!，可以发现在乘的过程中，对于任意 n > 1，n!的末尾第一个非0数字都是偶数。我们只需保留最后一位非零数。当要乘的数中含有因数5时，我们可以把所有的因数5都当作8来乘。这是因为:</p>
<p>…x2<em>5=…10（舍）或…60，最后一位非零数为6。而恰好2</em>8=16，末位为6。</p>
<p>…x4<em>5=…70（舍）或…20，最后一位非零数为2。而恰好4</em>8=32，末位为2。</p>
<p>…x6<em>5=…30（舍）或…80，最后一位非零数为8。而恰好6</em>8=48，末位为8。</p>
<p>…x8<em>5=…90（舍）或…40，最后一位非零数为4。而恰好8</em>8=64，末位为4。</p>
<p>(对于n > 1时，最后一位不会出现 1, 7, 3, 9，而永远是2, 4, 6, 8的循环出现)</p>
<p>因此，在迭代作乘法时，主要就是计算因子5的数量，同时可见因子5的个数以4为循环节（即只需要取它的数量对4取模）。那么对于不同情况下的因子5的数量，可以通过<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res[<span class="number">5</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>&#125;, &#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>&#125;, &#123;<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;, &#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>来得到，使用<code>nonzero[i]</code>表示i的阶乘的最后一位，那么：</p>
<p>如果t是偶数，则直接乘：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nonzero[i] = (nonzero[i - <span class="number">1</span>] * t) <span class="comment">% 10;</span></span><br></pre></td></tr></table></figure></p>
<p>否则：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nonzero[<span class="string">i</span>] = res[<span class="string">((nonzero[i - 1</span>] * t) % 10) / 2][five];</span><br></pre></td></tr></table></figure></p>
<p>其中t是除掉所有因子5的结果，five为因子5数量对4的模。相关题目：<br><a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的第1222题。不过这一道题注意的是，它的输入n并非只在32位int数值范围内，而是有很大的长度，所以计算这道变态题目时，需要利用到高精度除法(<code>n /= 5</code>)和高精度加法(<code>cnt += n</code>)。</p>
<h2 id="阶乘末尾有多少个0">阶乘末尾有多少个0</h2><p>分析发现，实际上形成末尾0，就是因子5的数量，而计算1~n之间包含一个因子i的个数的简单算法就是：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cnt</span> = <span class="number">0</span>;</span><br><span class="line"><span class="attribute">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">n</span> /= i;</span><br><span class="line">    <span class="attribute">cnt</span> += n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因此，直接将i换成5，就可以得到因子5的数量，也即n!末尾0的数量。相关题目：<a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的第2022题。</p>
<h2 id="返回阶乘左边的第二个数字">返回阶乘左边的第二个数字</h2><p>简单算法：用实数乘，超过100就除以10，最后取个位即可。因为整数部分的个位就是阶乘结果左边的第二个数字。相关题目：<a href="http://acm.tongji.edu.cn" target="_blank" rel="noopener">http://acm.tongji.edu.cn</a>的1016题。</p>
<h2 id="判断数值m是否可以整除n!">判断数值m是否可以整除n!</h2><p>算法：使用素因子判断法</p>
<p>A. 首先直接输出两种特殊情况：</p>
<p><code>m == 0</code> 则0肯定不会整除n!；</p>
<p><code>n &gt;= m</code> 则m肯定可以整除n!;</p>
<p>B. 那么就只剩最后一种情况：<code>m &gt; n</code>，我们从m的最小素因子取起，设素因子为i那么可以求得m的素因子i的个数<code>nums1</code>；再检查闭区间<code>i ~ n</code>之间的数，一共包含多少个素因子i，就可以简单的利用上面(2)中所介绍的数学公式进行计算得到<code>nums2</code>。如果<code>nums2 &lt; nums1</code>，就表示<code>1 ~ n</code>中包含素因子的数量 &lt; 除数m包含素因子i的数量，那么m必然不能整除n!，置<code>ok = false</code>。</p>
<p>C. 最后：如果<code>!ok or m &gt; n or m == 0</code>则不能整除；否则可以整除</p>
<p>相关题目：<a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的第1850题。</p>
<h2 id="数字N能否表示成若干个不相同的阶乘的和：">数字N能否表示成若干个不相同的阶乘的和：</h2><p>这里可以选择的阶乘为：0! ~ 9!，实际上这一题与数论无关，与搜索有关。相关题目：<a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的2358题。</p>
<p>分析，由于可供选择的阶乘数量较少，直接可以利用DFS搜索来做：</p>
<p>A. 首先将0 ~ 9的阶乘作一个表A[10]；再设置一个可以组成“和”的数组ans[N]。</p>
<p>B. 深度优先搜索方法：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">search</span>(<span class="built_in">n</span>)</span><br><span class="line">&#123;</span><br><span class="line">    for (i = <span class="built_in">n</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sum</span> += A[i];        //求和</span><br><span class="line">        //如果<span class="built_in">sum</span>在ans数组中不存在，则将<span class="built_in">sum</span>插入到ans[]数组中</span><br><span class="line">        <span class="built_in">search</span>(<span class="built_in">n</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sum</span> -= A[i];         //回溯</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C. 最后对于输入n，就在ans数组中查找是否存在n，如果存在，则表示n可以表示成不同的阶乘和，否则不行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java在ACM中的应用]]></title>
      <url>http://gyshgx868.github.io/2015/07/13/Java/java-acm/</url>
      <content type="html"><![CDATA[<h1 id="基本使用框架">基本使用框架</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.*;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.*;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Java的输入">Java的输入</h1><h2 id="Scanner类">Scanner类</h2><p>首先，先将Scanner初始化成一个对象：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> <span class="type">Scanner</span>(System.<span class="keyword">in</span>);</span><br></pre></td></tr></table></figure></p>
<p>读一个整数：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int n</span> = s.nextInt();</span><br></pre></td></tr></table></figure></p>
<p>相当于C或C++中的：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;<span class="built_in">n</span>);</span><br><span class="line">cin &gt;&gt; <span class="built_in">n</span>;</span><br></pre></td></tr></table></figure></p>
<p>读一个字符串：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str </span>= s.next()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>相当于C或C++中的：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">str</span>[<span class="number">500</span>];</span><br><span class="line">scanf(<span class="string">"%s"</span>, <span class="keyword">str</span>);</span><br><span class="line">cin &gt;&gt; <span class="keyword">str</span>;</span><br></pre></td></tr></table></figure></p>
<p>读一个浮点数：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">double t</span> = s.nextDouble();</span><br></pre></td></tr></table></figure></p>
<p>相当于C或C++中的：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double <span class="literal">t</span><span class="comment">;</span></span><br><span class="line">scanf(<span class="string">"%lf"</span>, <span class="symbol">&amp;t</span>)<span class="comment">;</span></span><br><span class="line">cin &gt;&gt; <span class="literal">t</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>读一整行：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str </span>= s.nextLine()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">str</span>[<span class="number">500</span>];</span><br><span class="line">gets(<span class="keyword">str</span>);</span><br><span class="line">cin.getline(<span class="keyword">str</span>, <span class="number">100</span>, <span class="string">'\0'</span>);</span><br></pre></td></tr></table></figure></p>
<p>判断是否有下一个输入可以用以下语句：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.hasNext()<span class="comment">;</span></span><br><span class="line">s.hasNextInt()<span class="comment">;</span></span><br><span class="line">s.hasNextDouble()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>少量的输入推荐使用<code>Scanner</code>，但是大量的数据的输入就推荐使用<code>BufferedReader</code>类了，就像可以用<code>scanf</code>替换<code>cin</code>一样。</p>
<h2 id="BufferedReader类">BufferedReader类</h2><p>Java的快速输入输出类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Reader r = <span class="keyword">new</span> Reader(System.in);</span><br><span class="line">        <span class="keyword">double</span> x = r.nextDouble();</span><br><span class="line">        <span class="keyword">int</span> n = r.nextInt();</span><br><span class="line">        String str = r.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> BufferedReader reader;</span><br><span class="line">    StringTokenizer tokenizer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reader</span><span class="params">(InputStream input)</span> </span>&#123;</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input));</span><br><span class="line">        tokenizer = <span class="keyword">new</span> StringTokenizer(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">            tokenizer = <span class="keyword">new</span> StringTokenizer(reader.readLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Java的输出">Java的输出</h1><h2 id="普通输出">普通输出</h2><p>输出一般可以直接用<code>System.out.print()</code>和<code>System.out.println()</code>，前者不输出换行，而后者输出。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.out.println(n);                 <span class="comment">//输出换行</span></span><br><span class="line"><span class="keyword">System</span>.out.<span class="keyword">print</span>(n);                   <span class="comment">//不输出换行</span></span><br><span class="line"><span class="keyword">System</span>.out.printf(<span class="string">"%s %d"</span>, str, n);    <span class="comment">//和C语言的printf用法类似</span></span><br></pre></td></tr></table></figure></p>
<p>或者可以使用如下的方法：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter <span class="keyword">out</span> = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedOutputStream(System.<span class="keyword">out</span>));</span><br><span class="line"><span class="keyword">out</span>.println(n);</span><br></pre></td></tr></table></figure></p>
<h2 id="浮点数输出">浮点数输出</h2><p>对于输出浮点数保留几位小数的问题，可以使用DecimalFormat类来实现：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.<span class="built_in">text</span>.*;</span><br><span class="line"><span class="comment">//三位四舍五入</span></span><br><span class="line">DecimalFormat f = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.00#"</span>);</span><br><span class="line"><span class="comment">//保留三位小数</span></span><br><span class="line">DecimalFormat g = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.000"</span>); </span><br><span class="line"><span class="keyword">double</span> a = <span class="number">123.45678</span>, b = <span class="number">0.12</span>; </span><br><span class="line">System.out.<span class="built_in">println</span>(f.format(a)); </span><br><span class="line">System.out.<span class="built_in">println</span>(f.format(b)); </span><br><span class="line">System.out.<span class="built_in">println</span>(g.format(b));</span><br></pre></td></tr></table></figure></p>
<p>以上代码的输出结果如下：</p>
<blockquote>
<p>123.457<br>.12<br>0.120</p>
</blockquote>
<h1 id="大数类">大数类</h1><p>在ACM中的做题时，经常会遇见一些大数的问题，这是当我们用C或是C++时就会觉得比较麻烦，因为我们必须要通过数组来模拟加减乘除的运算。因此我们可以使用Java提供的<code>BigInteger</code>、<code>BigDecimal</code>类来实现大数的计算。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">import</span> java.math.*<span class="comment">;</span></span><br><span class="line"><span class="keyword">BigInteger </span>a = <span class="keyword">BigInteger.valueOf(100);</span></span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">b </span>= <span class="keyword">BigInteger.valueOf(50);</span></span><br><span class="line"><span class="keyword">BigInteger </span>c = a.<span class="keyword">add(b); </span>   //c = a + <span class="keyword">b</span></span><br><span class="line"><span class="keyword">System.out.println(c); </span>     //输出c的值</span><br></pre></td></tr></table></figure></p>
<p>主要有以下方法可以使用：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//加</span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">add(BigInteger </span>other)</span><br><span class="line">//减</span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">subtract(BigInteger </span>other)</span><br><span class="line">//乘</span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">multiply(BigInteger </span>other)</span><br><span class="line">//除</span><br><span class="line"><span class="keyword">BigInteger </span>divide(<span class="keyword">BigInteger </span>other)</span><br><span class="line">//求余</span><br><span class="line"><span class="keyword">BigInteger </span>mod(<span class="keyword">BigInteger </span>other)</span><br><span class="line"><span class="symbol">int</span> compareTo(<span class="keyword">BigInteger </span>other)</span><br><span class="line"><span class="symbol">static</span> <span class="keyword">BigInteger </span>valueOf(long x)</span><br></pre></td></tr></table></figure></p>
<p><code>BigInteger</code>类的对象不可进行加减乘除四则运算，要调用其成员函数进行运算。另外<code>BigInteger</code>类不是<code>int</code>的扩展类型，所以不能把<code>int</code>类型值直接赋值给<code>BigInteger</code>。</p>
<p><code>BigInteger</code>类型有自己的常量：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigInteger.ZERO<span class="comment">;</span></span><br><span class="line">BigInteger.ONE<span class="comment">;</span></span><br><span class="line">BigInteger.TEN<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p><code>BigDecimal</code>的用法和<code>BigInteger</code>的用法类似，在这里就不多说了。</p>
<h1 id="字符串应用">字符串应用</h1><p>ACM中还会经常遇到字符串的处理方面的问题：<code>StringBuffer</code> 和<code>StringBuilder</code>这两个类有很多又用的方法可供使用。对于要进行大量变化的字符串处理建议使用<code>StringBuffer</code>类，而不是经常变化的字符串建议使用<code>String</code>类，它们特点取决于Java中对<code>String</code>和<code>StringBuffer</code>的内存分配不相同的原因了。另外字符串处理中经常可能要用到的是另外一个知识了，那就是正则表达式了，如果能够很好的撑握正则表达式的用法，那么字符串处理可以说你已经完成一半的任务了。如果正则表达式没有完全撑握，<code>StringBuilder</code>就是它的一个替代品。另外<code>StringTokenizer</code>也是一个很有用的工具，因为不会使用，所以在这里就不多谈了。</p>
<p>本节就简单的来讲一下<code>String</code>类的使用方法。<code>String</code>类用来存储字符串，可以用<code>charAt()</code>方法来取出其中某一下标的字符，下标从0开始：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"Hello"</span>;                     <span class="comment">// str.charAt(1) = 'e'</span></span><br></pre></td></tr></table></figure></p>
<p>用<code>substring</code>方法可得到子串：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System<span class="selector-class">.out</span><span class="selector-class">.println</span>(str.substring(<span class="number">0</span>, <span class="number">4</span>))   <span class="comment">// output "Hell"</span></span><br></pre></td></tr></table></figure></p>
<p>注意<code>substring</code>方法应用的是前闭后开区间，第二个参数位置的字符不包括在内。这样做使得<code>str.substring(a, b)</code>包含b - a个字符。</p>
<p>字符串连接可以直接用 + 号进行连接，如：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"Hello"</span><span class="comment">; </span></span><br><span class="line">String <span class="keyword">b </span>= <span class="string">"World"</span><span class="comment">; </span></span><br><span class="line">System.out.println(a + <span class="string">", "</span> + <span class="keyword">b </span>+ <span class="string">"!"</span>)<span class="comment">;    // output "Hello, World!"</span></span><br></pre></td></tr></table></figure></p>
<p>如想直接将字符串中的某字节改变，可以使用另外的StringBuffer类。</p>
<p>以下是一个简单的StringBuffer类的测试例子：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.StringBuffer;</span><br><span class="line"><span class="keyword">public</span> class StringBufferTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        StringBuffer <span class="built_in">str</span> = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">        StringBuffer str2 = <span class="built_in">str</span>;</span><br><span class="line">        <span class="built_in">str</span> = str2.<span class="built_in">append</span>(<span class="built_in">str</span>.<span class="built_in">reverse</span>());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">        <span class="built_in">str</span>.insert(<span class="number">1</span>, <span class="string">"aaaaaa"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>.charAt(<span class="number">1</span>));</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>.lastIndexOf(<span class="string">"ba"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序的输出结果如下：</p>
<blockquote>
<p>cbacba<br>caaaaaabacba<br>a<br>10</p>
</blockquote>
<h1 id="其他注意事项">其他注意事项</h1><ol>
<li>Java是面向对象的语言，思考方法需要变换一下，里面的函数统称为方法，不要搞错。</li>
<li>Java里的数组有些变动，多维数组的内部其实都是指针，所以Java不支持fill多维数组。 数组定义后必须初始化，如<code>int[] a = new int[100]</code>;</li>
<li>布尔类型为<code>boolean</code>，只有<code>true</code>和<code>false</code>二值，在if (…) / while (…) 等语句的条件中必须为<code>boolean</code>类型，在C/C++中的if (n % 2)类似的语句在Java中无法编译通过。</li>
<li>下面在java.util包里Arrays类的几个方法可替代C/C++里的<code>memset</code>、<code>qsort</code>/<code>sort</code>和 <code>bsearch</code>:<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrays.fill()<span class="comment">;</span></span><br><span class="line">Arrays.sort()<span class="comment">;</span></span><br><span class="line">Arrays.binarySearch()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java实现简易计算器]]></title>
      <url>http://gyshgx868.github.io/2015/07/13/Java/java-calculator/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><ol>
<li>使用JDK 1.8；</li>
<li>使用JFrame实现窗口，JFrame拥有比Applet更好的界面（个人认为）；</li>
<li>已经实现基本的+、-、*、/四则运算，支持小数点，正负数，未实现除0判断；</li>
</ol>
<a id="more"></a>
<h1 id="程序截图">程序截图</h1><p><img src="http://7xkd41.dl1.z0.glb.clouddn.com/calculator.png" alt="Java计算器"></p>
<h1 id="源代码">源代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line">    <span class="comment">//定义布局方式为网格包布局</span></span><br><span class="line">    <span class="keyword">private</span> GridBagLayout layout;</span><br><span class="line">    <span class="keyword">private</span> GridBagConstraints constraints;</span><br><span class="line">    <span class="comment">//计算结果显示区</span></span><br><span class="line">    <span class="keyword">private</span> JTextField displayField;</span><br><span class="line">    <span class="comment">//保存+, -, *, /, =命令</span></span><br><span class="line">    <span class="keyword">private</span> String lastCommand;</span><br><span class="line">    <span class="comment">//保存计算结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result;</span><br><span class="line">    <span class="comment">//判断是否为数字的开始</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"计算器"</span>);</span><br><span class="line">        setBounds(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        container = getContentPane();</span><br><span class="line">        layout = <span class="keyword">new</span> GridBagLayout();</span><br><span class="line">        container.setLayout(layout);</span><br><span class="line">        constraints = <span class="keyword">new</span> GridBagConstraints();</span><br><span class="line">        start = <span class="keyword">true</span>;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//默认执行的操作</span></span><br><span class="line">        lastCommand = <span class="string">"="</span>;</span><br><span class="line">        <span class="comment">//定义计算区域</span></span><br><span class="line">        displayField = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//计算区域的数字靠右显示</span></span><br><span class="line">        displayField.setHorizontalAlignment(JTextField.RIGHT);</span><br><span class="line">        <span class="comment">//定义计算区域的背景颜色</span></span><br><span class="line">        displayField.setBackground(Color.white);</span><br><span class="line">        <span class="comment">//定义计算区域的前景颜色</span></span><br><span class="line">        displayField.setForeground(Color.blue);</span><br><span class="line">        displayField.setFont(<span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">24</span>, <span class="number">24</span>));</span><br><span class="line">        <span class="comment">//定义计算区域的X，Y轴</span></span><br><span class="line">        constraints.gridx = <span class="number">0</span>;</span><br><span class="line">        constraints.gridy = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义计算区域的宽度和高度</span></span><br><span class="line">        constraints.gridwidth = <span class="number">4</span>;</span><br><span class="line">        constraints.gridheight = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//定义控件填充满剩余空间</span></span><br><span class="line">        constraints.fill = GridBagConstraints.BOTH;</span><br><span class="line">        <span class="comment">//定义计算区域的X，Y轴单位度量值</span></span><br><span class="line">        constraints.weightx = <span class="number">50</span>;</span><br><span class="line">        constraints.weighty = <span class="number">50</span>;</span><br><span class="line">        layout.setConstraints(displayField, constraints);</span><br><span class="line">        <span class="comment">//将计算区域加入到窗口中</span></span><br><span class="line">        container.add(displayField);</span><br><span class="line">        <span class="comment">//定义两个监视器</span></span><br><span class="line">        ActionListener insert = <span class="keyword">new</span> InsertAction();</span><br><span class="line">        ActionListener command = <span class="keyword">new</span> CommandAction();</span><br><span class="line">        <span class="comment">//通过定义好的方法添加按钮</span></span><br><span class="line">        addButton(<span class="string">"Bck"</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"CE"</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"CLEAR"</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"7"</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"8"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"9"</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"/"</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"4"</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"5"</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"6"</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"*"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"1"</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"2"</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"3"</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"-"</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"0"</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        <span class="comment">//只显示"-"号, "+"不显示</span></span><br><span class="line">        addButton(<span class="string">"+/-"</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"."</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"+"</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"Powered By GYSHGX868"</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"="</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        <span class="comment">//设置窗口的大小</span></span><br><span class="line">        setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">//设置窗口可见</span></span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">(String label, <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">int</span> with,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> height, ActionListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义添加按钮的方法</span></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">        constraints.gridx = row;</span><br><span class="line">        constraints.gridy = column;</span><br><span class="line">        constraints.gridwidth = with;</span><br><span class="line">        constraints.gridheight = height;</span><br><span class="line">        constraints.fill = GridBagConstraints.BOTH;</span><br><span class="line">        button.addActionListener(listener);</span><br><span class="line">        layout.setConstraints(button, constraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">        <span class="comment">//设置按钮间的间距</span></span><br><span class="line">        constraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置字体</span></span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">12</span>, <span class="number">18</span>));</span><br><span class="line">        button.setForeground(Color.MAGENTA);</span><br><span class="line">        button.setBorderPainted(<span class="keyword">true</span>);</span><br><span class="line">        button.setContentAreaFilled(<span class="keyword">true</span>);</span><br><span class="line">        button.setBounds(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        button.contains(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义Insert事件的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String input = event.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (start) &#123;</span><br><span class="line">                displayField.setText(<span class="string">""</span>); <span class="comment">//默认计算区域为空</span></span><br><span class="line">                start = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//如果开始输入的是"+/-"，以负数显示</span></span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"+/-"</span>))</span><br><span class="line">                    displayField.setText(displayField.getText() + <span class="string">"-"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!input.equals(<span class="string">"+/-"</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"Bck"</span>)) &#123;</span><br><span class="line">                    String str = displayField.getText();</span><br><span class="line">                    <span class="keyword">if</span> (str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果单击退格，实现退格的功能</span></span><br><span class="line">                        displayField.setText(str.substring(<span class="number">0</span>, str.length() - <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"CE"</span>) || input.equals(<span class="string">"CLEAR"</span>)) &#123;</span><br><span class="line">                    displayField.setText(<span class="string">"0"</span>);</span><br><span class="line">                    start = <span class="keyword">true</span>; <span class="comment">//实现清零和复位的功能</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (displayField.getText().trim().indexOf(<span class="string">"."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">//输入小数点时，判断是否已经输入过小数点</span></span><br><span class="line">                        displayField.setText(displayField.getText() + input);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    displayField.setText(displayField.getText() + input);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent evt)</span> </span>&#123;</span><br><span class="line">            String command = evt.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (start) &#123;</span><br><span class="line">                lastCommand = command;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                calculate(Double.parseDouble(displayField.getText()));</span><br><span class="line">                lastCommand = command;</span><br><span class="line">                start = <span class="keyword">true</span>; <span class="comment">//记忆输入的操作符号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastCommand.equals(<span class="string">"+"</span>))</span><br><span class="line">            result += x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"-"</span>))</span><br><span class="line">            result -= x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"*"</span>))</span><br><span class="line">            result *= x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"/"</span>))</span><br><span class="line">            result /= x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"="</span>))</span><br><span class="line">            result = x; <span class="comment">//实现计算的功能</span></span><br><span class="line">        <span class="comment">//显示计算的结果</span></span><br><span class="line">        displayField.setText(<span class="string">""</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化计算器</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">        calculator.setResizable(<span class="keyword">false</span>);</span><br><span class="line">        calculator.setForeground(Color.MAGENTA);</span><br><span class="line">        <span class="comment">//关闭窗口，退出程序</span></span><br><span class="line">        calculator.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
