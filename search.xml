<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Windows + VS2017超详细点云库（PCL）配置]]></title>
      <url>http://gyshgx868.github.io/2018/03/06/PointCloud/pcl-install/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p><a href="http://pointclouds.org/" target="_blank" rel="noopener">PCL（Point Cloud Library）</a>作为一个优秀的点云库，目前已经开源并且集成了许多优秀学者提出的高效的算法，值得深入学习。本文将以Windows 10和Visual Studio 2017开发环境为例，讲解如何配置点云库。<br><a id="more"></a></p>
<h1 id="环境">环境</h1><ul>
<li>Windows</li>
<li>Visual Studio</li>
</ul>
<h1 id="准备工作">准备工作</h1><h2 id="安装Visual_Studio">安装Visual Studio</h2><p>教程中使用的是Visual Studio 2017 Enterprise版本，具体的安装方式可从其他网站中搜索到，在此不做赘述。</p>
<h2 id="安装PCL_1-8">安装PCL 1.8</h2><p>首先去<a href="https://github.com/PointCloudLibrary/pcl/releases" target="_blank" rel="noopener">https://github.com/PointCloudLibrary/pcl/releases</a>下载点云库的安装包，我们需要的是<code>AllInOne</code>和<code>pdb</code>两个包。截止到此教程发布的时间，点云库的最新版本是1.8.1，如下图所示。</p>
<p><img src="/images/pcl-download-list.png" alt="pcl-download-list"></p>
<p>在这里需要根据自己机器的情况下载相应的版本（操作系统的位数，以及Visual Studio的版本）。我这里选择<code>PCL-1.8.1-AllInOne-msvc2017-win64.exe</code>和<code>pcl-1.8.1-pdb-msvc2017-win64.zip</code>两个文件。</p>
<p>这两个包根据网速不同，下载的时间也不同，耐心等待即可。</p>
<p>下载结束之后，运行我们下载得到的<code>PCL-1.8.1-AllInOne-msvc2017-win64.exe</code>文件进行安装。下面几幅图显示出了几个必要的步骤，未做说明的步骤直接下一步或者根据自己的喜好配置即可。</p>
<p><img src="/images/pcl-install-1.png" alt="pcl-install-1"></p>
<p>我在安装这类库相关的软件的时候都会尽量避免在路径中带有空格，因为有些软件在检查路径的时候可能会由于空格引发各种问题。因此我把默认的路径中的空格换成了下划线<code>_</code>。当然，Windows默认的Program Files目录无视这条规则，毕竟微软自己设置的目录名不会出现路径的问题。因此，我这里设置的路径是<code>C:\Program Files\PCL_1_8_1</code>。</p>
<p><img src="/images/pcl-install-2.png" alt="pcl-install-1"></p>
<p>这里需要配置需要安装的其他库，如果自己不确定到底有没有其他的软件安装过相关的库，那么就全部都勾选了，否则由于库的缺失，点云库就不能正常工作。</p>
<p><img src="/images/pcl-install-3.png" alt="pcl-install-1"></p>
<p>接下来点击<code>安装</code>便可以开始漫长的安装过程。</p>
<p>一段时间之后，会弹出来一个OpenNI2的安装窗口，此时直接一路下一步就好，但是一定要记住自己设置的安装路径。由于点云在安装的过程中会把所有的第三方库全部安装在点云安装目录下的<code>3rdparty</code>文件夹里。因此，为了保持文件夹的整洁，我这里也把OpenNI2安装在<code>3rdparty</code>文件夹里，即<code>C:\Program Files\PCL_1_8_1\3rdParty\OpenNI2</code>。</p>
<p>OpenNI2安装结束之后就完成了点云库的完整安装，安装目录下的样子和<code>3rdparty</code>文件夹下的样子如下图：</p>
<p><img src="/images/pcl-root.png" alt="pcl-root"></p>
<p><img src="/images/pcl-3rdparty.png" alt="pcl-3rdparty"></p>
<p>可以看到，我把所有的第三方库全部安装到了<code>3rdparty</code>文件夹中。</p>
<h2 id="环境变量配置">环境变量配置</h2><p>点云库安装完成之后，还有一个比较重要的步骤，就是配置Windows的环境变量。</p>
<p>右键点击<code>此电脑（我的电脑，计算机，这台电脑等名字）</code>，选择<code>属性</code>，接着点击左侧的<code>高级系统设置</code>，然后选择<code>高级</code>选项卡，点击下面的<code>环境变量...</code>按钮，此时便打开了环境变量的配置窗口。</p>
<p>此时，我们可以看到PCL的根目录以及OpenNI2的目录已经添加到了<code>系统变量</code>中。</p>
<p><img src="/images/pcl-system-var-pcl-root.png" alt="pcl-system-var-pcl-root"></p>
<p>然后，我们双击<code>系统变量</code>中的<code>Path</code>，再将以下的目录添加到<code>Path</code>中（注意最后一个OpenNI2的路径，要和自己刚刚安装的路径一样才行）：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%PCL_ROOT%</span><span class="symbol">\b</span>in</span><br><span class="line"><span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\V</span>TK<span class="symbol">\b</span>in</span><br><span class="line"><span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\F</span>LANN<span class="symbol">\b</span>in</span><br><span class="line"><span class="variable">%OPENNI2_REDIST64%</span></span><br><span class="line"><span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\Q</span>hull<span class="symbol">\b</span>in</span><br><span class="line"><span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\O</span>penNI2<span class="symbol">\T</span>ools</span><br></pre></td></tr></table></figure>
<p>如果用的电脑的操作系统是Windows 10的话，就上面几个路径一个一个复制下来，然后添加到<code>Path</code>的窗格中即可，非常方便，如下图所示：</p>
<p><img src="/images/pcl-system-var-path.png" alt="pcl-system-var-path"></p>
<p>如果是其他版本的Windows系统，则需要把上面的几个路径写成下面的这种形式，然后叠加到<code>Path</code>环境变量的后面（具体的做法可以去搜索Windows 7环境变量的配置方式）：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%PCL_ROOT%</span><span class="symbol">\b</span>in;<span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\V</span>TK<span class="symbol">\b</span>in;<span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\F</span>LANN<span class="symbol">\b</span>in;<span class="variable">%OPENNI2_REDIST64%</span>;<span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\Q</span>hull<span class="symbol">\b</span>in;<span class="variable">%PCL_ROOT%</span><span class="symbol">\3</span>rdParty<span class="symbol">\O</span>penNI2<span class="symbol">\T</span>ools</span><br></pre></td></tr></table></figure>
<p>以上步骤搞定之后，重启电脑来应用环境变量。</p>
<h2 id="Visual_Studio开发环境配置">Visual Studio开发环境配置</h2><p>Visual Studio的环境配置比较麻烦，经常一堆错误。因此，下面的步骤需要仔细的按照步骤做。</p>
<p>Visual Studio提供了两种编译模式：Debug和Release。Debug模式下，生成的应用程序中会插入许多的调试指令，因此调试起来及其方便，但是大幅度降低了程序的运行速度；Release模式便会提高程序的速度，但是调试相对较困难一些（具体的区别请自行去Baidu或者Google）。在某些需求下，可能需要处理大量的数据，因此需要使用Release模式生成应用程序。本教程将对两种模式分别进行配置，适应不同的需求。</p>
<p>首先打开Visual Studio，然后新建一个C++工程，我这里创建的C++工程名字是<code>pcl_test</code>。具体创建过程在此不做赘述，如下图所示：</p>
<p><img src="/images/pcl-vs-project.png" alt="pcl-vs-project"></p>
<p>接下来，右键点击<code>解决方案管理器</code>中的<code>pcl_test</code>，然后选择<code>属性</code>。这时便打开了项目属性窗口。</p>
<p>我们先来配置Debug模式。首先在窗口最上方选择<code>Debug</code>，然后选择自己在下载点云库时候选择的平台，我这里选择<code>x64</code>（注意这里一定不要选错），如下图所示：</p>
<p><img src="/images/pcl-vs-project-property-1.png" alt="pcl-vs-project-property-1"></p>
<p>接着点击该窗口左侧的<code>VC++ 目录</code>，然后点击右侧的<code>包含目录</code>右侧的下拉菜单，选择<code>编辑...</code>，将以下目录填入窗口中：</p>
<ul>
<li>C:\Program Files\PCL_1_8_1\3rdParty\OpenNI2\Include</li>
<li>C:\Program Files\PCL_1_8_1\include\pcl-<code>1.8</code></li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\VTK\include\vtk-<code>8.0</code></li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\QHull\include</li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\FLANN\include</li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\Eigen\eigen<code>3</code></li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\Boost\include\boost-<code>1_64</code></li>
</ul>
<p><strong>注意</strong>：这里的<code>C:\Program Files\PCL_1_8_1</code>是刚刚安装点云库的路径，根据刚刚安装点云的路径进行修改。同时还要注意高亮字体的版本问题，需要打开相关目录进行检查。比如我这里的vtk就是<code>8.0</code>的，而boost是<code>1.64</code>版本的。配置好之后点击<code>确定</code>即可如下图所示：</p>
<p><img src="/images/pcl-vs-project-property-2.png" alt="pcl-vs-project-property-2"></p>
<p>然后点击右侧的<code>库目录</code>右侧的下拉菜单，选择<code>编辑...</code>，将以下目录填入窗口中：</p>
<ul>
<li>C:\Program Files\PCL_1_8_1\3rdParty\OpenNI2\Lib</li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\VTK\lib</li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\Qhull\lib</li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\FLANN\lib</li>
<li>C:\Program Files\PCL_1_8_1\3rdParty\Boost\lib</li>
<li>C:\Program Files\PCL_1_8_1\lib</li>
</ul>
<p>同样需要注意路径问题，配置好之后点击<code>确定</code>即可，如下图所示：</p>
<p><img src="/images/pcl-vs-project-property-3.png" alt="pcl-vs-project-property-3"></p>
<p>然后点击属性页中的<code>C/C++</code>下的<code>预处理器</code>，点击右侧的<code>预处理器定义</code>右侧的下拉菜单，选择<code>编辑...</code>，添加如下两条定义：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">_SCL_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="variable">_CRT_SECURE_NO_WARNINGS</span></span><br></pre></td></tr></table></figure>
<p>然后再点击<code>预编译头</code>，将右侧的<code>预编译头</code>设置为<code>不使用预编译头</code>。这个设置可以依据自己的习惯决定，可以省略。</p>
<p>接着点击属性页中的<code>链接器</code>下的<code>输入</code>，点击右侧的<code>附加依赖项</code>右侧的下拉菜单，选择<code>编辑...</code>，将如下文件名填写到窗口中：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">vtknetcdf_c++-gd.lib</span><br><span class="line">pcl_common_debug.lib</span><br><span class="line">pcl_features_debug.lib</span><br><span class="line">pcl_filters_debug.lib</span><br><span class="line">pcl_io_ply_debug.lib</span><br><span class="line">pcl_io_debug.lib</span><br><span class="line">pcl_kdtree_debug.lib</span><br><span class="line">pcl_keypoints_debug.lib</span><br><span class="line">pcl_ml_debug.lib</span><br><span class="line">pcl_octree_debug.lib</span><br><span class="line">pcl_outofcore_debug.lib</span><br><span class="line">pcl_people_debug.lib</span><br><span class="line">pcl_recognition_debug.lib</span><br><span class="line">pcl_registration_debug.lib</span><br><span class="line">pcl_sample_consensus_debug.lib</span><br><span class="line">pcl_search_debug.lib</span><br><span class="line">pcl_segmentation_debug.lib</span><br><span class="line">pcl_stereo_debug.lib</span><br><span class="line">pcl_surface_debug.lib</span><br><span class="line">pcl_tracking_debug.lib</span><br><span class="line">pcl_visualization_debug.lib</span><br><span class="line">libboost_atomic-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_bzip2-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_chrono-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_container-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_context-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_coroutine-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_date_time-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_exception-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_fiber-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_filesystem-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_graph-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_graph_parallel-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_iostreams-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_locale-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_log-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_log_setup-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_c99-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_c99f-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_c99l-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_tr1-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_tr1f-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_tr1l-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_mpi-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_numpy3-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_numpy-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_prg_exec_monitor-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_program_options-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_python3-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_python-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_random-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_regex-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_serialization-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_signals-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_system-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_test_exec_monitor-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_thread-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_timer-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_type_erasure-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_unit_test_framework-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_wave-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_wserialization-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_zlib-vc141-mt-gd-<span class="number">1</span>_64.lib</span><br><span class="line">flann-gd.lib</span><br><span class="line">flann_cpp-gd.lib</span><br><span class="line">flann_cpp_s-gd.lib</span><br><span class="line">flann_s-gd.lib</span><br><span class="line">qhull_d.lib</span><br><span class="line">qhullcpp_d.lib</span><br><span class="line">qhullstatic_d.lib</span><br><span class="line">qhullstatic_r_d.lib</span><br><span class="line">qhull_p_d.lib</span><br><span class="line">qhull_r_d.lib</span><br><span class="line">vtkalglib-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkChartsCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonColor-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonComputationalGeometry-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonDataModel-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonExecutionModel-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonMath-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonMisc-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonSystem-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkCommonTransforms-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkDICOMParser-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkDomainsChemistry-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkexoIIc-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkexpat-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersAMR-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersExtraction-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersFlowPaths-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersGeneral-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersGeneric-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersGeometry-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersHybrid-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersHyperTree-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersImaging-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersModeling-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersParallel-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersParallelImaging-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersPoints-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersProgrammable-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersSelection-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersSMP-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersSources-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersStatistics-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersTexture-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersTopology-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkFiltersVerdict-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkfreetype-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkGeovisCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkgl2ps-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkhdf5-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkhdf5_hl-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingColor-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingFourier-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingGeneral-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingHybrid-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingMath-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingMorphological-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingSources-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingStatistics-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkImagingStencil-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkInfovisCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkInfovisLayout-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkInteractionImage-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkInteractionStyle-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkInteractionWidgets-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOAMR-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOEnSight-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOExodus-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOExport-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOExportOpenGL-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOGeometry-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOImage-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOImport-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOInfovis-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOLegacy-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOLSDyna-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOMINC-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOMovie-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIONetCDF-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOParallel-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOParallelXML-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOPLY-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOSQL-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOTecplotTable-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOVideo-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOXML-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkIOXMLParser-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkjpeg-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkjsoncpp-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtklibharu-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtklibxml2-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtklz4-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkmetaio-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkNetCDF-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkoggtheora-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkParallelCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkpng-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkproj4-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingAnnotation-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingContext2D-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingContextOpenGL-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingFreeType-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingGL2PS-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingImage-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingLabel-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingLIC-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingLOD-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingOpenGL-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingVolume-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkRenderingVolumeOpenGL-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtksqlite-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtksys-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtktiff-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkverdict-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkViewsContext2D-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkViewsCore-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkViewsInfovis-<span class="number">8.0</span>-gd.lib</span><br><span class="line">vtkzlib-<span class="number">8.0</span>-gd.lib</span><br><span class="line">opengl32.lib</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：这些文件名中涉及到版本问题。<code>libboost_atomic-vc141-mt-gd-1_64.lib</code>等文件中的<code>vc141</code>、<code>1_64</code>等文字需要到<code>C:\Program Files\PCL_1_8_1\3rdParty\Boost\lib</code>文件夹下进行确认后修改；<code>vtkalglib-8.0-gd.lib</code>等文件中的<code>8.0</code>需要到<code>C:\Program Files\PCL_1_8_1\3rdParty\VTK\lib</code>文件夹下进行确认后修改。同样，这两个路径根据自己电脑的安装情况而定。</p>
<p>这时，点击确定，我们在Debug模式下的点云开发环境就配置完成了。去网上找个实例代码粘贴，如果成功编译运行就代表配置成功了。</p>
<p>接下来说一下Release模式的配置。还是右键点击<code>解决方案管理器</code>中的<code>pcl_test</code>，然后选择<code>属性</code>，然后在窗口最上方选择<code>Release</code>，然后选择自己在下载点云库时候选择的平台。</p>
<p>然后按照Debug模式的配置方式依次配置，只是<code>链接器</code>下的<code>输入</code>中的<code>附加依赖项</code>中的文件列表不相同，需要填写为下面的文件：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">pcl_common_release.lib</span><br><span class="line">pcl_features_release.lib</span><br><span class="line">pcl_filters_release.lib</span><br><span class="line">pcl_io_release.lib</span><br><span class="line">pcl_io_ply_release.lib</span><br><span class="line">pcl_kdtree_release.lib</span><br><span class="line">pcl_keypoints_release.lib</span><br><span class="line">pcl_ml_release.lib</span><br><span class="line">pcl_octree_release.lib</span><br><span class="line">pcl_outofcore_release.lib</span><br><span class="line">pcl_people_release.lib</span><br><span class="line">pcl_recognition_release.lib</span><br><span class="line">pcl_registration_release.lib</span><br><span class="line">pcl_sample_consensus_release.lib</span><br><span class="line">pcl_search_release.lib</span><br><span class="line">pcl_segmentation_release.lib</span><br><span class="line">pcl_stereo_release.lib</span><br><span class="line">pcl_surface_release.lib</span><br><span class="line">pcl_tracking_release.lib</span><br><span class="line">pcl_visualization_release.lib</span><br><span class="line">libboost_atomic-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_chrono-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_container-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_context-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_coroutine-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_date_time-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_exception-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_filesystem-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_graph-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_iostreams-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_locale-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_log-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_log_setup-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_c99-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_c99f-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_c99l-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_tr1-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_tr1f-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_math_tr1l-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_mpi-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_prg_exec_monitor-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_program_options-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_random-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_regex-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_serialization-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_signals-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_system-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_test_exec_monitor-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_thread-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_timer-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_unit_test_framework-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_wave-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">libboost_wserialization-vc141-mt-<span class="number">1</span>_64.lib</span><br><span class="line">vtkalglib-<span class="number">8.0</span>.lib</span><br><span class="line">vtkChartsCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonColor-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonComputationalGeometry-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonDataModel-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonExecutionModel-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonMath-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonMisc-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonSystem-<span class="number">8.0</span>.lib</span><br><span class="line">vtkCommonTransforms-<span class="number">8.0</span>.lib</span><br><span class="line">vtkDICOMParser-<span class="number">8.0</span>.lib</span><br><span class="line">vtkDomainsChemistry-<span class="number">8.0</span>.lib</span><br><span class="line">vtkexoIIc-<span class="number">8.0</span>.lib</span><br><span class="line">vtkexpat-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersAMR-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersExtraction-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersFlowPaths-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersGeneral-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersGeneric-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersGeometry-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersHybrid-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersHyperTree-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersImaging-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersModeling-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersParallel-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersParallelImaging-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersPoints-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersProgrammable-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersSelection-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersSMP-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersSources-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersStatistics-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersTexture-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersTopology-<span class="number">8.0</span>.lib</span><br><span class="line">vtkFiltersVerdict-<span class="number">8.0</span>.lib</span><br><span class="line">vtkfreetype-<span class="number">8.0</span>.lib</span><br><span class="line">vtkGeovisCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkgl2ps-<span class="number">8.0</span>.lib</span><br><span class="line">vtkhdf5-<span class="number">8.0</span>.lib</span><br><span class="line">vtkhdf5_hl-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingColor-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingFourier-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingGeneral-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingHybrid-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingMath-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingMorphological-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingSources-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingStatistics-<span class="number">8.0</span>.lib</span><br><span class="line">vtkImagingStencil-<span class="number">8.0</span>.lib</span><br><span class="line">vtkInfovisCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkInfovisLayout-<span class="number">8.0</span>.lib</span><br><span class="line">vtkInteractionImage-<span class="number">8.0</span>.lib</span><br><span class="line">vtkInteractionStyle-<span class="number">8.0</span>.lib</span><br><span class="line">vtkInteractionWidgets-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOAMR-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOEnSight-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOExodus-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOExport-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOExportOpenGL-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOGeometry-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOImage-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOImport-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOInfovis-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOLegacy-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOLSDyna-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOMINC-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOMovie-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIONetCDF-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOParallel-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOParallelXML-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOPLY-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOSQL-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOTecplotTable-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOVideo-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOXML-<span class="number">8.0</span>.lib</span><br><span class="line">vtkIOXMLParser-<span class="number">8.0</span>.lib</span><br><span class="line">vtkjpeg-<span class="number">8.0</span>.lib</span><br><span class="line">vtkjsoncpp-<span class="number">8.0</span>.lib</span><br><span class="line">vtklibharu-<span class="number">8.0</span>.lib</span><br><span class="line">vtklibxml2-<span class="number">8.0</span>.lib</span><br><span class="line">vtklz4-<span class="number">8.0</span>.lib</span><br><span class="line">vtkmetaio-<span class="number">8.0</span>.lib</span><br><span class="line">vtkNetCDF-<span class="number">8.0</span>.lib</span><br><span class="line">vtknetcdf_c++.lib</span><br><span class="line">vtkoggtheora-<span class="number">8.0</span>.lib</span><br><span class="line">vtkParallelCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkpng-<span class="number">8.0</span>.lib</span><br><span class="line">vtkproj4-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingAnnotation-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingContext2D-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingContextOpenGL-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingFreeType-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingGL2PS-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingImage-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingLabel-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingLIC-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingLOD-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingOpenGL-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingVolume-<span class="number">8.0</span>.lib</span><br><span class="line">vtkRenderingVolumeOpenGL-<span class="number">8.0</span>.lib</span><br><span class="line">vtksqlite-<span class="number">8.0</span>.lib</span><br><span class="line">vtksys-<span class="number">8.0</span>.lib</span><br><span class="line">vtktiff-<span class="number">8.0</span>.lib</span><br><span class="line">vtkverdict-<span class="number">8.0</span>.lib</span><br><span class="line">vtkViewsContext2D-<span class="number">8.0</span>.lib</span><br><span class="line">vtkViewsCore-<span class="number">8.0</span>.lib</span><br><span class="line">vtkViewsInfovis-<span class="number">8.0</span>.lib</span><br><span class="line">vtkzlib-<span class="number">8.0</span>.lib</span><br><span class="line">flann.lib</span><br><span class="line">flann_cpp.lib</span><br><span class="line">flann_cpp_s.lib</span><br><span class="line">flann_s.lib</span><br><span class="line">qhullcpp_d.lib</span><br><span class="line">qhullstatic.lib</span><br><span class="line">qhullstatic_r.lib</span><br><span class="line">qhull.lib</span><br><span class="line">qhull_p.lib</span><br><span class="line">qhull_r.lib</span><br><span class="line">OpenNI2.lib</span><br><span class="line">kernel32.lib</span><br><span class="line">user32.lib</span><br><span class="line">gdi32.lib</span><br><span class="line">winspool.lib</span><br><span class="line">shell32.lib</span><br><span class="line">ole32.lib</span><br><span class="line">oleaut32.lib</span><br><span class="line">uuid.lib</span><br><span class="line">comdlg32.lib</span><br><span class="line">advapi32.lib</span><br><span class="line">comctl32.lib</span><br><span class="line">wsock32.lib</span><br><span class="line">glu32.lib</span><br><span class="line">opengl32.lib</span><br><span class="line">ws2_32.lib</span><br><span class="line">Psapi.lib</span><br></pre></td></tr></table></figure>
<p>同样需要注意版本问题。</p>
<p>这样，我们的Debug模式和Release模式就全部配置完成了，根据自己的需要选择即可。为了减少其他工程配置的负担，可以将这些配置保存为属性表，方法可以自行搜索，在此就不做赘述了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python运算符]]></title>
      <url>http://gyshgx868.github.io/2015/10/03/Python/06-python-operators/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-operators.html#ysf3" target="_blank" rel="noopener">runoob.com - Python运算符</a><br><a id="more"></a></p>
<h1 id="什么是运算符？">什么是运算符？</h1><p>本章节主要说明Python的运算符。举个简单的例子：<code>4 + 5 = 9</code>。例子中，4和5被称为操作数，“+”号为运算符。</p>
<p>Python语言支持以下类型的运算符：</p>
<ul>
<li>算术运算符</li>
<li>比较（关系）运算符</li>
<li>赋值运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>成员运算符</li>
<li>身份运算符</li>
<li>运算符优先级</li>
</ul>
<p>接下来让我们一个个来学习Python的运算符。</p>
<h1 id="Python算术运算符">Python算术运算符</h1><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加 - 两个对象相加</td>
<td>a + b 输出结果 30</td>
</tr>
<tr>
<td>-</td>
<td>减 - 得到负数或是一个数减去另一个数</td>
<td>a - b 输出结果 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td>a * b 输出结果 200</td>
</tr>
<tr>
<td>/</td>
<td>除 - x除以y</td>
<td>b / a 输出结果 2</td>
</tr>
<tr>
<td>%</td>
<td>取模 - 返回除法的余数</td>
<td>b % a 输出结果 0</td>
</tr>
<tr>
<td>**</td>
<td>幂 - 返回x的y次幂</td>
<td>a**b 为10的20次方，输出结果 100000000000000000000</td>
</tr>
<tr>
<td>//</td>
<td>取整除 - 返回商的整数部分</td>
<td>9//2 输出结果 4，9.0//2.0 输出结果 4.0</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有算术运算符的操作：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line">print <span class="string">"Line 1 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a - b</span><br><span class="line">print <span class="string">"Line 2 - Value of c is "</span>, c </span><br><span class="line"></span><br><span class="line">c = a * b</span><br><span class="line">print <span class="string">"Line 3 - Value of c is "</span>, c </span><br><span class="line"></span><br><span class="line">c = a / b</span><br><span class="line">print <span class="string">"Line 4 - Value of c is "</span>, c </span><br><span class="line"></span><br><span class="line">c = a % b</span><br><span class="line">print <span class="string">"Line 5 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">a = 2</span><br><span class="line">b = 3</span><br><span class="line">c = a**b </span><br><span class="line">print <span class="string">"Line 6 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = 5</span><br><span class="line">c = a//b </span><br><span class="line">print <span class="string">"Line 7 - Value of c is "</span>, c</span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - Value of c is 31<br>Line 2 - Value of c is 11<br>Line 3 - Value of c is 210<br>Line 4 - Value of c is 2<br>Line 5 - Value of c is 1<br>Line 6 - Value of c is 8<br>Line 7 - Value of c is 2</p>
</blockquote>
<h1 id="Python比较运算符">Python比较运算符</h1><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>等于 - 比较对象是否相等</td>
<td>(a == b) 返回 False。</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a != b) 返回 true。</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a &lt;&gt; b) 返回 true。这个运算符类似 !=。</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于 - 返回x是否大于y</td>
<td>(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td>(a &lt; b) 返回 true。</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于 - 返回x是否大于等于y。</td>
<td>(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于 - 返回x是否小于等于y。</td>
<td>(a &lt;= b) 返回 true。</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有比较运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a == b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is not equal to b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a != b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a is not equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a is equal to b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &lt;&gt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is not equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is equal to b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &lt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a is less than b"</span> </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a is not less than b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &gt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - a is greater than b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - a is not greater than b"</span></span><br><span class="line"></span><br><span class="line">a = 5;</span><br><span class="line">b = 20;</span><br><span class="line"><span class="keyword">if</span> ( a &lt;= b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 6 - a is either less than or equal to  b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 6 - a is neither less than nor equal to  b"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( b &gt;= a ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 7 - b is either greater than  or equal to b"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 7 - b is neither greater than  nor equal to b"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a is not equal to b<br>Line 2 - a is not equal to b<br>Line 3 - a is not equal to b<br>Line 4 - a is not less than b<br>Line 5 - a is greater than b<br>Line 6 - a is either less than or equal to b<br>Line 7 - b is either greater than or equal to b</p>
</blockquote>
<h1 id="Python赋值运算符">Python赋值运算符</h1><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>简单的赋值运算符</td>
<td>c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算符</td>
<td>c += a 等效于 c = c + a</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
<td>c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
<td>c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
<td>c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
<td>c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算符</td>
<td>c **= a 等效于 c = c ** a</td>
</tr>
<tr>
<td>//=</td>
<td>取整除赋值运算符</td>
<td>c //= a 等效于 c = c // a</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有赋值运算符的操作：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">c</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> = a + b</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 1 - Value of c is "</span>, <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> += a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 2 - Value of c is "</span>, <span class="built_in">c</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> *= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 3 - Value of c is "</span>, <span class="built_in">c</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> /= a </span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 4 - Value of c is "</span>, <span class="built_in">c</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span>  = <span class="number">2</span></span><br><span class="line"><span class="built_in">c</span> %= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 5 - Value of c is "</span>, <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> **= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 6 - Value of c is "</span>, <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> <span class="comment">//= a</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"Line 7 - Value of c is "</span>, <span class="built_in">c</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - Value of c is 31<br>Line 2 - Value of c is 52<br>Line 3 - Value of c is 1092<br>Line 4 - Value of c is 52<br>Line 5 - Value of c is 2<br>Line 6 - Value of c is 2097152<br>Line 7 - Value of c is 99864</p>
</blockquote>
<h1 id="Python位运算符">Python位运算符</h1><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>按位与运算符</td>
<td>(a &amp; b) 输出结果 12，二进制解释：0000 1100</td>
</tr>
<tr>
<td>&#124;</td>
<td>按位或运算符</td>
<td>(a &#124; b) 输出结果 61，二进制解释：0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符</td>
<td>(a ^ b) 输出结果 49，二进制解释：0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符</td>
<td>(~a) 输出结果 -61，二进制解释：1100 0011，在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符</td>
<td>a &lt;&lt; 2 输出结果 240，二进制解释：1111 0000</td>
</tr>
<tr>
<td>>></td>
<td>右移动运算符</td>
<td>a &gt;&gt; 2 输出结果 15，二进制解释：0000 1111</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有位运算符的操作：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">a = <span class="number">60</span>            # <span class="number">60</span> = <span class="number">0011</span> <span class="number">1100</span> </span><br><span class="line">b = <span class="number">13</span>            # <span class="number">13</span> = <span class="number">0000</span> <span class="number">1101</span> </span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a &amp; b;        # <span class="number">12</span> = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">print <span class="string">"Line 1 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a | b;        # <span class="number">61</span> = <span class="number">0011</span> <span class="number">1101</span> </span><br><span class="line">print <span class="string">"Line 2 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a ^ b;        # <span class="number">49</span> = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">print <span class="string">"Line 3 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = ~a;           # <span class="number">-61</span> = <span class="number">1100</span> <span class="number">0011</span></span><br><span class="line">print <span class="string">"Line 4 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;       # <span class="number">240</span> = <span class="number">1111</span> <span class="number">0000</span></span><br><span class="line">print <span class="string">"Line 5 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;       # <span class="number">15</span> = <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">print <span class="string">"Line 6 - Value of c is "</span>, c</span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - Value of c is 12<br>Line 2 - Value of c is 61<br>Line 3 - Value of c is 49<br>Line 4 - Value of c is -61<br>Line 5 - Value of c is 240<br>Line 6 - Value of c is 15</p>
</blockquote>
<h1 id="Python逻辑运算符">Python逻辑运算符</h1><p>Python语言支持逻辑运算符，以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>布尔“与” - 如果x为False，x and y返回False，否则它返回y的计算值。</td>
<td>(a and b) 返回 true。</td>
</tr>
<tr>
<td>or</td>
<td>布尔“或” - 如果x是True，它返回True，否则它返回y的计算值。</td>
<td>(a or b) 返回 true。</td>
</tr>
<tr>
<td>not</td>
<td>布尔“非” - 如果x为True，返回False。如果x为False，它返回True。</td>
<td>not(a and b) 返回 false。</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有逻辑运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">c = 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a and b are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - Either a is not true or b is not true"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">or</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - Either a is true or b is true or both are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - Neither a is true nor b is true"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = 0</span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a and b are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - Either a is not true or b is not true"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">or</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - Either a is true or b is true or both are true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - Neither a is true nor b is true"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span>( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - Either a is not true or b is  not true or both are not true"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 5 - a and b are true"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a and b are true<br>Line 2 - Either a is true or b is true or both are true<br>Line 3 - Either a is not true or b is not true<br>Line 4 - Either a is true or b is true or both are true<br>Line 5 - Either a is not true or b is  not true or both are not true</p>
</blockquote>
<h1 id="Python成员运算符">Python成员运算符</h1><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>如果在指定的序列中找到值返回True，否则返回False。</td>
<td>x 在 y序列中 , 如果x在y序列中返回True。</td>
</tr>
<tr>
<td>not in</td>
<td>如果在指定的序列中没有找到值返回True，否则返回False。</td>
<td>x 不在 y序列中 , 如果x不在y序列中返回True。</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有成员运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">list = [1, 2, 3, 4, 5 ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is available in the given list"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a is not available in the given list"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - b is not available in the given list"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - b is available in the given list"</span></span><br><span class="line"></span><br><span class="line">a = 2</span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is available in the given list"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a is not available in the given list"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a is not available in the given list<br>Line 2 - b is not available in the given list<br>Line 3 - a is available in the given list</p>
</blockquote>
<h1 id="Python身份运算符">Python身份运算符</h1><p>身份运算符用于比较两个对象的存储单元。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>is</td>
<td>is是判断两个标识符是不是引用自一个对象</td>
<td>x is y, 如果 id(x) 等于 id(y) , is 返回结果 1</td>
</tr>
<tr>
<td>is not</td>
<td>is not是判断两个标识符是不是引用自不同对象</td>
<td>x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有身份运算符的操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a is b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a and b have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 1 - a and b do not have same identity"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( id(a) == id(b) ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a and b have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 2 - a and b do not have same identity"</span></span><br><span class="line"></span><br><span class="line">b = 30</span><br><span class="line"><span class="keyword">if</span> ( a is b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a and b have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 3 - a and b do not have same identity"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a is <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a and b do not have same identity"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> <span class="string">"Line 4 - a and b have same identity"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Line 1 - a and b have same identity<br>Line 2 - a and b have same identity<br>Line 3 - a and b do not have same identity<br>Line 4 - a and b do not have same identity </p>
</blockquote>
<h1 id="Python运算符优先级">Python运算符优先级</h1><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>**</td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>>> &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>^ &#124;</td>
<td>位运算符</td>
</tr>
<tr>
<td>&lt;= &lt; &gt; &gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&lt;&gt; == !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>= %= /= //= -= += *= **=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not or and</td>
<td>逻辑运算符</td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有运算符优先级的操作：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">a = 20</span><br><span class="line">b = 10</span><br><span class="line">c = 15</span><br><span class="line">d = 5</span><br><span class="line">e = 0</span><br><span class="line"></span><br><span class="line">e = (a + b) * c / d       <span class="comment">#( 30 * 15 ) / 5</span></span><br><span class="line">print <span class="string">"Value of (a + b) * c / d is "</span>,  e</span><br><span class="line"></span><br><span class="line">e = ((a + b) * c) / d     <span class="comment"># (30 * 15 ) / 5</span></span><br><span class="line">print <span class="string">"Value of ((a + b) * c) / d is "</span>,  e</span><br><span class="line"></span><br><span class="line">e = (a + b) * (c / d);    <span class="comment"># (30) * (15/5)</span></span><br><span class="line">print <span class="string">"Value of (a + b) * (c / d) is "</span>,  e</span><br><span class="line"></span><br><span class="line">e = a + (b * c) / d;      <span class="comment">#  20 + (150/5)</span></span><br><span class="line">print <span class="string">"Value of a + (b * c) / d is "</span>,  e</span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Value of (a + b) * c / d is 90<br>Value of ((a + b) * c) / d is 90<br>Value of (a + b) * (c / d) is 90<br>Value of a + (b * c) / d is 50</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python变量类型]]></title>
      <url>http://gyshgx868.github.io/2015/10/03/Python/05-python-variable-types/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-variable-types.html" target="_blank" rel="noopener">runoob.com - Python变量类型</a></p>
<p>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。</p>
<p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p>
<p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p>
<a id="more"></a>
<h1 id="变量赋值">变量赋值</h1><p>Python中的变量不需要声明，变量的赋值操作既是变量声明和定义的过程。</p>
<p>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</p>
<p>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<p>等号（=）用来给变量赋值。</p>
<p>等号（=）运算符左边是一个变量名，等号（=）运算符右边是存储在变量中的值。例如：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">counter = 100 <span class="comment"># 赋值整型变量</span></span><br><span class="line">miles = 1000.0 <span class="comment"># 浮点型</span></span><br><span class="line">name = <span class="string">"John"</span> <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line">print counter</span><br><span class="line">print miles</span><br><span class="line">print name</span><br></pre></td></tr></table></figure></p>
<p>以上实例中，100，1000.0和“John”分别赋值给counter，miles，name变量。<br>执行以上程序会输出如下结果：</p>
<blockquote>
<p>100<br>1000.0<br>John</p>
</blockquote>
<h1 id="多个变量赋值">多个变量赋值</h1><p>Python允许你同时为多个变量赋值。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">b</span> = c = <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</p>
<p>您也可以为多个对象指定多个变量。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"john"</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例，两个整型对象1和2的分配给变量a和b，字符串对象“john”分配给变量c。</p>
<h1 id="标准数据类型">标准数据类型</h1><p>在内存中存储的数据可以有多种类型。</p>
<p>例如，person.s年龄作为一个数值存储和他或她的地址是字母数字字符存储。</p>
<p>Python有一些标准类型用于定义操作上，他们和为他们每个人的存储方法可能。</p>
<p>Python有五个标准的数据类型：</p>
<ul>
<li>Numbers（数字）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Dictionary（字典）</li>
</ul>
<h1 id="Python数字">Python数字</h1><p>数字数据类型用于存储数值。</p>
<p>他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</p>
<p>当你指定一个值时，Number对象就会被创建：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var1</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">var2</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>您也可以使用del语句删除一些对象引用。</p>
<p>del语句的语法是：<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1<span class="comment">[,var2<span class="comment">[,var3<span class="comment">[....,varN]</span>]</span>]</span>]</span><br></pre></td></tr></table></figure></p>
<p>您可以通过使用del语句删除单个或多个对象。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">del</span> var</span><br><span class="line"><span class="selector-tag">del</span> var_a, var_b</span><br></pre></td></tr></table></figure></p>
<p>Python支持四种不同的数值类型：</p>
<ul>
<li>int（有符号整型）</li>
<li>long（长整型[也可以代表八进制和十六进制]）</li>
<li>float（浮点型）</li>
<li>complex（复数）</li>
</ul>
<p><strong>实例</strong></p>
<p>一些数值类型的实例：</p>
<table>
<thead>
<tr>
<th>int</th>
<th>long</th>
<th>float</th>
<th>complex</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>51924361L</td>
<td>0.0</td>
<td>3.14j</td>
</tr>
<tr>
<td>100</td>
<td>-0x19323L</td>
<td>15.20</td>
<td>45.j</td>
</tr>
<tr>
<td>-786</td>
<td>0122L</td>
<td>-21.9</td>
<td>9.322e-36j</td>
</tr>
<tr>
<td>080</td>
<td>0xDEFABCECBDAECBFBAEl</td>
<td>32.3+e18</td>
<td>.876j</td>
</tr>
<tr>
<td>-0490</td>
<td>535633629843L</td>
<td>-90.</td>
<td>-.6545+0J</td>
</tr>
<tr>
<td>-0x260</td>
<td>-052318172735L</td>
<td>-32.54e100</td>
<td>3e+26J</td>
</tr>
<tr>
<td>0x69</td>
<td>-4721885298529L</td>
<td>70.2-E12</td>
<td>4.53e-7j</td>
</tr>
</tbody>
</table>
<ul>
<li>长整型也可以使用小写“L”，但是还是建议您使用大写“L”，避免与数字“1”混淆。Python使用“L”来显示长整型。</li>
<li>Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj，或者complex(a, b)表示，复数的实部a和虚部b都是浮点型。</li>
</ul>
<h1 id="Python字符串">Python字符串</h1><p>字符串或串（String）是由数字、字母、下划线组成的一串字符。</p>
<p>一般记为 :<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s</span>=<span class="string">"a1a2···an"</span>(n&gt;=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>它是编程语言中表示文本的数据类型。</p>
<p>Python的字串列表有2种取值顺序:</p>
<ul>
<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>
<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>
</ul>
<p>如果你的实要取得一段子串的话，可以用到变量<code>[头下标:尾下标]</code>，就可以截取相应的字符串，其中下标是从0开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</p>
<p>比如：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s</span> = <span class="string">'ilovepython'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>s[1:5]</strong>的结果是love。</p>
<p>当使用以冒号分隔的字符串，Python返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。</p>
<p>上面的结果包含了s[1]的值l，而取到的最大范围不包括上边界，就是s[5]的值p。<br>加号（+）是字符串连接运算符，星号（*）是重复操作。如下实例：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"><span class="meta"># -*- coding: UTF<span class="number">-8</span> -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">str</span> = <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span> <span class="meta"># 输出完整字符串</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span>[<span class="number">0</span>] <span class="meta"># 输出字符串中的第一个字符</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span>[<span class="number">2</span>:<span class="number">5</span>] <span class="meta"># 输出字符串中第三个至第五个之间的字符串</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span>[<span class="number">2</span>:] <span class="meta"># 输出从第三个字符开始的字符串</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span> * <span class="number">2</span> <span class="meta"># 输出字符串两次</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">str</span> + <span class="string">"TEST"</span> <span class="meta"># 输出连接的字符串</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>Hello World!<br>H<br>llo<br>llo World!<br>Hello World!Hello World!<br>Hello World!TEST</p>
</blockquote>
<h1 id="Python列表">Python列表</h1><p>List（列表）是Python中使用最频繁的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表用<code>[ ]</code>标识。是Python最通用的复合数据类型。看这段代码就明白。</p>
<p>列表中的值得分割也可以用到变量<code>[头下标:尾下标]</code>，就可以截取相应的列表，从左到右索引默认0开始的，从右到左索引默认-1开始，下标可以为空表示取到头或尾。</p>
<p>加号（+）是列表连接运算符，星号（*）是重复操作。如下实例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span> = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'john'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span> <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span>[<span class="number">0</span>] <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span>[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span>[<span class="number">2</span>:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="keyword">print</span> tinylist * <span class="number">2</span> <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">list</span> + tinylist <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>[‘abcd’, 786, 2.23, ‘john’, 70.2]<br>abcd<br>[786, 2.23]<br>[2.23, ‘john’, 70.2]<br>[123, ‘john’, 123, ‘john’]<br>[‘abcd’, 786, 2.23, ‘john’, 70.2, 123, ‘john’]</p>
</blockquote>
<h1 id="Python元组">Python元组</h1><p>元组是另一个数据类型，类似于List（列表）。</p>
<p>元组用<code>()</code>标识。内部元素用逗号隔开。但是元素不能二次赋值，相当于只读列表。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">tuple = ( <span class="string">'abcd'</span>, 786 , 2.23, <span class="string">'john'</span>, 70.2 )</span><br><span class="line">tinytuple = (123, <span class="string">'john'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> tuple <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> tuple[0] <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> tuple[1:3] <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="built_in">print</span> tuple[2:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinytuple * 2 <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="built_in">print</span> tuple + tinytuple <span class="comment"># 打印组合的元组</span></span><br></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<blockquote>
<p>(‘abcd’, 786, 2.23, ‘john’, 70.2)<br>abcd<br>(786, 2.23)<br>(2.23, ‘john’, 70.2)<br>(123, ‘john’, 123, ‘john’)<br>(‘abcd’, 786, 2.23, ‘john’, 70.2, 123, ‘john’)</p>
</blockquote>
<p>以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tuple</span> = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> )</span><br><span class="line"><span class="attr">list</span> = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> ]</span><br><span class="line"><span class="attr">tuple[2]</span> = <span class="number">1000</span> # 元组中是非法应用</span><br><span class="line"><span class="attr">list[2]</span> = <span class="number">1000</span> # 列表中是合法应用</span><br></pre></td></tr></table></figure></p>
<h1 id="Python元字典">Python元字典</h1><p>字典（dictionary）是除列表以外Python之中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。</p>
<p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典用<code>{ }</code>标识。字典由索引（key）和它对应的值value组成。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"This is one"</span></span><br><span class="line">dict[2] = <span class="string">"This is two"</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'john'</span>,<span class="string">'code'</span>:6734, <span class="string">'dept'</span>: <span class="string">'sales'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> dict[<span class="string">'one'</span>] <span class="comment"># 输出键为'one' 的值</span></span><br><span class="line"><span class="built_in">print</span> dict[2] <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> tinydict <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> tinydict.keys() <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> tinydict.values() <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure></p>
<p>输出结果为：</p>
<blockquote>
<p>This is one This is two {‘dept’: ‘sales’, ‘code’: 6734, ‘name’: ‘john’} [‘dept’, ‘code’, ‘name’] [‘sales’, 6734, ‘john’]</p>
</blockquote>
<h1 id="Python数据类型转换">Python数据类型转换</h1><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>
<p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>int(x [,base])</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>long(x [,base] )</td>
<td>将x转换为一个长整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real [,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x)</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础语法]]></title>
      <url>http://gyshgx868.github.io/2015/09/26/Python/04-python-basic-syntax/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-basic-syntax.html" target="_blank" rel="noopener">runoob.com - Python基础语法</a></p>
<p>Python语言与Perl，C和Java等语言有许多相似之处。但是，也存在一些差异。</p>
<p>在本章中我们将来学习Python的基础语法，让你快速学会Python编程。<br><a id="more"></a></p>
<h1 id="第一个Python程序">第一个Python程序</h1><h2 id="交互式编程">交互式编程</h2><p>交互式编程不需要创建脚本文件，是通过Python解释器的交互模式进来编写代码。</p>
<p>Linux上你只需要在命令行中输入Python命令即可启动交互式编程，提示窗口如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 2.7.6 (default, Sep  9 2014, 15:04:36) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<p>Windows上在安装Python时已经已经安装了默认的交互式编程客户端，提示窗口如下：<br><img src="http://7xn25g.dl1.z0.glb.clouddn.com/python-shell.jpg" alt="python-shell"></p>
<p>在python提示符中输入以下文本信息，然后按<code>Enter</code>键查看运行效果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span> <span class="string">"Hello, Python!"</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>在Python 2.7.6版本中，以上事例输出结果如下：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<p>如果您运行的是新版本的Python，那么你就需要在<code>print</code>语句中使用括号如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;  <span class="built_in">print</span> (<span class="string">"Hello, Python!"</span>);</span></span><br></pre></td></tr></table></figure></p>
<h2 id="脚本式编程">脚本式编程</h2><p>通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。</p>
<p>让我们写一个简单的Python脚本程序。所有Python文件将以<code>.py</code>为扩展名。将以下的源代码拷贝至<code>test.py</code>文件中。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">print</span> <span class="string">"Hello, Python!"</span>;</span><br></pre></td></tr></table></figure></p>
<p>这里，假设你已经设置了Python解释器PATH变量。使用以下命令运行程序：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python test.py</span></span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<p>让我们尝试另一种方式来执行Python脚本。修改<code>test.py</code>文件，如下所示：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">print <span class="string">"Hello, Python!"</span>;</span><br></pre></td></tr></table></figure></p>
<p>这里，假定您的Python解释器在<code>/usr/bin</code>目录中，使用以下命令执行脚本：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod +x test.py     <span class="comment"># 脚本文件添加可执行权限</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">./test.py</span></span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<h1 id="Python标识符">Python标识符</h1><p>在python里，标识符有字母、数字、下划线组成。</p>
<p>在python中，所有标识符可以包括英文、数字以及下划线（_），但不能以数字开头。</p>
<p>python中的标识符是区分大小写的。</p>
<p>以下划线开头的标识符是有特殊意义的。以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用<code>from xxx import *</code>而导入；</p>
<p>以双下划线开头的（__foo）代表类的私有成员；以双下划线开头和结尾的（__foo__）代表python里特殊方法专用的标识，如<code>__init__()</code>代表类的构造函数。</p>
<h1 id="Python保留字符">Python保留字符</h1><p>下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。</p>
<p>所有Python的关键字只包含小写字母。</p>
<table>
<thead>
<tr>
<th>and</th>
<th>exec</th>
<th>not</th>
</tr>
</thead>
<tbody>
<tr>
<td>assert</td>
<td>finally</td>
<td>or</td>
</tr>
<tr>
<td>break</td>
<td>for</td>
<td>pass</td>
</tr>
<tr>
<td>class</td>
<td>from</td>
<td>print</td>
</tr>
<tr>
<td>continue</td>
<td>global</td>
<td>raise</td>
</tr>
<tr>
<td>def</td>
<td>if</td>
<td>return</td>
</tr>
<tr>
<td>del</td>
<td>import</td>
<td>try</td>
</tr>
<tr>
<td>elif</td>
<td>in</td>
<td>while</td>
</tr>
<tr>
<td>else</td>
<td>is</td>
<td>with</td>
</tr>
<tr>
<td>except</td>
<td>lambda</td>
<td>yield</td>
</tr>
</tbody>
</table>
<h1 id="行和缩进">行和缩进</h1><p>学习Python与其他语言最大的区别就是，Python的代码块不使用大括号（{}）来控制类，函数以及其他逻辑判断。Python最具特色的就是用缩进来写模块。</p>
<p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。如下所示：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"True"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"False"</span></span><br></pre></td></tr></table></figure></p>
<p>以下代码将会执行错误：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"Answer"</span></span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"True"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"Answer"</span></span><br><span class="line">    # 没有严格缩进，在执行时保持</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"False"</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> test.<span class="keyword">py</span>  </span><br><span class="line">  File <span class="string">"test.py"</span>, <span class="built_in">line</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> True:</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected <span class="built_in">indent</span></span><br></pre></td></tr></table></figure>
<p><code>IndentationError: unexpected indent</code>错误是python编译器是在告诉你“Hi，老兄，你的文件里格式不对了，可能是Tab和空格没对齐的问题”，所有Python对格式要求非常严格。</p>
<p>如果是<code>IndentationError: unindent does not match any outer indentation level</code>错误表明，你使用的缩进方式不一致，有的是Tab键缩进，有的是空格缩进，改为一致即可。</p>
<p>因此，在Python的代码块中必须使用相同数目的行首缩进空格数。</p>
<p>建议你在每个缩进层次使用<strong>单个制表符</strong>或<strong>两个空格</strong>或<strong>四个空格</strong>，切记不能混用。</p>
<h1 id="多行语句">多行语句</h1><p>Python语句中一般以新行作为为语句的结束符。</p>
<p>但是我们可以使用斜杠（\）将一行的语句分为多行显示，如下所示：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">total</span> = <span class="keyword">item_one </span>+ \</span><br><span class="line">        <span class="keyword">item_two </span>+ \</span><br><span class="line">        <span class="keyword">item_three</span></span><br></pre></td></tr></table></figure></p>
<p>语句中包含<code>[]</code>，<code>{}</code>或<code>()</code>括号就不需要使用多行连接符。如下实例：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">days</span> = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>,</span><br><span class="line">        <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</span><br></pre></td></tr></table></figure></p>
<h1 id="Python引号">Python引号</h1><p>Python接收单引号（&apos;），双引号（&quot;），三引号（&apos;&apos;&apos; &quot;&quot;&quot;）来表示字符串，引号的开始与结束必须的相同类型的。</p>
<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word</span> = <span class="string">'word'</span></span><br><span class="line"><span class="attr">sentence</span> = <span class="string">"这是一个句子。"</span></span><br><span class="line"><span class="attr">paragraph</span> = <span class="string">"""这是一个段落。</span></span><br><span class="line"><span class="string">包含了多个语句"""</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Python注释">Python注释</h1><p>python中单行注释采用<code>#</code>开头。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"><span class="meta"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="meta"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 第一个注释</span></span><br><span class="line">print <span class="string">"Hello, Python!"</span>;  # 第二个注释</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Python!</span><br></pre></td></tr></table></figure></p>
<p>注释可以在语句或表达式行末：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Madisetti"</span> <span class="comment"># 这是一个注释</span></span><br></pre></td></tr></table></figure></p>
<p>Python中多行注释使用三个单引号（&apos;&apos;&apos;）或三个单引号（&quot;&quot;&quot;）。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Python空行">Python空行</h1><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>
<p>记住：空行也是程序代码的一部分。</p>
<h1 id="等待用户输入">等待用户输入</h1><p>下面的程序在按回车键后就会等待用户输入：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">"\n\nPress the enter key to exit."</span>)</span><br></pre></td></tr></table></figure></p>
<p>以上代码中，<code>\n\n</code>在结果输出前会输出两个新的空行。一旦用户按下键时，程序将退出。</p>
<h1 id="同一行显示多条语句">同一行显示多条语句</h1><p>Python可以在同一行中使用多条语句，语句之间使用分号（;）分割，以下是一个简单的实例：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> sys;</span> x = <span class="string">'foo'</span>; sys.stdout.write(x + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="多个语句构成代码组">多个语句构成代码组</h1><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>
<p>像<code>if</code>、<code>while</code>、<code>def</code>和<code>class</code>这样的复合语句，首行以关键字开始，以冒号（:）结束，该行之后的一行或多行代码构成代码组。</p>
<p>我们将首行及后面的代码组称为一个子句（clause）。</p>
<p>如下实例：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite </span><br><span class="line">elif expression :  </span><br><span class="line">   suite  </span><br><span class="line"><span class="keyword">else</span> :  </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure></p>
<h1 id="命令行参数">命令行参数</h1><p>很多程序可以执行一些操作来查看一些基本信，Python可以使用<code>-h</code>参数查看各参数帮助信息：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> -h </span><br><span class="line">usage: <span class="keyword">python</span> [option] ... [-<span class="keyword">c</span> cmd | -<span class="keyword">m</span> <span class="keyword">mod</span> | <span class="keyword">file</span> | -] [arg] ... </span><br><span class="line">Options <span class="built_in">and</span> arguments (<span class="built_in">and</span> corresponding environment variables): </span><br><span class="line">-<span class="keyword">c</span> cmd : program passed in <span class="keyword">as</span> <span class="built_in">string</span> (terminates option <span class="keyword">list</span>) </span><br><span class="line">-d     : <span class="keyword">debug</span> output from parser (also PYTHONDEBUG=<span class="keyword">x</span>) </span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH) </span><br><span class="line">-h     : <span class="keyword">print</span> this <span class="keyword">help</span> message <span class="built_in">and</span> <span class="keyword">exit</span> </span><br><span class="line"> </span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python中文编码]]></title>
      <url>http://gyshgx868.github.io/2015/09/26/Python/03-python-chinese-encoding/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-chinese-encoding.html" target="_blank" rel="noopener">runoob.com - Python中文编码</a></p>
<p>前面章节中我们已经学会了如何用Python输出“Hello, World!”，英文没有问题，但是如果你输出中文字符“你好，世界”就有可能会碰到中文编码问题。<br><a id="more"></a><br>Python文件中如果未指定编码，在执行过程会出现报错：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line">print <span class="string">"你好，世界"</span>;</span><br></pre></td></tr></table></figure></p>
<p>以上程序执行输出结果为：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">File</span> <span class="string">"test.py"</span>, <span class="keyword">line</span> 2</span><br><span class="line">SyntaxError: Non-ASCII character '\xe4' <span class="keyword">in</span> <span class="keyword">file</span> <span class="keyword">test</span>.py <span class="keyword">on</span> <span class="keyword">line</span> 2, but <span class="keyword">no</span> encoding declared; see http:<span class="comment">//www.python.org/peps/pep-0263.html for details</span></span><br></pre></td></tr></table></figure></p>
<p>Python中默认的编码格式是ASCII格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</p>
<p>解决方法为只要在文件开头加入<code># -*- coding: UTF-8 -*-</code>或者<code>#coding=utf-8</code>就行了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python环境搭建]]></title>
      <url>http://gyshgx868.github.io/2015/09/25/Python/02-python-install/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-install.html" target="_blank" rel="noopener">runoob.com - Python环境搭建</a></p>
<p>本章节我们将向大家介绍如何在本地搭建Python开发环境。</p>
<p>Python可应用于多平台包括Linux和Mac OS X。一般的Linux发行版本都自带Python，Mac OS X最新版也自带了Python，也就是已经安装好了，不需要再配置。<br><a id="more"></a><br>Windows下直接下载最新版的Python 2.7.9，安装的时候注意选择。</p>
<p><img src="http://7xn25g.dl1.z0.glb.clouddn.com/python_install.png" alt="Python安装"></p>
<p>你可以通过终端窗口输入<code>python</code>命令来查看本地是否已经安装Python以及Python的安装版本。</p>
<ul>
<li><p>Unix（Solaris，Linux，FreeBSD，AIX，HP/UX，SunOS，IRIX，等等。）</p>
</li>
<li><p>Win 9x/NT/2000</p>
</li>
<li><p>Macintosh（Intel, PPC, 68K）</p>
</li>
<li><p>OS/2</p>
</li>
<li><p>DOS（多个DOS版本）</p>
</li>
<li><p>PalmOS</p>
</li>
<li><p>Nokia移动手机</p>
</li>
<li><p>Windows CE</p>
</li>
<li><p>Acorn/RISC OS</p>
</li>
<li><p>BeOS</p>
</li>
<li><p>Amiga</p>
</li>
<li><p>VMS/OpenVMS</p>
</li>
<li><p>QNX</p>
</li>
<li><p>VxWorks</p>
</li>
<li><p>Psion</p>
</li>
<li><p>Python同样可以移植到Java和.NET虚拟机上。</p>
</li>
</ul>
<h1 id="Python下载">Python下载</h1><p>Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到：</p>
<p>Python官网：<a href="http://www.python.org/" target="_blank" rel="noopener">http://www.python.org/</a></p>
<p>你可以在一下链接中下载Python的文档，你可以下载 HTML、PDF和PostScript等格式的文档。</p>
<p>Python文档下载地址：<a href="www.python.org/doc/">www.python.org/doc/</a></p>
<h1 id="Python安装">Python安装</h1><p>Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。</p>
<p>您需要下载适用于您使用平台的二进制代码，然后安装Python。</p>
<p>如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。</p>
<p>编译的源代码，功能上有更多的选择性，为Python安装提供了更多的灵活性。</p>
<p>以下为不同平台上安装Python的方法：</p>
<h2 id="Unix_&amp;_Linux平台安装Python">Unix &amp; Linux平台安装Python</h2><p>以下为在Unix &amp; Linux 平台上安装 Python 的简单步骤：</p>
<ul>
<li><p>打开WEB浏览器访问：<a href="http://www.python.org/download/" target="_blank" rel="noopener">http://www.python.org/download/</a></p>
</li>
<li><p>选择使用于Unix/Linux的源码压缩包</p>
</li>
<li><p>下载及解压压缩包</p>
</li>
<li><p>如果你需要自定义一些选项修改Modules/Setup</p>
</li>
<li><p>执行./configure脚本</p>
</li>
<li><p>make</p>
</li>
<li><p>make install</p>
</li>
</ul>
<p>执行以上操作后，Python会安装在<code>/usr/local/bin</code>目录中，Python库安装在<code>/usr/local/lib/pythonXX</code>，<code>XX</code>为你使用的Python的版本号。</p>
<h2 id="Windows平台安装Python">Windows平台安装Python</h2><p>以下为在Windows平台上安装Python的简单步骤：</p>
<ul>
<li><p>打开WEB浏览器访问：<a href="http://www.python.org/download/" target="_blank" rel="noopener">http://www.python.org/download/</a></p>
</li>
<li><p>在下载列表中选择Windows平台安装包，包格式为：python-XYZ.msi文件，XYZ为你要安装的版本号。</p>
</li>
<li><p>要使用安装程序python-XYZ.msi，Windows系统必须支持Microsoft Installer 2.0搭配使用。只要保存安装文件到本地计算机，然后运行它，看看你的机器支持MSI。Windows XP和更高版本已经有MSI，很多老机器也可以安装MSI。</p>
</li>
<li><p>下载后，双击下载包，进入Python安装向导，安装非常简单，你只需要使用默认的设置一直点击“下一步”直到安装完成即可。</p>
</li>
</ul>
<h2 id="Mac平台安装Python">Mac平台安装Python</h2><p>最近的Mac OS系统都自带有Python环境，但是自带的Python版本为旧版本，你可以通过链接<a href="http://www.python.org/download/mac/" target="_blank" rel="noopener">http://www.python.org/download/mac/</a>查看Mac上Python的新版功能介绍。</p>
<p>Mac上完整的Python安装教程你可以查看：<a href="http://www.cwi.nl/~jack/macpython.html" target="_blank" rel="noopener">http://www.cwi.nl/~jack/macpython.html</a></p>
<h1 id="环境变量配置">环境变量配置</h1><p>程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。</p>
<p>path（路径）存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。</p>
<p>Unix或Windows中路径变量为PATH（UNIX区分大小写，Windows不区分大小写）。</p>
<p>在Mac OS中，安装程序过程中改变了Python的安装路径。如果你需要在其他目录引用Python，你必须在path中添加Python目录。</p>
<h2 id="在Unix/Linux设置环境变量">在Unix/Linux设置环境变量</h2><ul>
<li><p>在<code>csh shell</code>输入<code>setenv PATH &quot;$PATH:/usr/local/bin/python</code>，按下<code>Enter</code>。</p>
</li>
<li><p>在<code>bash shell</code>(Linux)输入<code>export PATH=&quot;$PATH:/usr/local/bin/python</code>，按下<code>Enter</code>。</p>
</li>
<li><p>在<code>sh</code>或者<code>ksh shell</code>输入<code>PATH=&quot;$PATH:/usr/local/bin/python</code>, 按下<code>Enter</code>。</p>
</li>
</ul>
<p>注意: <code>/usr/local/bin/python</code>是Python的安装目录。</p>
<h2 id="在Windows设置环境变量">在Windows设置环境变量</h2><p>在环境变量中添加Python目录：</p>
<p>在命令提示框中（cmd）输入<code>path %path%;C:\Python</code>, 按下<code>Enter</code>。</p>
<p>注意: C:\Python是Python的安装目录。</p>
<h1 id="Python_环境变量">Python 环境变量</h1><p>下面几个重要的环境变量，它应用于Python：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>PYTHONPATH</td>
<td>PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td>
</tr>
<tr>
<td>PYTHONSTARTUP</td>
<td>Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此文件中变量指定的执行代码。</td>
</tr>
<tr>
<td>PYTHONCASEOK</td>
<td>加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写。</td>
</tr>
<tr>
<td>PYTHONHOME</td>
<td>另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td>
</tr>
</tbody>
</table>
<h1 id="运行Python">运行Python</h1><p>有三种方式可以运行Python：</p>
<p>1、交互式解释器：<br>你可以通过命令行窗口进入python并开在交互式解释器中开始编写Python代码。</p>
<p>你可以在Unix，DOS或任何其他提供了命令行或者shell的系统进行python编码工作。</p>
<p><code>$python # Unix/Linux</code></p>
<p><code>C:\&gt;python # Windows/DOS</code></p>
<p>以下为Python命令行参数：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>在解析时显示调试信息</td>
</tr>
<tr>
<td>-O</td>
<td>生成优化代码（.pyo文件）</td>
</tr>
<tr>
<td>-S</td>
<td>启动时不引入查找Python路径的位置</td>
</tr>
<tr>
<td>-v</td>
<td>输出Python版本号</td>
</tr>
<tr>
<td>-X</td>
<td>从1.6版本之后基于内建的异常（仅仅用于字符串）已过时</td>
</tr>
<tr>
<td>-c cmd</td>
<td>执行Python脚本，并将运行结果作为cmd字符串</td>
</tr>
<tr>
<td>file</td>
<td>在给定的python文件执行python脚本</td>
</tr>
</tbody>
</table>
<p>2、命令行脚本<br>在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：</p>
<p><code>$python script.py # Unix/Linux</code></p>
<p>或者 </p>
<p><code>./script.py # Unix/Linux</code></p>
<p>或者 </p>
<p><code>C:\&gt;python script.py # Windows/DOS</code></p>
<p>注意：在执行脚本时，请检查脚本是否有可执行权限。</p>
<p>3、集成开发环境（IDE：Integrated Development Environment）<br>您可以使用图形用户界面（GUI）环境来编写及运行Python代码。以下推荐各个平台上使用的IDE：</p>
<ul>
<li><p><strong>Unix</strong>：IDLE是UNIX上最早的Python IDE。</p>
</li>
<li><p><strong>Windows</strong>：PythonWin是一个Python集成开发环境，在许多方面都比IDE优秀。</p>
</li>
<li><p><strong>Macintosh</strong>：Python的Mac可以使用IDLE IDE，你可以在网站上下载对应Mac的IDLE。</p>
</li>
</ul>
<p>继续下一章之前，请确保您的环境已搭建成功。如果你不能够建立正确的环境，那么你就可以从您的系统管理员的帮助。</p>
<p>在以后的章节中给出的例子已在Ubuntu下Python 2.7.6版本测试通过。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python简介]]></title>
      <url>http://gyshgx868.github.io/2015/09/25/Python/01-python-intro/</url>
      <content type="html"><![CDATA[<p>本文引自：<a href="http://www.runoob.com/python/python-intro.html" target="_blank" rel="noopener">runoob.com - Python简介</a></p>
<p>Python是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p>
<p>Python的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。<br><a id="more"></a></p>
<ul>
<li><p><strong>Python是一种解释型语言</strong>：这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p>
</li>
<li><p><strong>Python是交互式语言</strong>：这意味着，您可以在一个Python提示符，直接互动执行写你的程序。</p>
</li>
<li><p><strong>Python是面向对象语言</strong>：这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p>
</li>
<li><p><strong>Python是初学者的语言</strong>：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到WWW浏览器再到游戏。</p>
</li>
</ul>
<h1 id="Python发展历史">Python发展历史</h1><p>Python是由Guido van Rossum在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p>
<p>Python本身也是由诸多其他语言发展而来的，这包括ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell和其他的脚本语言等等。</p>
<p>像Perl语言一样, Python源代码同样遵循GPL(GNU General Public License)协议。</p>
<p>现在Python是由一个核心开发团队在维护，Guido van Rossum仍然占据着至关重要的作用，指导其进展。</p>
<h1 id="Python特点">Python特点</h1><ol>
<li><p><strong>易于学习</strong>：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p>
</li>
<li><p><strong>易于阅读</strong>：Python代码定义的更清晰。</p>
</li>
<li><p><strong>易于维护</strong>：Python的成功在于它的源代码是相当容易维护的。</p>
</li>
<li><p><strong>一个广泛的标准库</strong>：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</p>
</li>
<li><p><strong>互动模式</strong>：互动模式的支持，您可以从终端输入并获得结果的语言，互动的测试和调试代码片断。</p>
</li>
<li><p><strong>便携式</strong>：Python可以运行在多种硬件平台和所有平台上都具有相同的接口。</p>
</li>
<li><p><strong>可扩展</strong>：可以添加低层次的模块到Python解释器。这些模块使程序员可以添加或定制自己的工具，更有效。</p>
</li>
<li><p><strong>数据库</strong>：Python提供所有主要的商业数据库的接口。</p>
</li>
<li><p><strong>GUI编程</strong>：Python支持GUI可以创建和移植到许多系统调用。</p>
</li>
<li><p><strong>可扩展性</strong>：相比shell脚本，Python提供了一个更好的结构，且支持大型程序。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[memset函数效率分析]]></title>
      <url>http://gyshgx868.github.io/2015/08/14/Cpp/memset-efficiency/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>在处理数组的时候经常需要频繁地将数组初始化为0，这时候有两种选择，一种是使用for循环，一个元素一个元素地赋值；再者就是使用包含于<code>string.h</code>头文件的<code>memset</code>函数了。</p>
<p>原文：<a href="http://blog.csdn.net/hackbuteer1/article/details/7343189" target="_blank" rel="noopener">http://blog.csdn.net/hackbuteer1/article/details/7343189</a></p>
<a id="more"></a>
<h1 id="函数原型">函数原型</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memset</span><span class="params">(<span class="keyword">void</span>* s, <span class="keyword">int</span> c, <span class="keyword">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* p = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*) s;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *p++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) c;</span><br><span class="line">        --n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作用：将s所指向的某一块内存中的每个字节的内容全部设置为c指定的ASCII值, 块的大小由第三个参数指定，这个函数通常为新申请的内存做初始化工作。</p>
<h1 id="函数使用">函数使用</h1><p><code>memset</code>函数通常都被当做当作万能的初始化工具，例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10000</span>; </span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="built_in">memset</span>(arr, <span class="number">1</span>, n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure></p>
<p>这样得到的arr数组一定不是全0，而是16843009，下面解释原因。<br>首先，变量类型的本质只是标志从某一内存地址开始读取的位数，强制转换就是改变读取位数的大小。</p>
<p>c的二进制表示: 00000000 00000000 00000000 00000001 (32位)</p>
<ol>
<li>c转换为<code>unsigned char</code>后：00000001（8位）</li>
<li>将指针p（<code>unsigned char</code>类型）的每一元素（8位）赋值为00000001，循环<code>4n</code>次。</li>
<li><code>memset</code>结束后，<code>arr</code>的每个元素按照<code>int</code>类型读取，读出来的就是00000001 00000001 00000001 00000001，十进制就是16843009。</li>
</ol>
<p>不过如果是<code>memset(arr, 0, n * sizeof(int))</code>的话可以使用，因为32位都是0。<code>memset(arr, -1, n * sizeof(int))</code>也可以将<code>arr</code>数组成功赋值为-1，因为计算机在存储负数的时候采用的是补码表示，-1的补码为：11111111 11111111 11111111 11111111，因此可以成功地赋值。</p>
<h1 id="效率测试">效率测试</h1><p>再来说<code>memset</code>的效率问题。使用<code>memset</code>函数与将上面的函数代码写在自己的程序里是不一样的，C标准库中的<code>memset</code>对<code>Cache</code>的利用做了优化，具体的在《C专家编程》151页有解释，这里给出测试代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[MAXSIZE];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="comment">//for (int j = 0; j &lt; MAXSIZE; j++)</span></span><br><span class="line">        <span class="comment">//    arr[0] = '0';</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序里的注释部分与<code>memset</code>行分别使用，结果是使用<code>memset</code>的程序运行时间大约为0.1s，而用for循环的程序大约需要3s。</p>
<p>综上：<code>memset</code>可以用在字符数组的初始化以及类似于<code>memset(arr, 0, n * sizeof(int))</code>的情况，效率比手动赋值要高的多，但大量的初始化也需要谨慎使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下使用EasyBCD引导安装Ubuntu]]></title>
      <url>http://gyshgx868.github.io/2015/08/12/Ubuntu/easybcd-ubuntu/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>Ubuntu作为一款非常流行而又强大的操作系统，相信很多人都想安装一下。而安装Ubuntu系统的方法有很多种，例如U盘启动、光盘启动、GRUB引导法等等。这里我将介绍在Windows系统下用EasyBCD软件建立引导，然后安装Ubuntu的方法，这就不需要制作U盘启动盘那么麻烦，只需配置一些引导文件即可。<br><a id="more"></a></p>
<h1 id="所需工具">所需工具</h1><p>先去下载EasyBCD的安装包，百度直接搜就行，我使用的版本是2.2。</p>
<p>下载完EasyBCD之后，我们就去Ubuntu的官网（<a href="http://www.ubuntu.com/download/" target="_blank" rel="noopener">http://www.ubuntu.com/download/</a>）上下载安装映像，这里以15.04的32位版本为例。</p>
<h1 id="前期准备">前期准备</h1><p>首先将下载好的EasyBCD安装好，安装位置随意，运行之后有个语言的选择，选择简体中文就可以。接着再把下载好的Ubuntu映像复制到C盘的根目录下面（当然也可以放置到其他目录）。</p>
<p>然后，使用压缩软件（或者虚拟光驱软件）打开Ubuntu的安装映像，将安装映像中<code>casper</code>目录中的<code>initrd.lz</code>和<code>vmlinuz</code>两个文件（不同版本的操作系统映像名称可能会稍有不同，但是大体都是这两个名字，只是扩展名问题）也同时复制到C盘的根目录。<br><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-copy-file.png" alt="ubuntu-install-copy-file"></p>
<p>打开EasyBCD，就会看到如下界面：<br><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-easy-bcd.png" alt="ubuntu-install-easy-bcd"></p>
<p>选择<code>添加新条目</code>，然后选择<code>NeoGrub</code>，点击<code>安装</code>：<br><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-neogrub.png" alt="ubuntu-install-neogrub"></p>
<p>接着点击<code>配置</code>，在打开的记事本文件中，将原有内容替换为以下内容：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title Install Ubuntu</span><br><span class="line">root (hd0,0)</span><br><span class="line">kernel (hd0,0)/vmlinuz <span class="attribute">boot</span>=casper iso-scan/<span class="attribute">filename</span>=/ubuntu-15.04-desktop-i386.iso <span class="attribute">locale</span>=zh_CN.UTF-8</span><br><span class="line">initrd (hd0,0)/initrd.lz</span><br><span class="line">title reboot</span><br><span class="line">reboot</span><br><span class="line">title halt</span><br><span class="line">halt</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-notepad-edit.png" alt="ubuntu-install-notepad-edit"></p>
<p>完成后按下<code>Ctrl</code>+<code>S</code>保存，关掉就可以了。</p>
<p><strong>说明：</strong><code>hd0</code>表示C盘所处的硬盘号，一般电脑只有一个，所以都是<code>hd0</code>；如果有多个硬盘，则根据情况改为<code>hd0</code>、<code>hd1</code>等。</p>
<p>hd0后面的数字表示C盘在硬盘中的分区顺序，每个人的系统不大一样，不知道的可以在磁盘管理里面看一下。如果是第二个，写为<code>(hd0,1)</code>即可，依次后推。</p>
<p><strong>注意：</strong><code>initrd.lz</code>和<code>vmlinuz</code>就是刚刚复制到C盘根目录的两个文件，根据文件的名称自行修改。<code>ubuntu-15.04-desktop-i386.iso</code>代表的是C盘根目录下面的安装映像的名称，根据情况自行修改。</p>
<p>这样，相关的前期准备工作就做好了。</p>
<h1 id="安装Ubuntu">安装Ubuntu</h1><p>重启电脑，可以看到多了一个启动项<code>NeoGrub引导加载器</code>，选择该项然后回车，然后选择<code>install ubuntu</code>，另外两项分别是<code>reboot</code>和<code>halt</code>，作用分别是重启和关机，是为了防止安装出错而设的，这个在之前的menu.lst配置文件中已经设定好了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-multi-system.png" alt="ubuntu-install-multi-system"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-boot-menu.png" alt="ubuntu-install-boot-menu"></p>
<p>接下来，如果正常的话，会刷出一堆蛋疼的白字，等着它结束就行，好像要5分钟左右。如果在这一步报错，一般来说就是之前的menu.lst配置文件不对，很可能就是文件的名称配置的问题。这时只要<code>reboot</code>然后进入Windows重新配置就行。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-loading.png" alt="ubuntu-install-loading"></p>
<p>等到白字刷完之后，我们就进入到了Ubuntu的安装程序了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-installation-desktop.png" alt="ubuntu-install-installation-desktop"></p>
<p>此时进行最重要的一步，按下<code>Ctrl</code>+<code>Alt</code>+<code>T</code>打开终端，输入：<code>sudo umount -l /isodevice</code>（注意大小写问题和空格）</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-console.png" alt="ubuntu-install-console"></p>
<p>然后，我们关闭终端，就可以双击桌面上的<code>安装 Ubuntu 15.04</code>进行安装了。</p>
<p>安装程序运行之后，首先就是选择语言，选择一种常用的语言，这里选择<code>简体中文</code>，然后点击继续。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-select-language.png" alt="ubuntu-install-select-language"></p>
<p>然后，如果有网络的话，我们可以选择<code>安装中下载更新</code>和<code>安装这个第三方软件</code>，但是这样安装会比较慢，我这里两个都不选，点击继续。</p>
<p>接着我们就到了安装类型选择界面，选择<code>其他选项</code>，点击继续。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-install-type.png" alt="ubuntu-install-install-type"></p>
<p>接下来要设置分区，首先设置交换分区，分区的大小设置为电脑内存的大小或者电脑内存的两倍。注意，在Linux中1GB对应1000MB。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-swap.png" alt="ubuntu-install-swap"></p>
<p>然后设置其他的挂载点大小，分区的方案很多。但是由于我在虚拟机中进行演示，所以只设置一个/挂载点。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-disk-list.png" alt="ubuntu-install-disk-list"></p>
<p>接下来就是简单的设置时区、键盘布局和帐户信息，设置好了之后就可以进行安装了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-timezone.png" alt="ubuntu-install-timezone"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-keyboard-layout.png" alt="ubuntu-install-keyboard-layout"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-user.png" alt="ubuntu-install-user"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-processing.png" alt="ubuntu-install-processing"></p>
<p>安装好了之后，点击<code>现在重启</code>，就可以进入Ubuntu的GRUB启动菜单了，选择<code>Ubuntu</code>，就可以进入Ubuntu操作系统了。至此，Ubuntu的安装也结束了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-restart.png" alt="ubuntu-install-restart"></p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-grub.png" alt="ubuntu-install-grub"></p>
<h1 id="后续工作">后续工作</h1><p>最后，我们在重启系统，进入到Windows操作系统，再次点开EasyBCD，把<code>NeoGrub</code>引导项删除，然后把C盘复制的Ubuntu安装映像文件和<code>initrd.lz</code>、<code>vmlinuz</code>两个文件删掉就行了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/ubuntu-install-del-neogrub.png" alt="ubuntu-install-del-neogrub"></p>
<h1 id="参考资料">参考资料</h1><p>百度经验：<a href="http://jingyan.baidu.com/article/e4d08ffdace06e0fd2f60d39.html" target="_blank" rel="noopener">win7下通过easyBCD引导安装Ubuntu14.04</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装Windows 7过程如何不产生100MB分区]]></title>
      <url>http://gyshgx868.github.io/2015/08/11/Windows/win-install-partition/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>如果是对一块新的磁盘或者删除原有的分区进行重新安装Windows 7及其以上的操作系统时候，使用安装程序提供的磁盘分区选项分区的时候，就会出现一个100MB的保留分区。<br><a id="more"></a><br>这100MB的分区的作用如下：</p>
<ul>
<li>BitLocker的规定，引导文件和Windows文件要分开；</li>
<li>此系统分区可以使用实用软件，如备份，支持双启动的情况；</li>
<li>如果启动文件保存在系统分区，很容易因为系统分区上的重装活动，而格式化丢失这些启动文件；</li>
<li>该驱动器没有盘符可以很好的的阻止意外删除引导文件。</li>
</ul>
<p>但同时，这100MB的分区也带来了如下的弊端：</p>
<ul>
<li>不能使用GHOST版系统光盘来安装Windows操作系统，仅能使用安装版的进行一步一步地安装；</li>
<li>安装完系统后，不能使用Wingho、OneKey Ghost等一键还原类的软件进行备份系统；</li>
<li>Norton Partition Magic无法正常使用，如果你尝试修复这100MB分区，会导致已安装的Windows无法引导；</li>
<li>使用100MB的分区，不容易安装Ubuntu + Windows双系统。</li>
</ul>
<h1 id="方法">方法</h1><p>首先，先运行Windows的安装程序进行全新安装，直到下面的界面：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-disk.png" alt="win-install-disk"></p>
<p>这时候，不能够使用磁盘工具的格式化选项，我们需要使用命令行手动进行分区，按下<code>Shift</code>+<code>F10</code>进入到下面的界面：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-shift-f10.png" alt="win-install-shift-f10"></p>
<p>此时输入<code>diskpart</code>，接下来显示出来的就是diskpart分区工具的版本等信息：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-diskpart.png" alt="win-install-diskpart"></p>
<p>再输入<code>list disk</code>命令，然后就列出了当前计算机的物理磁盘的信息：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-list-disk.png" alt="win-install-list-disk"></p>
<p>输入<code>select disk 0</code>，选择你要安装操作系统的物理磁盘（我这里只有一块磁盘，所以选择了0）：</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-select-disk-0.png" alt="win-install-select-disk-0"></p>
<p>输入<code>clean</code>命令清除物理磁盘的所有信息，接着输入<code>create partition primary size=20480</code>创建主磁盘分区，也就是传说中的C盘。</p>
<p>其中<code>create partition</code>表示创建分区；<code>primary</code>表示创建是主分区，如果这个位置是<code>logical</code>则表示逻辑分区，<code>extended</code>表示扩展分区；<code>size</code>表示分区大小，单位MB。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-create-partition-primary.png" alt="win-install-create-partition-primary"></p>
<p>输入<code>active</code>把主分区激活。为什么要激活？因为，激活后分区信息和唯一的活动分区标记会写入硬盘分区表，这样当启动电脑时BIOS会检测主分区的操作系统（io.sys文件），然后操作系统开始控制启动权。</p>
<p>激活之后输入<code>format</code>命令，将分区格式化。至此，主磁盘分区就创建完毕了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-format.png" alt="win-install-format"></p>
<p>最后输入<code>create partition extended</code>将剩余的空间全部创建为扩展分区，再输入命令<code>create partition logical</code>，将扩展分区的全部剩余空间创建为一个逻辑分区，你也可以指定<code>size</code>参数，将剩余空间创建出多个逻辑分区。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-create-partition-extended.png" alt="win-install-create-partition-extended"></p>
<p>这时候，所有的分区就全部创建完毕了，可以关闭命令行窗口，然后点击刷新，就可以执行下一步的Windows安装了。</p>
<p><img src="http://7xl1l1.dl1.z0.glb.clouddn.com/win-install-diskpart-complete.png" alt="win-install-dispart-complete"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C#多线程编程]]></title>
      <url>http://gyshgx868.github.io/2015/07/17/CSharp/csharp-thread/</url>
      <content type="html"><![CDATA[<h1 id="相关问题">相关问题</h1><h2 id="什么是进程">什么是进程</h2><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p>
<a id="more"></a>
<h2 id="什么是线程">什么是线程</h2><p>线程（Thread）是程序中一个单一的顺序控制流程。进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。简单来说，不同的线程可以执行相同的代码。</p>
<h2 id="什么是多线程">什么是多线程</h2><p>多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</p>
<h2 id="多线程的优点">多线程的优点</h2><p>可以提高CPU的利用率。在多线程程序中，一个线程必须等待的时候，CPU可以运行其它的线程而不是等待，这样就大大提高了程序的效率。</p>
<h2 id="多线程的缺点">多线程的缺点</h2><ul>
<li>线程需要占用内存，线程越多占用内存也越多； </li>
<li>多线程需要协调和管理，所以需要CPU时间跟踪线程； </li>
<li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；</li>
<li>线程太多会导致控制太复杂，最终可能造成很多Bug。</li>
</ul>
<h1 id="C#实现多线程的方法">C#实现多线程的方法</h1><h2 id="Thread类">Thread类</h2><p><code>Thread</code>类通过委托传递，执行线程的函数可以不带参数，也可以带有一个参数，但是参数的类型需要为<code>object</code>类型，在需要的时候进行类型转换。如果要传递多个参数，可以通过一个类或者结构体来封装需要传递的参数。</p>
<p><code>Thread</code>类C#代码示例：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(TestMethod));</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart(TestMethod));</span><br><span class="line">            t1.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            t2.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            t1.Start();</span><br><span class="line">            t2.Start(<span class="string">"Hello"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"不带参数的线程函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//参数的类型必须为object类型</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestMethod</span>(<span class="params"><span class="keyword">object</span> data</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">string</span> datastr = (<span class="keyword">string</span>) data;</span><br><span class="line">            Console.WriteLine(<span class="string">"带参数的线程函数，参数为：&#123;0&#125;"</span>, datastr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于多个参数的线程创建，请参照<a href="http://blog.sina.com.cn/s/blog_7d892a6701018lkv.html" target="_blank" rel="noopener">C#创建带参数的线程</a>。</p>
<p>下面给出了两种方法的示例，首先是使用类作为参数的传递，此种方式比较常用：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MyThread mt = <span class="keyword">new</span> MyThread(<span class="number">100</span>);</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(mt.Calculate));</span><br><span class="line">            thread.Start();</span><br><span class="line">            <span class="comment">//等待线程结束</span></span><br><span class="line">            <span class="keyword">while</span> (thread.ThreadState != ThreadState.Stopped)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(mt.Result);  <span class="comment">//打印返回值</span></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyThread</span><span class="comment">//线程类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Parame &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;    <span class="comment">//参数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Result &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;    <span class="comment">//返回值</span></span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span>(<span class="params"><span class="keyword">int</span> parame</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.Parame = parame;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//线程执行方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Random ra = <span class="keyword">new</span> Random();        <span class="comment">//随机数对象</span></span><br><span class="line">            Thread.Sleep(ra.Next(<span class="number">10</span>, <span class="number">100</span>));  <span class="comment">//随机休眠一段时间</span></span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Parame);</span><br><span class="line">            <span class="keyword">this</span>.Result = <span class="keyword">this</span>.Parame * ra.Next(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是使用匿名方法作为参数，这种方法十分的灵活：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> Parame = <span class="number">100</span>;     <span class="comment">//当做参数</span></span><br><span class="line">            <span class="keyword">int</span> Result = <span class="number">0</span>;       <span class="comment">//当做返回值</span></span><br><span class="line">            <span class="comment">//匿名方法</span></span><br><span class="line">            ThreadStart threadStart = <span class="keyword">new</span> ThreadStart(<span class="keyword">delegate</span>()</span><br><span class="line">            &#123;</span><br><span class="line">                Random ra = <span class="keyword">new</span> Random();             <span class="comment">//随机数对象</span></span><br><span class="line">                Thread.Sleep(ra.Next(<span class="number">10</span>, <span class="number">100</span>));       <span class="comment">//随机休眠一段时间</span></span><br><span class="line">                Console.WriteLine(Parame);            <span class="comment">//输出参数</span></span><br><span class="line">                Result = Parame * ra.Next(<span class="number">10</span>, <span class="number">100</span>);   <span class="comment">//计算返回值</span></span><br><span class="line">            &#125;);</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(threadStart);</span><br><span class="line">            thread.Start();      <span class="comment">//多线程启动匿名方法</span></span><br><span class="line">            <span class="comment">//等待线程结束</span></span><br><span class="line">            <span class="keyword">while</span> (thread.ThreadState != ThreadState.Stopped)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(Result);   <span class="comment">//打印返回值</span></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="线程池">线程池</h2><p>由于线程的创建和销毁需要耗费一定的开销，过多的使用线程会造成内存资源的浪费，出于对性能的考虑，于是引入了线程池（<code>ThreadPool</code>）的概念。线程池维护一个请求队列，线程池的代码从队列提取任务，然后委派给线程池的一个线程执行，线程执行完不会被立即销毁，这样既可以在后台执行任务，又可以减少线程创建和销毁所带来的开销。</p>
<p>线程池线程默认为后台线程（IsBackground），示例代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//将工作项加入到线程池队列中，这里可以传递一个线程参数</span></span><br><span class="line">            ThreadPool.QueueUserWorkItem(Test, <span class="string">"Hello"</span>);</span><br><span class="line">            ThreadPool.QueueUserWorkItem(Test, <span class="string">"World"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="keyword">object</span> data</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">string</span> datastr = (<span class="keyword">string</span>) data;</span><br><span class="line">            Console.WriteLine(datastr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Task类">Task类</h2><p>使用<code>ThreadPool</code>的<code>QueueUserWorkItem()</code>方法发起一次异步的线程执行很简单，但是该方法最大的问题是没有一个内建的机制让你知道操作什么时候完成，有没有一个内建的机制在操作完成后获得一个返回值。为此，可以使用<code>System.Threading.Tasks</code>中的<code>Task</code>类。</p>
<p>构造一个<code>Task&lt;TResult&gt;</code>对象，并为泛型<code>TResult</code>参数传递一个操作的返回类型。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Task&lt;Int32&gt; t = <span class="keyword">new</span> Task&lt;Int32&gt;(n =&gt; Sum((Int32) n), <span class="number">1000</span>);</span><br><span class="line">            t.Start();</span><br><span class="line">            t.Wait();</span><br><span class="line">            Console.WriteLine(t.Result);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Int32 <span class="title">Sum</span>(<span class="params">Int32 n</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Int32 sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; --n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">checked</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum += n;</span><br><span class="line">                &#125; <span class="comment">//结果太大，抛出异常</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一个任务完成时，自动启动一个新任务；一个任务完成后，它可以启动另一个任务，下面重写了前面的代码，不阻塞任何线程。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Task&lt;Int32&gt; t = <span class="keyword">new</span> Task&lt;Int32&gt;(n =&gt; Sum((Int32)n), <span class="number">1000</span>);</span><br><span class="line">            t.Start();</span><br><span class="line">            <span class="comment">//t.Wait();</span></span><br><span class="line">            Task cwt = t.ContinueWith(task =&gt; Console.WriteLine(<span class="string">"The result is &#123;0&#125;"</span>, t.Result));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Int32 <span class="title">Sum</span>(<span class="params">Int32 n</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Int32 sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; --n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">checked</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum += n;</span><br><span class="line">                &#125; <span class="comment">//结果溢出，抛出异常</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用委托开启多线程">使用委托开启多线程</h2><p>用委托（Delegate）的<code>BeginInvoke</code>和<code>EndInvoke</code>方法操作线程，<code>BeginInvoke</code>方法可以使用线程异步地执行委托所指向的方法。然后通过<code>EndInvoke</code>方法获得方法的返回值（<code>EndInvoke</code>方法的返回值就是被调用方法的返回值），或是确定方法已经被成功调用。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">NewTaskDelegate</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTask</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Thread.Sleep(ms);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> n = random.Next(<span class="number">10000</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成"</span>);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            NewTaskDelegate task = newTask;</span><br><span class="line">            IAsyncResult asyncResult = task.BeginInvoke(<span class="number">2000</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//EndInvoke方法将被阻塞2秒</span></span><br><span class="line">            <span class="keyword">int</span> result = task.EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同时，我们也可以使用IAsyncResult.IsCompleted属性来判断异步调用是否完成，示例代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">NewTaskDelegate</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTask</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Thread.Sleep(ms);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> n = random.Next(<span class="number">10000</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成"</span>);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            NewTaskDelegate task = newTask;</span><br><span class="line">            IAsyncResult asyncResult = task.BeginInvoke(<span class="number">2000</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//等待异步执行完成</span></span><br><span class="line">            <span class="keyword">while</span> (!asyncResult.IsCompleted)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">"*"</span>);</span><br><span class="line">                Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 由于异步调用已经完成，因此， EndInvoke会立刻返回结果</span></span><br><span class="line">            <span class="keyword">int</span> result = task.EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们也可以使用<code>WaitOne</code>方法等待异步方法执行完成。<code>WaitOne</code>的第一个参数表示要等待的毫秒数，在指定时间之内，<code>WaitOne</code>方法将一直等待，直到异步调用完成，并发出通知，<code>WaitOne</code>方法才返回<code>true</code>。当等待指定时间之后，异步调用仍未完成，<code>WaitOne</code>方法返回<code>false</code>，如果指定时间为0，表示不等待，如果为-1，表示永远等待，直到异步调用完成。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">NewTaskDelegate</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTask</span>(<span class="params"><span class="keyword">int</span> ms</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Thread.Sleep(ms);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> n = random.Next(<span class="number">10000</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成"</span>);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            NewTaskDelegate task = newTask;</span><br><span class="line">            IAsyncResult asyncResult = task.BeginInvoke(<span class="number">2000</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//等待异步执行完成</span></span><br><span class="line">            <span class="keyword">while</span> (!asyncResult.AsyncWaitHandle.WaitOne(<span class="number">100</span>, <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> result = task.EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样也可以使用使用回调方式返回结果。要注意的是<code>my.BeginInvoke(3, 300, MethodCompleted, my)</code>，<code>BeginInvoke</code>方法的参数传递方式：</p>
<ul>
<li>前面一部分(3, 300)是其委托本身的参数；</li>
<li>参数<code>MethodCompleted</code>是回调方法委托类型，他是回调方法的委托，此委托没有返回值，有一个<code>IAsyncResult</code>类型的参数，当<code>method</code>方法执行完后，系统会自动调用<code>MethodCompleted</code>方法。</li>
<li>最后一个参数<code>my</code>需要向<code>MethodCompleted</code>方法中传递一些值，一般可以传递被调用方法的委托，这个值可以使用<code>IAsyncResult.AsyncState</code>属性获得。</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">MyMethod</span>(<span class="params"><span class="keyword">int</span> second, <span class="keyword">int</span> millisecond</span>)</span>;</span><br><span class="line">        <span class="comment">//线程执行方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span>(<span class="params"><span class="keyword">int</span> second, <span class="keyword">int</span> millisecond</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"线程休眠"</span> + (second * <span class="number">1000</span> + millisecond) + <span class="string">"毫秒"</span>);</span><br><span class="line">            Thread.Sleep(second * <span class="number">1000</span> + millisecond);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">return</span> random.Next(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MethodCompleted</span>(<span class="params">IAsyncResult asyncResult</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncResult == <span class="literal">null</span> || asyncResult.AsyncState == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"回调失败！！！"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> result = (asyncResult.AsyncState <span class="keyword">as</span> MyMethod).EndInvoke(asyncResult);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务完成，结果："</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MyMethod my = method;</span><br><span class="line">            IAsyncResult asyncResult = my.BeginInvoke(<span class="number">3</span>, <span class="number">300</span>, MethodCompleted, my);</span><br><span class="line">            Console.WriteLine(<span class="string">"任务开始"</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用BackgroundWorker组件来实现">使用BackgroundWorker组件来实现</h2><p>当在设计<code>WinForm</code>应用程序的时候，如果有一段代码非常的耗费时间，并且我们需要很好的控制代码的执行，或者是返回代码的执行进度，这时候就可以使<code>BackgroundWorker</code>组件了。如果是做<code>WinForm</code>程序开发，可以从工具箱中拖放<code>BackgroundWorker</code>组件到应用程序，也可以在应用程序中添加一个BackgroundWorker实例：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BackgroundWorker </span><span class="keyword">bgw </span>= new <span class="keyword">BackgroundWorker();</span></span><br></pre></td></tr></table></figure></p>
<p><code>BackgroundWorker</code>组件常用的操作:<br>bgw.RunWorkerAsync()：<br>开始后台运行执行，该函数后将触发<code>bgw.DoWorker</code>事件，需要执行的操作写在<code>DoWorker</code>事件响应函数里。该函数也可以加参数，参数从<code>DoWorker</code>事件处理函数的<code>e.Arguement</code>里获取；</p>
<p>bgw.CancelAsync()：<br>申请后台程序停止，注意该函数不能实际停止后台程序，只能将<code>bgw</code>的<code>CancellationPending</code>值设为<code>true</code>，需要自己在后台运行的程序中判断这一值，进而停止后台程序的运行。注意本方法使用前，需要将<code>bgw</code>的<code>WorkerSupportsCancellation</code>值设为<code>true</code>，否则将不起作用。</p>
<p>bgw.ReportProgress()：<br>在后台程序中调用，向主线程传送进度信息。可以带一个或两个参数，一个为<code>int</code>类型的进度（0 ~ 100），一个为自定义类型的参数，可以传任意信息。调用后，将触发<code>bgw.ProgressChanged</code>事件，可以将界面变化的代码写在该事件响应函数中，之前提到的两个参数均可从<code>bgw.ProgressChanged</code>事件响应函数的参数<code>e</code>中获取，分别为<code>e.ProgressPercentage</code>和<code>e.UserState</code>。本方法使用前，需要将<code>bgw</code>的<code>WorkerReportsProgress</code>值设为<code>true</code>，否则将不会触发事件。</p>
<p>完整的示例代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">BackgroundWorker bgw = <span class="keyword">new</span> BackgroundWorker();</span><br><span class="line"><span class="comment">//用于显示后台进度</span></span><br><span class="line">bgw.WorkerReportsProgress = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//支持取消后台正在执行的操作</span></span><br><span class="line">bgw.WorkerSupportsCancellation = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在另一个线程里开始操作（btnStart是一个按钮控件）</span></span><br><span class="line"><span class="comment">//也可以利用RunWokerAsync()方法传递参数，</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnStart_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bgw.RunWokerAsync(<span class="number">2000</span><span class="comment">/*参数是可选的*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持取消后台正在执行的操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCancel_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bgw.CancelAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DoWork事件在另一个线程里执行</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bgw_DoWork</span>(<span class="params">objectsender, DoWorkeventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//允许长时间的操作</span></span><br><span class="line">        <span class="keyword">int</span> input = (<span class="keyword">int</span>)e.Argument;</span><br><span class="line">        Thread.Sleep(input);</span><br><span class="line">		<span class="comment">//报告后台执行的进度</span></span><br><span class="line">        bgw.ReportProgress(i * <span class="number">10</span>);</span><br><span class="line">		<span class="comment">//判断是否发出了取消的指令</span></span><br><span class="line">        <span class="keyword">if</span> (bgw.CancellationPending)</span><br><span class="line">        &#123;</span><br><span class="line">            e.Cancel = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在此处设置返回值</span></span><br><span class="line">    e.Result = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用来接收报告回来的进度</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bgw_ProgressChanged</span>(<span class="params"><span class="keyword">object</span> sender, ProgressChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//progressBar1是ProgressBar控件</span></span><br><span class="line">    progressBar1.Value = e.ProgressPercentage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将后台操作的结果反馈给用户</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bgw_RunWorkerCompleted</span>(<span class="params"><span class="keyword">object</span> sender, RunWorkerCompletedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.Cancelled)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">"Operation Cancelled"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">"OperationCompleted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在此处接收传递回来的值</span></span><br><span class="line">    <span class="keyword">int</span> returnValue = (<span class="keyword">int</span>)e.Result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="相关资料">相关资料</h1><p>[1] <a href="http://www.cnblogs.com/luxiaoxun/p/3280146.html" target="_blank" rel="noopener">C#多线程编程</a> By 阿凡卢</p>
<p>[2] <a href="http://www.cnblogs.com/xugang/archive/2008/04/06/1138856.html" target="_blank" rel="noopener">C#多线程学习(一) 多线程的相关概念</a> By xugang</p>
<p>[3] <a href="http://www.jb51.net/article/46257.htm" target="_blank" rel="noopener">C#多线程的应用全面解析</a></p>
<p>[4] <a href="http://blog.sina.com.cn/s/blog_7d892a6701018lkv.html" target="_blank" rel="noopener">C#创建带参数的线程</a> By 熊猫大叔</p>
<p>[5] <a href="http://www.cnblogs.com/inforasc/archive/2009/10/12/1582110.html" target="_blank" rel="noopener">使用BackgroundWorker组件</a> By inforasc</p>
<p>[6] <a href="http://blog.csdn.net/rrrrssss00/article/details/7707678" target="_blank" rel="noopener">BackgroundWorker的使用</a> By rrrrssss00</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阶乘算法大全]]></title>
      <url>http://gyshgx868.github.io/2015/07/14/Cpp/factorial/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>百度到的阶乘算法大全，先收藏一下，说不定有用。</p>
<p>原文：<a href="http://blog.chinaunix.net/uid-20788636-id-1841373.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-20788636-id-1841373.html</a></p>
<a id="more"></a>
<h1 id="模板源代码">模板源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阶乘各算法的C++类实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factorial</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5001</span>; <span class="comment">// 最大阶乘数，实际用不到这么大</span></span><br><span class="line">    <span class="keyword">int</span> *data[MAXN]; <span class="comment">// 存放各个数的阶乘</span></span><br><span class="line">    <span class="keyword">int</span> *nonzero; <span class="comment">// 从低位数起第一个非0数字</span></span><br><span class="line">    <span class="keyword">int</span> maxn; <span class="comment">// 存放最大已经计算好的n的阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SmallFact</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// n &lt;= 12的递归程序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TransToStr</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *s)</span></span>; <span class="comment">// 将数n倒序存入数组中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Multply</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> *B, <span class="keyword">int</span> *C, <span class="keyword">int</span> totallen)</span></span>;  <span class="comment">// 执行两个高精度数的乘法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Factorial();</span><br><span class="line">    ~Factorial();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 调用计算阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FirstNonZero</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 返回阶乘末尾第一个非0数字</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">CountZeros</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 返回阶乘末尾有多少个0</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SecondNum</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 返回阶乘左边的第二个数字</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">CanDivide</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 判断数值 m 是否可以整除 n!</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Factorial::SmallFact(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> SmallFact(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::TransToStr(<span class="keyword">int</span> n, <span class="keyword">int</span> *tmp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i++] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp[<span class="number">0</span>] = i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::Multply(<span class="keyword">int</span> *A, <span class="keyword">int</span> *B, <span class="keyword">int</span> *C, <span class="keyword">int</span> totallen)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, len;</span><br><span class="line">    <span class="built_in">memset</span>(C, <span class="number">0</span>, totallen * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= A[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= B[<span class="number">0</span>]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i + j - <span class="number">1</span>] += A[i] * B[j]; <span class="comment">// 当前i+j-1位对应项 + A[i] * B[j]</span></span><br><span class="line">            C[i + j] += C[i + j - <span class="number">1</span>] / <span class="number">10</span>; <span class="comment">// 它的后一位 + 它的商（进位）</span></span><br><span class="line">            C[i + j - <span class="number">1</span>] %= <span class="number">10</span>; <span class="comment">// 它再取余即可</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len = A[<span class="number">0</span>] + B[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">1</span> &amp;&amp; C[len] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len--;    <span class="comment">// 获得它的实际长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    C[<span class="number">0</span>] = len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Factorial::Factorial()   <span class="comment">// 构造函数，先把&lt;=12的阶乘计算好</span></span><br><span class="line">&#123;</span><br><span class="line">    maxn = <span class="number">12</span>;</span><br><span class="line">    data[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line">    data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    data[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">12</span>];</span><br><span class="line">        j = j * i;</span><br><span class="line">        TransToStr(j, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    nonzero = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span> * MAXN];</span><br><span class="line">    nonzero[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    nonzero[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// nonzero[0]存储已经计算到的n!末尾非0数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Factorial::~Factorial()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">        <span class="keyword">delete</span> []data[i];</span><br><span class="line">    <span class="keyword">delete</span> []nonzero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::Calculate(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; MAXN)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= maxn)</span><br><span class="line">        <span class="keyword">return</span>;    <span class="comment">// &lt;= maxn的，已经在计算好的数组中了</span></span><br><span class="line">    <span class="keyword">int</span> i, j, len;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = maxn + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        TransToStr(i, tmp);</span><br><span class="line">        len = data[i - <span class="number">1</span>][<span class="number">0</span>] + tmp[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        data[i] = <span class="keyword">new</span> <span class="keyword">int</span> [len + <span class="number">1</span>];</span><br><span class="line">        Multply(data[i - <span class="number">1</span>], tmp, data[i], len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    maxn = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Factorial::FirstNonZero(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">10</span> * MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Super Pig, your input is too large, cannot Calculate. Sorry! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= nonzero[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> nonzero[n];    <span class="comment">//已经计算好了，直接返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res[<span class="number">5</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> i, five, t;</span><br><span class="line">    <span class="keyword">for</span> (i = nonzero[<span class="number">0</span>] + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = i;</span><br><span class="line">        <span class="keyword">while</span> (t % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t /= <span class="number">10</span>;    <span class="comment">// 先去掉 i 末尾的 0，这是不影响的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">// t是偶数直接乘再取模10即可</span></span><br><span class="line">        &#123;</span><br><span class="line">            nonzero[i] = (nonzero[i - <span class="number">1</span>] * t) % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">// 否则转换成 res 数组来求</span></span><br><span class="line">        &#123;</span><br><span class="line">            five = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (t % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (five == <span class="number">3</span>)</span><br><span class="line">                    five = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    five++;</span><br><span class="line">                t /= <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nonzero[i] = res[((nonzero[i - <span class="number">1</span>] * t) % <span class="number">10</span>) / <span class="number">2</span>][five];</span><br><span class="line">            <span class="comment">// (nonzero[i-1]*t)%10/2 正好序号为：1, 2, 3, 4 中的一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nonzero[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">return</span> nonzero[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 阶乘末尾有多少个0，实际上只与5的因子数量有关，即求 n/5+n/25+n/625+...... */</span></span><br><span class="line"><span class="keyword">int</span> Factorial::CountZeros(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">2000000000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Super Pig, your input is too large, cannot Calculate. Sorry! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        n /= <span class="number">5</span>;</span><br><span class="line">        cnt += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出N!左边第二位的数字：用实数乘，超过100就除以10，最后取个位即可 */</span></span><br><span class="line"><span class="keyword">int</span> Factorial::SecondNum(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">4</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x *= i;</span><br><span class="line">        <span class="keyword">while</span> (x &gt;= <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>(x)) % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Factorial::CanDivide(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> nn, i, j, nums1, nums2;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">    j = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(<span class="number">1.0</span> * m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= j; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums1 = <span class="number">0</span>; <span class="comment">// 除数m的素因子i的数量</span></span><br><span class="line">            <span class="keyword">while</span> (m % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums1++;</span><br><span class="line">                m /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            nums2 = <span class="number">0</span>;</span><br><span class="line">            nn = n;</span><br><span class="line">            <span class="keyword">while</span> (nn)   <span class="comment">// 求 n 含有 i 因子的数量</span></span><br><span class="line">            &#123;</span><br><span class="line">                nn /= i;</span><br><span class="line">                nums2 += nn;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums2 &lt; nums1)   <span class="comment">// 少于m中所含i的数量，则m肯定无法整除n!</span></span><br><span class="line">            &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span> * m); <span class="comment">// 调整新的素因子前进范围</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ok || m &gt; n || m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Factorial::Output(<span class="keyword">int</span> n) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Super Pig, your input is so large, cannot Calculate. Sorry! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i, len = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; n &lt;&lt; <span class="string">"! = "</span>; <span class="comment">// 格式控制输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = data[n][<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; data[n][i];</span><br><span class="line">        <span class="keyword">if</span> (++len == <span class="number">58</span>)   <span class="comment">// 实际每输出50个字符就换行</span></span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="number">8</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len != <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    Factorial f;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        f.Calculate(n);</span><br><span class="line">        f.Output(n);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"该阶乘末尾第一个非0数字是: "</span> &lt;&lt; f.FirstNonZero(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"该阶乘总共拥有数字0的个数："</span> &lt;&lt; f.CountZeros(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"该阶乘的左边的第2位数字是："</span> &lt;&lt; f.SecondNum(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (f.CanDivide(m, n))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">" 可以整除 "</span> &lt;&lt; n &lt;&lt; <span class="string">"! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">" 不能整除 "</span> &lt;&lt; n &lt;&lt; <span class="string">"! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="高精度计算阶乘">高精度计算阶乘</h1><p>这实际上是最没有技术含量的问题，但是又会经常用到，所以还是得编写，优化它的计算。</p>
<p>首先看小于等于12的阶乘计算（计算结果不会超出32位范围）：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> factorial(<span class="built_in">int</span> <span class="built_in">n</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">if</span> (<span class="built_in">n</span> == <span class="number">1</span> || <span class="built_in">n</span> == <span class="number">0</span>) return <span class="number">1</span>;</span><br><span class="line">    return factorial(<span class="built_in">n</span> - <span class="number">1</span>) * <span class="built_in">n</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个递归程序简单明了，非常直观，然而一旦n&gt;12，则超过32位int型的范围出现错误结果，所以上面这个递归程序仅适合n&lt;=12的阶乘计算。为了计算较大n的阶乘，需要将高精度乘法算法纳入到阶乘计算中来，高精度乘法过程可以如下简单的描述（其中<code>A * B = C</code>，<code>A[0]</code>，<code>B[0]</code>，<code>C[0]</code>分别存储长度）：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for (i = <span class="number">1</span>; i &lt;= A[<span class="number">0</span>]; i++)</span><br><span class="line">&#123;</span><br><span class="line">    for (j = <span class="number">1</span>; j &lt;= B[<span class="number">0</span>]; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i + j - <span class="number">1</span>] += A[i] * B[j];        <span class="comment">// 当前i+j-1位对应项 + A[i] * B[j]</span></span><br><span class="line">        C[i + j] += C[i + j - <span class="number">1</span>] / <span class="number">10</span>;      <span class="comment">// 它的后一位 + 它的商（进位）</span></span><br><span class="line">        C[i + j - <span class="number">1</span>] %= <span class="number">10</span>;                 <span class="comment">// 它再取余即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">C[<span class="number">0</span>] = A[<span class="number">0</span>] + B[<span class="number">0</span>];</span><br><span class="line">while (C[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C[C[<span class="number">0</span>]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    C[<span class="number">0</span>]--;   <span class="comment">// 去头0，获得实际C的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有了这个高精度乘法之后，计算阶乘就可以简单的迭代进行：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">i</span> = <span class="number">2</span>; <span class="built_in">i</span> &lt;= n; <span class="built_in">i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    //将i转换成字符数组;</span><br><span class="line">    //执行高精度乘法：将上一次结果乘上i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="与数论有关">与数论有关</h1><p>由于阶乘到后面越来越大，巧妙的利用数论求得一些有趣的数字（数值）等成为阶乘算法的设计点，下面给出几道相关的问题与分析：</p>
<h2 id="计算阶乘末尾第一个非0数字：">计算阶乘末尾第一个非0数字：</h2><p>这是一个比较经典的问题，比较复杂的算法是利用一个艰难的数学公式，可惜我不会，从网上的资料学习中，整理出下面这个简单易懂的算法：</p>
<p>观察n!，可以发现在乘的过程中，对于任意 n > 1，n!的末尾第一个非0数字都是偶数。我们只需保留最后一位非零数。当要乘的数中含有因数5时，我们可以把所有的因数5都当作8来乘。这是因为:</p>
<p>…x2<em>5=…10（舍）或…60，最后一位非零数为6。而恰好2</em>8=16，末位为6。</p>
<p>…x4<em>5=…70（舍）或…20，最后一位非零数为2。而恰好4</em>8=32，末位为2。</p>
<p>…x6<em>5=…30（舍）或…80，最后一位非零数为8。而恰好6</em>8=48，末位为8。</p>
<p>…x8<em>5=…90（舍）或…40，最后一位非零数为4。而恰好8</em>8=64，末位为4。</p>
<p>(对于n > 1时，最后一位不会出现 1, 7, 3, 9，而永远是2, 4, 6, 8的循环出现)</p>
<p>因此，在迭代作乘法时，主要就是计算因子5的数量，同时可见因子5的个数以4为循环节（即只需要取它的数量对4取模）。那么对于不同情况下的因子5的数量，可以通过<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res[<span class="number">5</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>&#125;, &#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>&#125;, &#123;<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;, &#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>来得到，使用<code>nonzero[i]</code>表示i的阶乘的最后一位，那么：</p>
<p>如果t是偶数，则直接乘：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nonzero[i] = (nonzero[i - <span class="number">1</span>] * t) <span class="comment">% 10;</span></span><br></pre></td></tr></table></figure></p>
<p>否则：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nonzero[<span class="string">i</span>] = res[<span class="string">((nonzero[i - 1</span>] * t) % 10) / 2][five];</span><br></pre></td></tr></table></figure></p>
<p>其中t是除掉所有因子5的结果，five为因子5数量对4的模。相关题目：<br><a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的第1222题。不过这一道题注意的是，它的输入n并非只在32位int数值范围内，而是有很大的长度，所以计算这道变态题目时，需要利用到高精度除法(<code>n /= 5</code>)和高精度加法(<code>cnt += n</code>)。</p>
<h2 id="阶乘末尾有多少个0">阶乘末尾有多少个0</h2><p>分析发现，实际上形成末尾0，就是因子5的数量，而计算1~n之间包含一个因子i的个数的简单算法就是：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cnt</span> = <span class="number">0</span>;</span><br><span class="line"><span class="attribute">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">n</span> /= i;</span><br><span class="line">    <span class="attribute">cnt</span> += n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因此，直接将i换成5，就可以得到因子5的数量，也即n!末尾0的数量。相关题目：<a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的第2022题。</p>
<h2 id="返回阶乘左边的第二个数字">返回阶乘左边的第二个数字</h2><p>简单算法：用实数乘，超过100就除以10，最后取个位即可。因为整数部分的个位就是阶乘结果左边的第二个数字。相关题目：<a href="http://acm.tongji.edu.cn" target="_blank" rel="noopener">http://acm.tongji.edu.cn</a>的1016题。</p>
<h2 id="判断数值m是否可以整除n!">判断数值m是否可以整除n!</h2><p>算法：使用素因子判断法</p>
<p>A. 首先直接输出两种特殊情况：</p>
<p><code>m == 0</code> 则0肯定不会整除n!；</p>
<p><code>n &gt;= m</code> 则m肯定可以整除n!;</p>
<p>B. 那么就只剩最后一种情况：<code>m &gt; n</code>，我们从m的最小素因子取起，设素因子为i那么可以求得m的素因子i的个数<code>nums1</code>；再检查闭区间<code>i ~ n</code>之间的数，一共包含多少个素因子i，就可以简单的利用上面(2)中所介绍的数学公式进行计算得到<code>nums2</code>。如果<code>nums2 &lt; nums1</code>，就表示<code>1 ~ n</code>中包含素因子的数量 &lt; 除数m包含素因子i的数量，那么m必然不能整除n!，置<code>ok = false</code>。</p>
<p>C. 最后：如果<code>!ok or m &gt; n or m == 0</code>则不能整除；否则可以整除</p>
<p>相关题目：<a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的第1850题。</p>
<h2 id="数字N能否表示成若干个不相同的阶乘的和：">数字N能否表示成若干个不相同的阶乘的和：</h2><p>这里可以选择的阶乘为：0! ~ 9!，实际上这一题与数论无关，与搜索有关。相关题目：<a href="http://acm.zju.edu.cn" target="_blank" rel="noopener">http://acm.zju.edu.cn</a>的2358题。</p>
<p>分析，由于可供选择的阶乘数量较少，直接可以利用DFS搜索来做：</p>
<p>A. 首先将0 ~ 9的阶乘作一个表A[10]；再设置一个可以组成“和”的数组ans[N]。</p>
<p>B. 深度优先搜索方法：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">search</span>(<span class="built_in">n</span>)</span><br><span class="line">&#123;</span><br><span class="line">    for (i = <span class="built_in">n</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sum</span> += A[i];        //求和</span><br><span class="line">        //如果<span class="built_in">sum</span>在ans数组中不存在，则将<span class="built_in">sum</span>插入到ans[]数组中</span><br><span class="line">        <span class="built_in">search</span>(<span class="built_in">n</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sum</span> -= A[i];         //回溯</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C. 最后对于输入n，就在ans数组中查找是否存在n，如果存在，则表示n可以表示成不同的阶乘和，否则不行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java在ACM中的应用]]></title>
      <url>http://gyshgx868.github.io/2015/07/13/Java/java-acm/</url>
      <content type="html"><![CDATA[<h1 id="基本使用框架">基本使用框架</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.*;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.*;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Java的输入">Java的输入</h1><h2 id="Scanner类">Scanner类</h2><p>首先，先将Scanner初始化成一个对象：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> <span class="type">Scanner</span>(System.<span class="keyword">in</span>);</span><br></pre></td></tr></table></figure></p>
<p>读一个整数：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int n</span> = s.nextInt();</span><br></pre></td></tr></table></figure></p>
<p>相当于C或C++中的：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;<span class="built_in">n</span>);</span><br><span class="line">cin &gt;&gt; <span class="built_in">n</span>;</span><br></pre></td></tr></table></figure></p>
<p>读一个字符串：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str </span>= s.next()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>相当于C或C++中的：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">str</span>[<span class="number">500</span>];</span><br><span class="line">scanf(<span class="string">"%s"</span>, <span class="keyword">str</span>);</span><br><span class="line">cin &gt;&gt; <span class="keyword">str</span>;</span><br></pre></td></tr></table></figure></p>
<p>读一个浮点数：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">double t</span> = s.nextDouble();</span><br></pre></td></tr></table></figure></p>
<p>相当于C或C++中的：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double <span class="literal">t</span><span class="comment">;</span></span><br><span class="line">scanf(<span class="string">"%lf"</span>, <span class="symbol">&amp;t</span>)<span class="comment">;</span></span><br><span class="line">cin &gt;&gt; <span class="literal">t</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>读一整行：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str </span>= s.nextLine()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">str</span>[<span class="number">500</span>];</span><br><span class="line">gets(<span class="keyword">str</span>);</span><br><span class="line">cin.getline(<span class="keyword">str</span>, <span class="number">100</span>, <span class="string">'\0'</span>);</span><br></pre></td></tr></table></figure></p>
<p>判断是否有下一个输入可以用以下语句：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.hasNext()<span class="comment">;</span></span><br><span class="line">s.hasNextInt()<span class="comment">;</span></span><br><span class="line">s.hasNextDouble()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>少量的输入推荐使用<code>Scanner</code>，但是大量的数据的输入就推荐使用<code>BufferedReader</code>类了，就像可以用<code>scanf</code>替换<code>cin</code>一样。</p>
<h2 id="BufferedReader类">BufferedReader类</h2><p>Java的快速输入输出类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Reader r = <span class="keyword">new</span> Reader(System.in);</span><br><span class="line">        <span class="keyword">double</span> x = r.nextDouble();</span><br><span class="line">        <span class="keyword">int</span> n = r.nextInt();</span><br><span class="line">        String str = r.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> BufferedReader reader;</span><br><span class="line">    StringTokenizer tokenizer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reader</span><span class="params">(InputStream input)</span> </span>&#123;</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input));</span><br><span class="line">        tokenizer = <span class="keyword">new</span> StringTokenizer(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">            tokenizer = <span class="keyword">new</span> StringTokenizer(reader.readLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Java的输出">Java的输出</h1><h2 id="普通输出">普通输出</h2><p>输出一般可以直接用<code>System.out.print()</code>和<code>System.out.println()</code>，前者不输出换行，而后者输出。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.out.println(n);                 <span class="comment">//输出换行</span></span><br><span class="line"><span class="keyword">System</span>.out.<span class="keyword">print</span>(n);                   <span class="comment">//不输出换行</span></span><br><span class="line"><span class="keyword">System</span>.out.printf(<span class="string">"%s %d"</span>, str, n);    <span class="comment">//和C语言的printf用法类似</span></span><br></pre></td></tr></table></figure></p>
<p>或者可以使用如下的方法：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter <span class="keyword">out</span> = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedOutputStream(System.<span class="keyword">out</span>));</span><br><span class="line"><span class="keyword">out</span>.println(n);</span><br></pre></td></tr></table></figure></p>
<h2 id="浮点数输出">浮点数输出</h2><p>对于输出浮点数保留几位小数的问题，可以使用DecimalFormat类来实现：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.<span class="built_in">text</span>.*;</span><br><span class="line"><span class="comment">//三位四舍五入</span></span><br><span class="line">DecimalFormat f = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.00#"</span>);</span><br><span class="line"><span class="comment">//保留三位小数</span></span><br><span class="line">DecimalFormat g = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.000"</span>); </span><br><span class="line"><span class="keyword">double</span> a = <span class="number">123.45678</span>, b = <span class="number">0.12</span>; </span><br><span class="line">System.out.<span class="built_in">println</span>(f.format(a)); </span><br><span class="line">System.out.<span class="built_in">println</span>(f.format(b)); </span><br><span class="line">System.out.<span class="built_in">println</span>(g.format(b));</span><br></pre></td></tr></table></figure></p>
<p>以上代码的输出结果如下：</p>
<blockquote>
<p>123.457<br>.12<br>0.120</p>
</blockquote>
<h1 id="大数类">大数类</h1><p>在ACM中的做题时，经常会遇见一些大数的问题，这是当我们用C或是C++时就会觉得比较麻烦，因为我们必须要通过数组来模拟加减乘除的运算。因此我们可以使用Java提供的<code>BigInteger</code>、<code>BigDecimal</code>类来实现大数的计算。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">import</span> java.math.*<span class="comment">;</span></span><br><span class="line"><span class="keyword">BigInteger </span>a = <span class="keyword">BigInteger.valueOf(100);</span></span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">b </span>= <span class="keyword">BigInteger.valueOf(50);</span></span><br><span class="line"><span class="keyword">BigInteger </span>c = a.<span class="keyword">add(b); </span>   //c = a + <span class="keyword">b</span></span><br><span class="line"><span class="keyword">System.out.println(c); </span>     //输出c的值</span><br></pre></td></tr></table></figure></p>
<p>主要有以下方法可以使用：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//加</span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">add(BigInteger </span>other)</span><br><span class="line">//减</span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">subtract(BigInteger </span>other)</span><br><span class="line">//乘</span><br><span class="line"><span class="keyword">BigInteger </span><span class="keyword">multiply(BigInteger </span>other)</span><br><span class="line">//除</span><br><span class="line"><span class="keyword">BigInteger </span>divide(<span class="keyword">BigInteger </span>other)</span><br><span class="line">//求余</span><br><span class="line"><span class="keyword">BigInteger </span>mod(<span class="keyword">BigInteger </span>other)</span><br><span class="line"><span class="symbol">int</span> compareTo(<span class="keyword">BigInteger </span>other)</span><br><span class="line"><span class="symbol">static</span> <span class="keyword">BigInteger </span>valueOf(long x)</span><br></pre></td></tr></table></figure></p>
<p><code>BigInteger</code>类的对象不可进行加减乘除四则运算，要调用其成员函数进行运算。另外<code>BigInteger</code>类不是<code>int</code>的扩展类型，所以不能把<code>int</code>类型值直接赋值给<code>BigInteger</code>。</p>
<p><code>BigInteger</code>类型有自己的常量：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigInteger.ZERO<span class="comment">;</span></span><br><span class="line">BigInteger.ONE<span class="comment">;</span></span><br><span class="line">BigInteger.TEN<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p><code>BigDecimal</code>的用法和<code>BigInteger</code>的用法类似，在这里就不多说了。</p>
<h1 id="字符串应用">字符串应用</h1><p>ACM中还会经常遇到字符串的处理方面的问题：<code>StringBuffer</code> 和<code>StringBuilder</code>这两个类有很多又用的方法可供使用。对于要进行大量变化的字符串处理建议使用<code>StringBuffer</code>类，而不是经常变化的字符串建议使用<code>String</code>类，它们特点取决于Java中对<code>String</code>和<code>StringBuffer</code>的内存分配不相同的原因了。另外字符串处理中经常可能要用到的是另外一个知识了，那就是正则表达式了，如果能够很好的撑握正则表达式的用法，那么字符串处理可以说你已经完成一半的任务了。如果正则表达式没有完全撑握，<code>StringBuilder</code>就是它的一个替代品。另外<code>StringTokenizer</code>也是一个很有用的工具，因为不会使用，所以在这里就不多谈了。</p>
<p>本节就简单的来讲一下<code>String</code>类的使用方法。<code>String</code>类用来存储字符串，可以用<code>charAt()</code>方法来取出其中某一下标的字符，下标从0开始：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"Hello"</span>;                     <span class="comment">// str.charAt(1) = 'e'</span></span><br></pre></td></tr></table></figure></p>
<p>用<code>substring</code>方法可得到子串：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System<span class="selector-class">.out</span><span class="selector-class">.println</span>(str.substring(<span class="number">0</span>, <span class="number">4</span>))   <span class="comment">// output "Hell"</span></span><br></pre></td></tr></table></figure></p>
<p>注意<code>substring</code>方法应用的是前闭后开区间，第二个参数位置的字符不包括在内。这样做使得<code>str.substring(a, b)</code>包含b - a个字符。</p>
<p>字符串连接可以直接用 + 号进行连接，如：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"Hello"</span><span class="comment">; </span></span><br><span class="line">String <span class="keyword">b </span>= <span class="string">"World"</span><span class="comment">; </span></span><br><span class="line">System.out.println(a + <span class="string">", "</span> + <span class="keyword">b </span>+ <span class="string">"!"</span>)<span class="comment">;    // output "Hello, World!"</span></span><br></pre></td></tr></table></figure></p>
<p>如想直接将字符串中的某字节改变，可以使用另外的StringBuffer类。</p>
<p>以下是一个简单的StringBuffer类的测试例子：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.StringBuffer;</span><br><span class="line"><span class="keyword">public</span> class StringBufferTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        StringBuffer <span class="built_in">str</span> = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">        StringBuffer str2 = <span class="built_in">str</span>;</span><br><span class="line">        <span class="built_in">str</span> = str2.<span class="built_in">append</span>(<span class="built_in">str</span>.<span class="built_in">reverse</span>());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">        <span class="built_in">str</span>.insert(<span class="number">1</span>, <span class="string">"aaaaaa"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>.charAt(<span class="number">1</span>));</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>.lastIndexOf(<span class="string">"ba"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序的输出结果如下：</p>
<blockquote>
<p>cbacba<br>caaaaaabacba<br>a<br>10</p>
</blockquote>
<h1 id="其他注意事项">其他注意事项</h1><ol>
<li>Java是面向对象的语言，思考方法需要变换一下，里面的函数统称为方法，不要搞错。</li>
<li>Java里的数组有些变动，多维数组的内部其实都是指针，所以Java不支持fill多维数组。 数组定义后必须初始化，如<code>int[] a = new int[100]</code>;</li>
<li>布尔类型为<code>boolean</code>，只有<code>true</code>和<code>false</code>二值，在if (…) / while (…) 等语句的条件中必须为<code>boolean</code>类型，在C/C++中的if (n % 2)类似的语句在Java中无法编译通过。</li>
<li>下面在java.util包里Arrays类的几个方法可替代C/C++里的<code>memset</code>、<code>qsort</code>/<code>sort</code>和 <code>bsearch</code>:<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrays.fill()<span class="comment">;</span></span><br><span class="line">Arrays.sort()<span class="comment">;</span></span><br><span class="line">Arrays.binarySearch()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java实现简易计算器]]></title>
      <url>http://gyshgx868.github.io/2015/07/13/Java/java-calculator/</url>
      <content type="html"><![CDATA[<h1 id="简述">简述</h1><ol>
<li>使用JDK 1.8；</li>
<li>使用JFrame实现窗口，JFrame拥有比Applet更好的界面（个人认为）；</li>
<li>已经实现基本的+、-、*、/四则运算，支持小数点，正负数，未实现除0判断；</li>
</ol>
<a id="more"></a>
<h1 id="程序截图">程序截图</h1><p><img src="http://7xkd41.dl1.z0.glb.clouddn.com/calculator.png" alt="Java计算器"></p>
<h1 id="源代码">源代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line">    <span class="comment">//定义布局方式为网格包布局</span></span><br><span class="line">    <span class="keyword">private</span> GridBagLayout layout;</span><br><span class="line">    <span class="keyword">private</span> GridBagConstraints constraints;</span><br><span class="line">    <span class="comment">//计算结果显示区</span></span><br><span class="line">    <span class="keyword">private</span> JTextField displayField;</span><br><span class="line">    <span class="comment">//保存+, -, *, /, =命令</span></span><br><span class="line">    <span class="keyword">private</span> String lastCommand;</span><br><span class="line">    <span class="comment">//保存计算结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result;</span><br><span class="line">    <span class="comment">//判断是否为数字的开始</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"计算器"</span>);</span><br><span class="line">        setBounds(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        container = getContentPane();</span><br><span class="line">        layout = <span class="keyword">new</span> GridBagLayout();</span><br><span class="line">        container.setLayout(layout);</span><br><span class="line">        constraints = <span class="keyword">new</span> GridBagConstraints();</span><br><span class="line">        start = <span class="keyword">true</span>;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//默认执行的操作</span></span><br><span class="line">        lastCommand = <span class="string">"="</span>;</span><br><span class="line">        <span class="comment">//定义计算区域</span></span><br><span class="line">        displayField = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//计算区域的数字靠右显示</span></span><br><span class="line">        displayField.setHorizontalAlignment(JTextField.RIGHT);</span><br><span class="line">        <span class="comment">//定义计算区域的背景颜色</span></span><br><span class="line">        displayField.setBackground(Color.white);</span><br><span class="line">        <span class="comment">//定义计算区域的前景颜色</span></span><br><span class="line">        displayField.setForeground(Color.blue);</span><br><span class="line">        displayField.setFont(<span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">24</span>, <span class="number">24</span>));</span><br><span class="line">        <span class="comment">//定义计算区域的X，Y轴</span></span><br><span class="line">        constraints.gridx = <span class="number">0</span>;</span><br><span class="line">        constraints.gridy = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义计算区域的宽度和高度</span></span><br><span class="line">        constraints.gridwidth = <span class="number">4</span>;</span><br><span class="line">        constraints.gridheight = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//定义控件填充满剩余空间</span></span><br><span class="line">        constraints.fill = GridBagConstraints.BOTH;</span><br><span class="line">        <span class="comment">//定义计算区域的X，Y轴单位度量值</span></span><br><span class="line">        constraints.weightx = <span class="number">50</span>;</span><br><span class="line">        constraints.weighty = <span class="number">50</span>;</span><br><span class="line">        layout.setConstraints(displayField, constraints);</span><br><span class="line">        <span class="comment">//将计算区域加入到窗口中</span></span><br><span class="line">        container.add(displayField);</span><br><span class="line">        <span class="comment">//定义两个监视器</span></span><br><span class="line">        ActionListener insert = <span class="keyword">new</span> InsertAction();</span><br><span class="line">        ActionListener command = <span class="keyword">new</span> CommandAction();</span><br><span class="line">        <span class="comment">//通过定义好的方法添加按钮</span></span><br><span class="line">        addButton(<span class="string">"Bck"</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"CE"</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"CLEAR"</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"7"</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"8"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"9"</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"/"</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"4"</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"5"</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"6"</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"*"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"1"</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"2"</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"3"</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"-"</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"0"</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        <span class="comment">//只显示"-"号, "+"不显示</span></span><br><span class="line">        addButton(<span class="string">"+/-"</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"."</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"+"</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"Powered By GYSHGX868"</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"="</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        <span class="comment">//设置窗口的大小</span></span><br><span class="line">        setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">//设置窗口可见</span></span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">(String label, <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">int</span> with,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> height, ActionListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义添加按钮的方法</span></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">        constraints.gridx = row;</span><br><span class="line">        constraints.gridy = column;</span><br><span class="line">        constraints.gridwidth = with;</span><br><span class="line">        constraints.gridheight = height;</span><br><span class="line">        constraints.fill = GridBagConstraints.BOTH;</span><br><span class="line">        button.addActionListener(listener);</span><br><span class="line">        layout.setConstraints(button, constraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">        <span class="comment">//设置按钮间的间距</span></span><br><span class="line">        constraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置字体</span></span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">12</span>, <span class="number">18</span>));</span><br><span class="line">        button.setForeground(Color.MAGENTA);</span><br><span class="line">        button.setBorderPainted(<span class="keyword">true</span>);</span><br><span class="line">        button.setContentAreaFilled(<span class="keyword">true</span>);</span><br><span class="line">        button.setBounds(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        button.contains(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义Insert事件的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String input = event.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (start) &#123;</span><br><span class="line">                displayField.setText(<span class="string">""</span>); <span class="comment">//默认计算区域为空</span></span><br><span class="line">                start = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//如果开始输入的是"+/-"，以负数显示</span></span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"+/-"</span>))</span><br><span class="line">                    displayField.setText(displayField.getText() + <span class="string">"-"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!input.equals(<span class="string">"+/-"</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"Bck"</span>)) &#123;</span><br><span class="line">                    String str = displayField.getText();</span><br><span class="line">                    <span class="keyword">if</span> (str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果单击退格，实现退格的功能</span></span><br><span class="line">                        displayField.setText(str.substring(<span class="number">0</span>, str.length() - <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"CE"</span>) || input.equals(<span class="string">"CLEAR"</span>)) &#123;</span><br><span class="line">                    displayField.setText(<span class="string">"0"</span>);</span><br><span class="line">                    start = <span class="keyword">true</span>; <span class="comment">//实现清零和复位的功能</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (displayField.getText().trim().indexOf(<span class="string">"."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">//输入小数点时，判断是否已经输入过小数点</span></span><br><span class="line">                        displayField.setText(displayField.getText() + input);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    displayField.setText(displayField.getText() + input);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent evt)</span> </span>&#123;</span><br><span class="line">            String command = evt.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (start) &#123;</span><br><span class="line">                lastCommand = command;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                calculate(Double.parseDouble(displayField.getText()));</span><br><span class="line">                lastCommand = command;</span><br><span class="line">                start = <span class="keyword">true</span>; <span class="comment">//记忆输入的操作符号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastCommand.equals(<span class="string">"+"</span>))</span><br><span class="line">            result += x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"-"</span>))</span><br><span class="line">            result -= x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"*"</span>))</span><br><span class="line">            result *= x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"/"</span>))</span><br><span class="line">            result /= x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lastCommand.equals(<span class="string">"="</span>))</span><br><span class="line">            result = x; <span class="comment">//实现计算的功能</span></span><br><span class="line">        <span class="comment">//显示计算的结果</span></span><br><span class="line">        displayField.setText(<span class="string">""</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化计算器</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">        calculator.setResizable(<span class="keyword">false</span>);</span><br><span class="line">        calculator.setForeground(Color.MAGENTA);</span><br><span class="line">        <span class="comment">//关闭窗口，退出程序</span></span><br><span class="line">        calculator.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
